
DisposablesSecurity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008edc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000478  20000000  00008edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000904  20000478  00009354  00020478  2**2
                  ALLOC
  3 .stack        00002004  20000d7c  00009c58  00020478  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020478  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004975d  00000000  00000000  000204f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000071f4  00000000  00000000  00069c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000118b3  00000000  00000000  00070e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000dd0  00000000  00000000  000826fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000dd0  00000000  00000000  000834cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000d25e  00000000  00000000  0008429d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00019087  00000000  00000000  000914fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093ed9  00000000  00000000  000aa582  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003000  00000000  00000000  0013e45c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 2d 00 20 3d 4b 00 00 39 4b 00 00 39 4b 00 00     .-. =K..9K..9K..
	...
      2c:	39 4b 00 00 00 00 00 00 00 00 00 00 39 4b 00 00     9K..........9K..
      3c:	39 4b 00 00 39 4b 00 00 39 4b 00 00 39 4b 00 00     9K..9K..9K..9K..
      4c:	39 4b 00 00 d5 38 00 00 39 4b 00 00 39 4b 00 00     9K...8..9K..9K..
      5c:	39 4b 00 00 39 4b 00 00 35 3e 00 00 45 3e 00 00     9K..9K..5>..E>..
      6c:	55 3e 00 00 65 3e 00 00 75 3e 00 00 85 3e 00 00     U>..e>..u>...>..
      7c:	39 4b 00 00 39 4b 00 00 39 4b 00 00 e9 4a 00 00     9K..9K..9K...J..
      8c:	f9 4a 00 00 09 4b 00 00 19 4b 00 00 29 4b 00 00     .J...K...K..)K..
      9c:	39 4b 00 00 39 4b 00 00 39 4b 00 00 39 4b 00 00     9K..9K..9K..9K..
      ac:	39 4b 00 00 00 00 00 00                             9K......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000478 	.word	0x20000478
      d4:	00000000 	.word	0x00000000
      d8:	00008edc 	.word	0x00008edc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000047c 	.word	0x2000047c
     108:	00008edc 	.word	0x00008edc
     10c:	00008edc 	.word	0x00008edc
     110:	00000000 	.word	0x00000000

00000114 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     114:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     116:	2207      	movs	r2, #7
     118:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     11a:	421a      	tst	r2, r3
     11c:	d1fc      	bne.n	118 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     11e:	4770      	bx	lr

00000120 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     120:	b5f0      	push	{r4, r5, r6, r7, lr}
     122:	46de      	mov	lr, fp
     124:	4657      	mov	r7, sl
     126:	464e      	mov	r6, r9
     128:	4645      	mov	r5, r8
     12a:	b5e0      	push	{r5, r6, r7, lr}
     12c:	b08b      	sub	sp, #44	; 0x2c
     12e:	0005      	movs	r5, r0
     130:	000f      	movs	r7, r1
     132:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     134:	6029      	str	r1, [r5, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     136:	0008      	movs	r0, r1
     138:	4b9b      	ldr	r3, [pc, #620]	; (3a8 <i2c_master_init+0x288>)
     13a:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     13c:	4a9b      	ldr	r2, [pc, #620]	; (3ac <i2c_master_init+0x28c>)
     13e:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     140:	1c84      	adds	r4, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     142:	2301      	movs	r3, #1
     144:	40a3      	lsls	r3, r4
     146:	430b      	orrs	r3, r1
     148:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     14a:	a909      	add	r1, sp, #36	; 0x24
     14c:	7b33      	ldrb	r3, [r6, #12]
     14e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     150:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     152:	b2c4      	uxtb	r4, r0
     154:	0020      	movs	r0, r4
     156:	4b96      	ldr	r3, [pc, #600]	; (3b0 <i2c_master_init+0x290>)
     158:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     15a:	0020      	movs	r0, r4
     15c:	4b95      	ldr	r3, [pc, #596]	; (3b4 <i2c_master_init+0x294>)
     15e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     160:	7b30      	ldrb	r0, [r6, #12]
     162:	2100      	movs	r1, #0
     164:	4b94      	ldr	r3, [pc, #592]	; (3b8 <i2c_master_init+0x298>)
     166:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     168:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     16a:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     16c:	079b      	lsls	r3, r3, #30
     16e:	d506      	bpl.n	17e <i2c_master_init+0x5e>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     170:	b00b      	add	sp, #44	; 0x2c
     172:	bc3c      	pop	{r2, r3, r4, r5}
     174:	4690      	mov	r8, r2
     176:	4699      	mov	r9, r3
     178:	46a2      	mov	sl, r4
     17a:	46ab      	mov	fp, r5
     17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     17e:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     180:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     182:	07db      	lsls	r3, r3, #31
     184:	d4f4      	bmi.n	170 <i2c_master_init+0x50>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     186:	6828      	ldr	r0, [r5, #0]
     188:	4b87      	ldr	r3, [pc, #540]	; (3a8 <i2c_master_init+0x288>)
     18a:	4699      	mov	r9, r3
     18c:	4798      	blx	r3
     18e:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     190:	498a      	ldr	r1, [pc, #552]	; (3bc <i2c_master_init+0x29c>)
     192:	4b8b      	ldr	r3, [pc, #556]	; (3c0 <i2c_master_init+0x2a0>)
     194:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     196:	00a4      	lsls	r4, r4, #2
     198:	4b8a      	ldr	r3, [pc, #552]	; (3c4 <i2c_master_init+0x2a4>)
     19a:	50e5      	str	r5, [r4, r3]
	module->registered_callback = 0;
     19c:	2300      	movs	r3, #0
     19e:	762b      	strb	r3, [r5, #24]
	module->enabled_callback = 0;
     1a0:	766b      	strb	r3, [r5, #25]
	module->buffer_length = 0;
     1a2:	2400      	movs	r4, #0
     1a4:	836b      	strh	r3, [r5, #26]
	module->buffer_remaining = 0;
     1a6:	83ab      	strh	r3, [r5, #28]
	module->status = STATUS_OK;
     1a8:	2225      	movs	r2, #37	; 0x25
     1aa:	54ac      	strb	r4, [r5, r2]
	module->buffer = NULL;
     1ac:	622b      	str	r3, [r5, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     1ae:	3314      	adds	r3, #20
     1b0:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     1b2:	682b      	ldr	r3, [r5, #0]
     1b4:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     1b6:	0018      	movs	r0, r3
     1b8:	47c8      	blx	r9
     1ba:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1bc:	2380      	movs	r3, #128	; 0x80
     1be:	aa08      	add	r2, sp, #32
     1c0:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1c2:	7054      	strb	r4, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     1c4:	2301      	movs	r3, #1
     1c6:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     1c8:	70d4      	strb	r4, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     1ca:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     1cc:	6a37      	ldr	r7, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
     1ce:	2800      	cmp	r0, #0
     1d0:	d100      	bne.n	1d4 <i2c_master_init+0xb4>
     1d2:	e0a7      	b.n	324 <i2c_master_init+0x204>
	pin_conf.mux_position = pad0 & 0xFFFF;
     1d4:	ab08      	add	r3, sp, #32
     1d6:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1d8:	2302      	movs	r3, #2
     1da:	aa08      	add	r2, sp, #32
     1dc:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     1de:	0c00      	lsrs	r0, r0, #16
     1e0:	b2c0      	uxtb	r0, r0
     1e2:	0011      	movs	r1, r2
     1e4:	4b78      	ldr	r3, [pc, #480]	; (3c8 <i2c_master_init+0x2a8>)
     1e6:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     1e8:	2f00      	cmp	r7, #0
     1ea:	d100      	bne.n	1ee <i2c_master_init+0xce>
     1ec:	e09f      	b.n	32e <i2c_master_init+0x20e>
	pin_conf.mux_position = pad1 & 0xFFFF;
     1ee:	ab08      	add	r3, sp, #32
     1f0:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1f2:	2302      	movs	r3, #2
     1f4:	aa08      	add	r2, sp, #32
     1f6:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     1f8:	0c3f      	lsrs	r7, r7, #16
     1fa:	b2f8      	uxtb	r0, r7
     1fc:	0011      	movs	r1, r2
     1fe:	4b72      	ldr	r3, [pc, #456]	; (3c8 <i2c_master_init+0x2a8>)
     200:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     202:	8ab3      	ldrh	r3, [r6, #20]
     204:	80eb      	strh	r3, [r5, #6]
	module->buffer_timeout = config->buffer_timeout;
     206:	8af3      	ldrh	r3, [r6, #22]
     208:	812b      	strh	r3, [r5, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     20a:	7e33      	ldrb	r3, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     20c:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     20e:	2b00      	cmp	r3, #0
     210:	d104      	bne.n	21c <i2c_master_init+0xfc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     212:	4b6e      	ldr	r3, [pc, #440]	; (3cc <i2c_master_init+0x2ac>)
     214:	789b      	ldrb	r3, [r3, #2]
     216:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     218:	0fdb      	lsrs	r3, r3, #31
     21a:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     21c:	68b1      	ldr	r1, [r6, #8]
     21e:	6933      	ldr	r3, [r6, #16]
     220:	430b      	orrs	r3, r1
     222:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     224:	2224      	movs	r2, #36	; 0x24
     226:	5cb2      	ldrb	r2, [r6, r2]
     228:	2a00      	cmp	r2, #0
     22a:	d002      	beq.n	232 <i2c_master_init+0x112>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     22c:	2280      	movs	r2, #128	; 0x80
     22e:	05d2      	lsls	r2, r2, #23
     230:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     232:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     234:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     236:	222c      	movs	r2, #44	; 0x2c
     238:	5cb2      	ldrb	r2, [r6, r2]
     23a:	2a00      	cmp	r2, #0
     23c:	d103      	bne.n	246 <i2c_master_init+0x126>
     23e:	2280      	movs	r2, #128	; 0x80
     240:	0492      	lsls	r2, r2, #18
     242:	4291      	cmp	r1, r2
     244:	d102      	bne.n	24c <i2c_master_init+0x12c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     246:	2280      	movs	r2, #128	; 0x80
     248:	0512      	lsls	r2, r2, #20
     24a:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     24c:	222d      	movs	r2, #45	; 0x2d
     24e:	5cb2      	ldrb	r2, [r6, r2]
     250:	2a00      	cmp	r2, #0
     252:	d002      	beq.n	25a <i2c_master_init+0x13a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     254:	2280      	movs	r2, #128	; 0x80
     256:	0412      	lsls	r2, r2, #16
     258:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     25a:	222e      	movs	r2, #46	; 0x2e
     25c:	5cb2      	ldrb	r2, [r6, r2]
     25e:	2a00      	cmp	r2, #0
     260:	d002      	beq.n	268 <i2c_master_init+0x148>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     262:	2280      	movs	r2, #128	; 0x80
     264:	03d2      	lsls	r2, r2, #15
     266:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     268:	4642      	mov	r2, r8
     26a:	6812      	ldr	r2, [r2, #0]
     26c:	4313      	orrs	r3, r2
     26e:	4642      	mov	r2, r8
     270:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     272:	2380      	movs	r3, #128	; 0x80
     274:	005b      	lsls	r3, r3, #1
     276:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     278:	4648      	mov	r0, r9
     27a:	3014      	adds	r0, #20
     27c:	b2c0      	uxtb	r0, r0
     27e:	4b54      	ldr	r3, [pc, #336]	; (3d0 <i2c_master_init+0x2b0>)
     280:	4798      	blx	r3
     282:	0005      	movs	r5, r0
     284:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     286:	27fa      	movs	r7, #250	; 0xfa
     288:	00bf      	lsls	r7, r7, #2
     28a:	6833      	ldr	r3, [r6, #0]
     28c:	435f      	muls	r7, r3
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     28e:	6873      	ldr	r3, [r6, #4]
     290:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     292:	4c50      	ldr	r4, [pc, #320]	; (3d4 <i2c_master_init+0x2b4>)
     294:	47a0      	blx	r4
     296:	9002      	str	r0, [sp, #8]
     298:	9103      	str	r1, [sp, #12]
     29a:	0078      	lsls	r0, r7, #1
     29c:	47a0      	blx	r4
     29e:	9000      	str	r0, [sp, #0]
     2a0:	9101      	str	r1, [sp, #4]
	uint32_t trise       = config->sda_scl_rise_time_ns;
     2a2:	8e30      	ldrh	r0, [r6, #48]	; 0x30
	tmp_baud = (int32_t)(div_ceil(
     2a4:	4368      	muls	r0, r5
     2a6:	47a0      	blx	r4
     2a8:	4b4b      	ldr	r3, [pc, #300]	; (3d8 <i2c_master_init+0x2b8>)
     2aa:	469b      	mov	fp, r3
     2ac:	4a4b      	ldr	r2, [pc, #300]	; (3dc <i2c_master_init+0x2bc>)
     2ae:	4b4c      	ldr	r3, [pc, #304]	; (3e0 <i2c_master_init+0x2c0>)
     2b0:	47d8      	blx	fp
     2b2:	4d4c      	ldr	r5, [pc, #304]	; (3e4 <i2c_master_init+0x2c4>)
     2b4:	2200      	movs	r2, #0
     2b6:	4b4c      	ldr	r3, [pc, #304]	; (3e8 <i2c_master_init+0x2c8>)
     2b8:	47a8      	blx	r5
     2ba:	9004      	str	r0, [sp, #16]
     2bc:	9105      	str	r1, [sp, #20]
     2be:	0038      	movs	r0, r7
     2c0:	47a0      	blx	r4
     2c2:	0002      	movs	r2, r0
     2c4:	000b      	movs	r3, r1
     2c6:	9804      	ldr	r0, [sp, #16]
     2c8:	9905      	ldr	r1, [sp, #20]
     2ca:	47d8      	blx	fp
     2cc:	0002      	movs	r2, r0
     2ce:	000b      	movs	r3, r1
     2d0:	4c46      	ldr	r4, [pc, #280]	; (3ec <i2c_master_init+0x2cc>)
     2d2:	9802      	ldr	r0, [sp, #8]
     2d4:	9903      	ldr	r1, [sp, #12]
     2d6:	47a0      	blx	r4
     2d8:	9a00      	ldr	r2, [sp, #0]
     2da:	9b01      	ldr	r3, [sp, #4]
     2dc:	47a8      	blx	r5
     2de:	2200      	movs	r2, #0
     2e0:	4b43      	ldr	r3, [pc, #268]	; (3f0 <i2c_master_init+0x2d0>)
     2e2:	47a0      	blx	r4
     2e4:	9a00      	ldr	r2, [sp, #0]
     2e6:	9b01      	ldr	r3, [sp, #4]
     2e8:	4c42      	ldr	r4, [pc, #264]	; (3f4 <i2c_master_init+0x2d4>)
     2ea:	47a0      	blx	r4
     2ec:	4b42      	ldr	r3, [pc, #264]	; (3f8 <i2c_master_init+0x2d8>)
     2ee:	4798      	blx	r3
     2f0:	0004      	movs	r4, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     2f2:	2380      	movs	r3, #128	; 0x80
     2f4:	049b      	lsls	r3, r3, #18
     2f6:	68b2      	ldr	r2, [r6, #8]
     2f8:	429a      	cmp	r2, r3
     2fa:	d01e      	beq.n	33a <i2c_master_init+0x21a>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     2fc:	0003      	movs	r3, r0
     2fe:	2040      	movs	r0, #64	; 0x40
     300:	2cff      	cmp	r4, #255	; 0xff
     302:	d900      	bls.n	306 <i2c_master_init+0x1e6>
     304:	e734      	b.n	170 <i2c_master_init+0x50>
	int32_t tmp_baudlow_hs = 0;
     306:	2600      	movs	r6, #0
	int32_t tmp_baud_hs = 0;
     308:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     30a:	24ff      	movs	r4, #255	; 0xff
     30c:	401c      	ands	r4, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     30e:	0636      	lsls	r6, r6, #24
     310:	4334      	orrs	r4, r6
     312:	0400      	lsls	r0, r0, #16
     314:	23ff      	movs	r3, #255	; 0xff
     316:	041b      	lsls	r3, r3, #16
     318:	4018      	ands	r0, r3
     31a:	4304      	orrs	r4, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     31c:	4643      	mov	r3, r8
     31e:	60dc      	str	r4, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     320:	2000      	movs	r0, #0
     322:	e725      	b.n	170 <i2c_master_init+0x50>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     324:	2100      	movs	r1, #0
     326:	4640      	mov	r0, r8
     328:	4b34      	ldr	r3, [pc, #208]	; (3fc <i2c_master_init+0x2dc>)
     32a:	4798      	blx	r3
     32c:	e752      	b.n	1d4 <i2c_master_init+0xb4>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     32e:	2101      	movs	r1, #1
     330:	4640      	mov	r0, r8
     332:	4b32      	ldr	r3, [pc, #200]	; (3fc <i2c_master_init+0x2dc>)
     334:	4798      	blx	r3
     336:	0007      	movs	r7, r0
     338:	e759      	b.n	1ee <i2c_master_init+0xce>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     33a:	27fa      	movs	r7, #250	; 0xfa
     33c:	00bf      	lsls	r7, r7, #2
     33e:	4653      	mov	r3, sl
     340:	435f      	muls	r7, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     342:	9802      	ldr	r0, [sp, #8]
     344:	9903      	ldr	r1, [sp, #12]
     346:	0002      	movs	r2, r0
     348:	000b      	movs	r3, r1
     34a:	47a8      	blx	r5
     34c:	9000      	str	r0, [sp, #0]
     34e:	9101      	str	r1, [sp, #4]
     350:	0038      	movs	r0, r7
     352:	4b20      	ldr	r3, [pc, #128]	; (3d4 <i2c_master_init+0x2b4>)
     354:	4798      	blx	r3
     356:	2200      	movs	r2, #0
     358:	4b29      	ldr	r3, [pc, #164]	; (400 <i2c_master_init+0x2e0>)
     35a:	47d8      	blx	fp
     35c:	0002      	movs	r2, r0
     35e:	000b      	movs	r3, r1
     360:	9800      	ldr	r0, [sp, #0]
     362:	9901      	ldr	r1, [sp, #4]
     364:	4e23      	ldr	r6, [pc, #140]	; (3f4 <i2c_master_init+0x2d4>)
     366:	47b0      	blx	r6
     368:	2200      	movs	r2, #0
     36a:	4b21      	ldr	r3, [pc, #132]	; (3f0 <i2c_master_init+0x2d0>)
     36c:	4e1f      	ldr	r6, [pc, #124]	; (3ec <i2c_master_init+0x2cc>)
     36e:	47b0      	blx	r6
     370:	4b21      	ldr	r3, [pc, #132]	; (3f8 <i2c_master_init+0x2d8>)
     372:	4798      	blx	r3
     374:	1e06      	subs	r6, r0, #0
		if (tmp_baudlow_hs) {
     376:	d00c      	beq.n	392 <i2c_master_init+0x272>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     378:	0039      	movs	r1, r7
     37a:	9807      	ldr	r0, [sp, #28]
     37c:	4b21      	ldr	r3, [pc, #132]	; (404 <i2c_master_init+0x2e4>)
     37e:	4798      	blx	r3
     380:	3802      	subs	r0, #2
     382:	1b80      	subs	r0, r0, r6
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     384:	0023      	movs	r3, r4
     386:	2cff      	cmp	r4, #255	; 0xff
     388:	d80c      	bhi.n	3a4 <i2c_master_init+0x284>
     38a:	28ff      	cmp	r0, #255	; 0xff
     38c:	d9bd      	bls.n	30a <i2c_master_init+0x1ea>
     38e:	2040      	movs	r0, #64	; 0x40
     390:	e6ee      	b.n	170 <i2c_master_init+0x50>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     392:	0079      	lsls	r1, r7, #1
     394:	1e48      	subs	r0, r1, #1
     396:	9b07      	ldr	r3, [sp, #28]
     398:	469c      	mov	ip, r3
     39a:	4460      	add	r0, ip
     39c:	4b19      	ldr	r3, [pc, #100]	; (404 <i2c_master_init+0x2e4>)
     39e:	4798      	blx	r3
     3a0:	3801      	subs	r0, #1
     3a2:	e7ef      	b.n	384 <i2c_master_init+0x264>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3a4:	2040      	movs	r0, #64	; 0x40
     3a6:	e6e3      	b.n	170 <i2c_master_init+0x50>
     3a8:	00003d8d 	.word	0x00003d8d
     3ac:	40000400 	.word	0x40000400
     3b0:	000048fd 	.word	0x000048fd
     3b4:	00004871 	.word	0x00004871
     3b8:	00003bc9 	.word	0x00003bc9
     3bc:	00000899 	.word	0x00000899
     3c0:	00003dc9 	.word	0x00003dc9
     3c4:	20000d40 	.word	0x20000d40
     3c8:	00004a25 	.word	0x00004a25
     3cc:	41002000 	.word	0x41002000
     3d0:	00004919 	.word	0x00004919
     3d4:	00006705 	.word	0x00006705
     3d8:	00005b71 	.word	0x00005b71
     3dc:	e826d695 	.word	0xe826d695
     3e0:	3e112e0b 	.word	0x3e112e0b
     3e4:	00004ee9 	.word	0x00004ee9
     3e8:	40240000 	.word	0x40240000
     3ec:	00006071 	.word	0x00006071
     3f0:	3ff00000 	.word	0x3ff00000
     3f4:	00005509 	.word	0x00005509
     3f8:	0000669d 	.word	0x0000669d
     3fc:	00003c15 	.word	0x00003c15
     400:	40080000 	.word	0x40080000
     404:	00004d7d 	.word	0x00004d7d

00000408 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
     408:	b5f0      	push	{r4, r5, r6, r7, lr}
     40a:	46c6      	mov	lr, r8
     40c:	b500      	push	{lr}
     40e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     410:	6807      	ldr	r7, [r0, #0]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
     412:	4d11      	ldr	r5, [pc, #68]	; (458 <i2c_master_reset+0x50>)
     414:	47a8      	blx	r5
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     416:	6826      	ldr	r6, [r4, #0]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
     418:	0020      	movs	r0, r4
     41a:	47a8      	blx	r5

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     41c:	6833      	ldr	r3, [r6, #0]
     41e:	2202      	movs	r2, #2
     420:	4393      	bics	r3, r2
     422:	6033      	str	r3, [r6, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Disable module interrupts */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     424:	6820      	ldr	r0, [r4, #0]
     426:	4b0d      	ldr	r3, [pc, #52]	; (45c <i2c_master_reset+0x54>)
     428:	4698      	mov	r8, r3
     42a:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     42c:	231f      	movs	r3, #31
     42e:	4018      	ands	r0, r3
     430:	2601      	movs	r6, #1
     432:	0031      	movs	r1, r6
     434:	4081      	lsls	r1, r0
     436:	3361      	adds	r3, #97	; 0x61
     438:	4a09      	ldr	r2, [pc, #36]	; (460 <i2c_master_reset+0x58>)
     43a:	50d1      	str	r1, [r2, r3]
	cpu_irq_enter_critical();
     43c:	4b09      	ldr	r3, [pc, #36]	; (464 <i2c_master_reset+0x5c>)
     43e:	4798      	blx	r3
	i2c_master_disable(module);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
     440:	6820      	ldr	r0, [r4, #0]
     442:	47c0      	blx	r8
     444:	4b08      	ldr	r3, [pc, #32]	; (468 <i2c_master_reset+0x60>)
     446:	4798      	blx	r3
	cpu_irq_leave_critical();
     448:	4b08      	ldr	r3, [pc, #32]	; (46c <i2c_master_reset+0x64>)
     44a:	4798      	blx	r3
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
     44c:	0020      	movs	r0, r4
     44e:	47a8      	blx	r5

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
     450:	603e      	str	r6, [r7, #0]
}
     452:	bc04      	pop	{r2}
     454:	4690      	mov	r8, r2
     456:	bdf0      	pop	{r4, r5, r6, r7, pc}
     458:	00000115 	.word	0x00000115
     45c:	00003e05 	.word	0x00003e05
     460:	e000e100 	.word	0xe000e100
     464:	0000382d 	.word	0x0000382d
     468:	0000494d 	.word	0x0000494d
     46c:	0000386d 	.word	0x0000386d

00000470 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     470:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     472:	7e1a      	ldrb	r2, [r3, #24]
     474:	0792      	lsls	r2, r2, #30
     476:	d507      	bpl.n	488 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     478:	2202      	movs	r2, #2
     47a:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     47c:	8b5b      	ldrh	r3, [r3, #26]
     47e:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     480:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     482:	17db      	asrs	r3, r3, #31
     484:	4018      	ands	r0, r3
}
     486:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     488:	8b5a      	ldrh	r2, [r3, #26]
     48a:	0752      	lsls	r2, r2, #29
     48c:	d506      	bpl.n	49c <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     48e:	6859      	ldr	r1, [r3, #4]
     490:	22c0      	movs	r2, #192	; 0xc0
     492:	0292      	lsls	r2, r2, #10
     494:	430a      	orrs	r2, r1
     496:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     498:	2018      	movs	r0, #24
     49a:	e7f4      	b.n	486 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     49c:	2000      	movs	r0, #0
     49e:	e7f2      	b.n	486 <_i2c_master_address_response+0x16>

000004a0 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     4a0:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4a2:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     4a4:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4a6:	2401      	movs	r4, #1
     4a8:	2502      	movs	r5, #2
     4aa:	7e11      	ldrb	r1, [r2, #24]
     4ac:	4221      	tst	r1, r4
     4ae:	d10b      	bne.n	4c8 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     4b0:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4b2:	4229      	tst	r1, r5
     4b4:	d106      	bne.n	4c4 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     4b6:	3301      	adds	r3, #1
     4b8:	b29b      	uxth	r3, r3
     4ba:	8901      	ldrh	r1, [r0, #8]
     4bc:	4299      	cmp	r1, r3
     4be:	d8f4      	bhi.n	4aa <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     4c0:	2012      	movs	r0, #18
     4c2:	e002      	b.n	4ca <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     4c4:	2000      	movs	r0, #0
     4c6:	e000      	b.n	4ca <_i2c_master_wait_for_bus+0x2a>
     4c8:	2000      	movs	r0, #0
}
     4ca:	bd30      	pop	{r4, r5, pc}

000004cc <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     4cc:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4ce:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     4d0:	6862      	ldr	r2, [r4, #4]
     4d2:	2380      	movs	r3, #128	; 0x80
     4d4:	02db      	lsls	r3, r3, #11
     4d6:	4313      	orrs	r3, r2
     4d8:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     4da:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     4dc:	4b02      	ldr	r3, [pc, #8]	; (4e8 <_i2c_master_send_hs_master_code+0x1c>)
     4de:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     4e0:	2301      	movs	r3, #1
     4e2:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     4e4:	bd10      	pop	{r4, pc}
     4e6:	46c0      	nop			; (mov r8, r8)
     4e8:	000004a1 	.word	0x000004a1

000004ec <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ee:	46de      	mov	lr, fp
     4f0:	4657      	mov	r7, sl
     4f2:	464e      	mov	r6, r9
     4f4:	4645      	mov	r5, r8
     4f6:	b5e0      	push	{r5, r6, r7, lr}
     4f8:	b083      	sub	sp, #12
     4fa:	0006      	movs	r6, r0
     4fc:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4fe:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     500:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     502:	682b      	ldr	r3, [r5, #0]
     504:	011b      	lsls	r3, r3, #4
     506:	0fdb      	lsrs	r3, r3, #31
     508:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     50a:	7a4b      	ldrb	r3, [r1, #9]
     50c:	2b00      	cmp	r3, #0
     50e:	d12b      	bne.n	568 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     510:	686b      	ldr	r3, [r5, #4]
     512:	4a58      	ldr	r2, [pc, #352]	; (674 <_i2c_master_read_packet+0x188>)
     514:	4013      	ands	r3, r2
     516:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     518:	464b      	mov	r3, r9
     51a:	7a1b      	ldrb	r3, [r3, #8]
     51c:	2b00      	cmp	r3, #0
     51e:	d127      	bne.n	570 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     520:	464b      	mov	r3, r9
     522:	881b      	ldrh	r3, [r3, #0]
     524:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     526:	464a      	mov	r2, r9
     528:	7a52      	ldrb	r2, [r2, #9]
     52a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     52c:	4313      	orrs	r3, r2
     52e:	2201      	movs	r2, #1
     530:	4313      	orrs	r3, r2
     532:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     534:	0030      	movs	r0, r6
     536:	4b50      	ldr	r3, [pc, #320]	; (678 <_i2c_master_read_packet+0x18c>)
     538:	4798      	blx	r3
     53a:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     53c:	4653      	mov	r3, sl
     53e:	2b00      	cmp	r3, #0
     540:	d003      	beq.n	54a <_i2c_master_read_packet+0x5e>
     542:	464b      	mov	r3, r9
     544:	885b      	ldrh	r3, [r3, #2]
     546:	2b01      	cmp	r3, #1
     548:	d03b      	beq.n	5c2 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     54a:	686b      	ldr	r3, [r5, #4]
     54c:	4a49      	ldr	r2, [pc, #292]	; (674 <_i2c_master_read_packet+0x188>)
     54e:	4013      	ands	r3, r2
     550:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     552:	9b01      	ldr	r3, [sp, #4]
     554:	2b00      	cmp	r3, #0
     556:	d03a      	beq.n	5ce <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     558:	9801      	ldr	r0, [sp, #4]
     55a:	b003      	add	sp, #12
     55c:	bc3c      	pop	{r2, r3, r4, r5}
     55e:	4690      	mov	r8, r2
     560:	4699      	mov	r9, r3
     562:	46a2      	mov	sl, r4
     564:	46ab      	mov	fp, r5
     566:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     568:	7a89      	ldrb	r1, [r1, #10]
     56a:	4b44      	ldr	r3, [pc, #272]	; (67c <_i2c_master_read_packet+0x190>)
     56c:	4798      	blx	r3
     56e:	e7cf      	b.n	510 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     570:	464b      	mov	r3, r9
     572:	881b      	ldrh	r3, [r3, #0]
     574:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     576:	464a      	mov	r2, r9
     578:	7a52      	ldrb	r2, [r2, #9]
     57a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     57c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     57e:	2280      	movs	r2, #128	; 0x80
     580:	0212      	lsls	r2, r2, #8
     582:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     584:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     586:	0030      	movs	r0, r6
     588:	4b3b      	ldr	r3, [pc, #236]	; (678 <_i2c_master_read_packet+0x18c>)
     58a:	4798      	blx	r3
     58c:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     58e:	686b      	ldr	r3, [r5, #4]
     590:	4a38      	ldr	r2, [pc, #224]	; (674 <_i2c_master_read_packet+0x188>)
     592:	4013      	ands	r3, r2
     594:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     596:	2800      	cmp	r0, #0
     598:	d1de      	bne.n	558 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     59a:	0030      	movs	r0, r6
     59c:	4b38      	ldr	r3, [pc, #224]	; (680 <_i2c_master_read_packet+0x194>)
     59e:	4798      	blx	r3
     5a0:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     5a2:	2800      	cmp	r0, #0
     5a4:	d1d8      	bne.n	558 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     5a6:	464b      	mov	r3, r9
     5a8:	881b      	ldrh	r3, [r3, #0]
     5aa:	0a1b      	lsrs	r3, r3, #8
     5ac:	2278      	movs	r2, #120	; 0x78
     5ae:	4313      	orrs	r3, r2
     5b0:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     5b2:	464a      	mov	r2, r9
     5b4:	7a52      	ldrb	r2, [r2, #9]
     5b6:	0392      	lsls	r2, r2, #14
     5b8:	2101      	movs	r1, #1
     5ba:	430a      	orrs	r2, r1
     5bc:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     5be:	626b      	str	r3, [r5, #36]	; 0x24
     5c0:	e7b8      	b.n	534 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     5c2:	686a      	ldr	r2, [r5, #4]
     5c4:	2380      	movs	r3, #128	; 0x80
     5c6:	02db      	lsls	r3, r3, #11
     5c8:	4313      	orrs	r3, r2
     5ca:	606b      	str	r3, [r5, #4]
     5cc:	e7c1      	b.n	552 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     5ce:	0030      	movs	r0, r6
     5d0:	4b2b      	ldr	r3, [pc, #172]	; (680 <_i2c_master_read_packet+0x194>)
     5d2:	4798      	blx	r3
     5d4:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     5d6:	2800      	cmp	r0, #0
     5d8:	d1be      	bne.n	558 <_i2c_master_read_packet+0x6c>
     5da:	3c01      	subs	r4, #1
     5dc:	b2a4      	uxth	r4, r4
     5de:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     5e0:	4b28      	ldr	r3, [pc, #160]	; (684 <_i2c_master_read_packet+0x198>)
     5e2:	469b      	mov	fp, r3
     5e4:	e015      	b.n	612 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     5e6:	2c01      	cmp	r4, #1
     5e8:	d020      	beq.n	62c <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     5ea:	0030      	movs	r0, r6
     5ec:	4b26      	ldr	r3, [pc, #152]	; (688 <_i2c_master_read_packet+0x19c>)
     5ee:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     5f0:	4643      	mov	r3, r8
     5f2:	1c5f      	adds	r7, r3, #1
     5f4:	b2bf      	uxth	r7, r7
     5f6:	2328      	movs	r3, #40	; 0x28
     5f8:	5ceb      	ldrb	r3, [r5, r3]
     5fa:	464a      	mov	r2, r9
     5fc:	6852      	ldr	r2, [r2, #4]
     5fe:	4641      	mov	r1, r8
     600:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     602:	0030      	movs	r0, r6
     604:	4b1c      	ldr	r3, [pc, #112]	; (678 <_i2c_master_read_packet+0x18c>)
     606:	4798      	blx	r3
     608:	3c01      	subs	r4, #1
     60a:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     60c:	2800      	cmp	r0, #0
     60e:	d115      	bne.n	63c <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     610:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     612:	455c      	cmp	r4, fp
     614:	d014      	beq.n	640 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     616:	8b6b      	ldrh	r3, [r5, #26]
     618:	069b      	lsls	r3, r3, #26
     61a:	d527      	bpl.n	66c <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     61c:	7af3      	ldrb	r3, [r6, #11]
     61e:	2b00      	cmp	r3, #0
     620:	d0e3      	beq.n	5ea <_i2c_master_read_packet+0xfe>
     622:	4653      	mov	r3, sl
     624:	2b00      	cmp	r3, #0
     626:	d1de      	bne.n	5e6 <_i2c_master_read_packet+0xfa>
     628:	2c00      	cmp	r4, #0
     62a:	d1de      	bne.n	5ea <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     62c:	686a      	ldr	r2, [r5, #4]
     62e:	2380      	movs	r3, #128	; 0x80
     630:	02db      	lsls	r3, r3, #11
     632:	4313      	orrs	r3, r2
     634:	606b      	str	r3, [r5, #4]
     636:	3c01      	subs	r4, #1
     638:	b2a4      	uxth	r4, r4
     63a:	e7ea      	b.n	612 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     63c:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     63e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     640:	7ab3      	ldrb	r3, [r6, #10]
     642:	2b00      	cmp	r3, #0
     644:	d109      	bne.n	65a <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     646:	0030      	movs	r0, r6
     648:	4b0f      	ldr	r3, [pc, #60]	; (688 <_i2c_master_read_packet+0x19c>)
     64a:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     64c:	2328      	movs	r3, #40	; 0x28
     64e:	5cea      	ldrb	r2, [r5, r3]
     650:	464b      	mov	r3, r9
     652:	685b      	ldr	r3, [r3, #4]
     654:	4641      	mov	r1, r8
     656:	545a      	strb	r2, [r3, r1]
     658:	e77e      	b.n	558 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     65a:	0030      	movs	r0, r6
     65c:	4b0a      	ldr	r3, [pc, #40]	; (688 <_i2c_master_read_packet+0x19c>)
     65e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     660:	686a      	ldr	r2, [r5, #4]
     662:	23c0      	movs	r3, #192	; 0xc0
     664:	029b      	lsls	r3, r3, #10
     666:	4313      	orrs	r3, r2
     668:	606b      	str	r3, [r5, #4]
     66a:	e7ec      	b.n	646 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     66c:	2341      	movs	r3, #65	; 0x41
     66e:	9301      	str	r3, [sp, #4]
     670:	e772      	b.n	558 <_i2c_master_read_packet+0x6c>
     672:	46c0      	nop			; (mov r8, r8)
     674:	fffbffff 	.word	0xfffbffff
     678:	000004a1 	.word	0x000004a1
     67c:	000004cd 	.word	0x000004cd
     680:	00000471 	.word	0x00000471
     684:	0000ffff 	.word	0x0000ffff
     688:	00000115 	.word	0x00000115

0000068c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     68c:	b5f0      	push	{r4, r5, r6, r7, lr}
     68e:	46de      	mov	lr, fp
     690:	4657      	mov	r7, sl
     692:	464e      	mov	r6, r9
     694:	4645      	mov	r5, r8
     696:	b5e0      	push	{r5, r6, r7, lr}
     698:	b083      	sub	sp, #12
     69a:	0006      	movs	r6, r0
     69c:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     69e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     6a0:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     6a2:	4b32      	ldr	r3, [pc, #200]	; (76c <_i2c_master_write_packet+0xe0>)
     6a4:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     6a6:	7a7b      	ldrb	r3, [r7, #9]
     6a8:	2b00      	cmp	r3, #0
     6aa:	d11d      	bne.n	6e8 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     6ac:	686b      	ldr	r3, [r5, #4]
     6ae:	4a30      	ldr	r2, [pc, #192]	; (770 <_i2c_master_write_packet+0xe4>)
     6b0:	4013      	ands	r3, r2
     6b2:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     6b4:	7a3b      	ldrb	r3, [r7, #8]
     6b6:	2b00      	cmp	r3, #0
     6b8:	d01b      	beq.n	6f2 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6ba:	883b      	ldrh	r3, [r7, #0]
     6bc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     6be:	7a7a      	ldrb	r2, [r7, #9]
     6c0:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6c2:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     6c4:	2280      	movs	r2, #128	; 0x80
     6c6:	0212      	lsls	r2, r2, #8
     6c8:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6ca:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     6cc:	0030      	movs	r0, r6
     6ce:	4b29      	ldr	r3, [pc, #164]	; (774 <_i2c_master_write_packet+0xe8>)
     6d0:	4798      	blx	r3
     6d2:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     6d4:	2800      	cmp	r0, #0
     6d6:	d013      	beq.n	700 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     6d8:	9801      	ldr	r0, [sp, #4]
     6da:	b003      	add	sp, #12
     6dc:	bc3c      	pop	{r2, r3, r4, r5}
     6de:	4690      	mov	r8, r2
     6e0:	4699      	mov	r9, r3
     6e2:	46a2      	mov	sl, r4
     6e4:	46ab      	mov	fp, r5
     6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     6e8:	7ab9      	ldrb	r1, [r7, #10]
     6ea:	0030      	movs	r0, r6
     6ec:	4b22      	ldr	r3, [pc, #136]	; (778 <_i2c_master_write_packet+0xec>)
     6ee:	4798      	blx	r3
     6f0:	e7dc      	b.n	6ac <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6f2:	883b      	ldrh	r3, [r7, #0]
     6f4:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     6f6:	7a7a      	ldrb	r2, [r7, #9]
     6f8:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6fa:	4313      	orrs	r3, r2
     6fc:	626b      	str	r3, [r5, #36]	; 0x24
     6fe:	e7e5      	b.n	6cc <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     700:	0030      	movs	r0, r6
     702:	4b1e      	ldr	r3, [pc, #120]	; (77c <_i2c_master_write_packet+0xf0>)
     704:	4798      	blx	r3
     706:	1e03      	subs	r3, r0, #0
     708:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     70a:	d1e5      	bne.n	6d8 <_i2c_master_write_packet+0x4c>
     70c:	46a0      	mov	r8, r4
     70e:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     710:	3320      	adds	r3, #32
     712:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     714:	4b15      	ldr	r3, [pc, #84]	; (76c <_i2c_master_write_packet+0xe0>)
     716:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     718:	4b16      	ldr	r3, [pc, #88]	; (774 <_i2c_master_write_packet+0xe8>)
     71a:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     71c:	4544      	cmp	r4, r8
     71e:	d015      	beq.n	74c <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     720:	8b6b      	ldrh	r3, [r5, #26]
     722:	464a      	mov	r2, r9
     724:	4213      	tst	r3, r2
     726:	d01d      	beq.n	764 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     728:	0030      	movs	r0, r6
     72a:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     72c:	687b      	ldr	r3, [r7, #4]
     72e:	5d1a      	ldrb	r2, [r3, r4]
     730:	2328      	movs	r3, #40	; 0x28
     732:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     734:	0030      	movs	r0, r6
     736:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     738:	2800      	cmp	r0, #0
     73a:	d106      	bne.n	74a <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     73c:	8b6b      	ldrh	r3, [r5, #26]
     73e:	3401      	adds	r4, #1
     740:	075b      	lsls	r3, r3, #29
     742:	d5eb      	bpl.n	71c <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     744:	231e      	movs	r3, #30
     746:	9301      	str	r3, [sp, #4]
     748:	e000      	b.n	74c <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     74a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     74c:	7ab3      	ldrb	r3, [r6, #10]
     74e:	2b00      	cmp	r3, #0
     750:	d0c2      	beq.n	6d8 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     752:	0030      	movs	r0, r6
     754:	4b05      	ldr	r3, [pc, #20]	; (76c <_i2c_master_write_packet+0xe0>)
     756:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     758:	686a      	ldr	r2, [r5, #4]
     75a:	23c0      	movs	r3, #192	; 0xc0
     75c:	029b      	lsls	r3, r3, #10
     75e:	4313      	orrs	r3, r2
     760:	606b      	str	r3, [r5, #4]
     762:	e7b9      	b.n	6d8 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     764:	2341      	movs	r3, #65	; 0x41
     766:	9301      	str	r3, [sp, #4]
     768:	e7b6      	b.n	6d8 <_i2c_master_write_packet+0x4c>
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	00000115 	.word	0x00000115
     770:	fffbffff 	.word	0xfffbffff
     774:	000004a1 	.word	0x000004a1
     778:	000004cd 	.word	0x000004cd
     77c:	00000471 	.word	0x00000471

00000780 <i2c_master_read_packet_wait>:
{
     780:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     782:	8b83      	ldrh	r3, [r0, #28]
     784:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     786:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     788:	2b00      	cmp	r3, #0
     78a:	d001      	beq.n	790 <i2c_master_read_packet_wait+0x10>
}
     78c:	0010      	movs	r0, r2
     78e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     790:	3301      	adds	r3, #1
     792:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     794:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     796:	4b02      	ldr	r3, [pc, #8]	; (7a0 <i2c_master_read_packet_wait+0x20>)
     798:	4798      	blx	r3
     79a:	0002      	movs	r2, r0
     79c:	e7f6      	b.n	78c <i2c_master_read_packet_wait+0xc>
     79e:	46c0      	nop			; (mov r8, r8)
     7a0:	000004ed 	.word	0x000004ed

000007a4 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     7a4:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     7a6:	8b83      	ldrh	r3, [r0, #28]
     7a8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     7aa:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     7ac:	2b00      	cmp	r3, #0
     7ae:	d001      	beq.n	7b4 <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
     7b0:	0010      	movs	r0, r2
     7b2:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     7b4:	3301      	adds	r3, #1
     7b6:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7b8:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     7ba:	4b02      	ldr	r3, [pc, #8]	; (7c4 <i2c_master_write_packet_wait+0x20>)
     7bc:	4798      	blx	r3
     7be:	0002      	movs	r2, r0
     7c0:	e7f6      	b.n	7b0 <i2c_master_write_packet_wait+0xc>
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	0000068d 	.word	0x0000068d

000007c8 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     7c8:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     7ca:	2207      	movs	r2, #7
     7cc:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     7ce:	421a      	tst	r2, r3
     7d0:	d1fc      	bne.n	7cc <_i2c_master_wait_for_sync+0x4>
}
     7d2:	4770      	bx	lr

000007d4 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     7d4:	b570      	push	{r4, r5, r6, lr}
     7d6:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7d8:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     7da:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     7dc:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     7de:	8b83      	ldrh	r3, [r0, #28]
     7e0:	1aed      	subs	r5, r5, r3
     7e2:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     7e4:	8b83      	ldrh	r3, [r0, #28]
     7e6:	3b01      	subs	r3, #1
     7e8:	b29b      	uxth	r3, r3
     7ea:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     7ec:	0113      	lsls	r3, r2, #4
     7ee:	d51d      	bpl.n	82c <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     7f0:	7ac3      	ldrb	r3, [r0, #11]
     7f2:	2b00      	cmp	r3, #0
     7f4:	d003      	beq.n	7fe <_i2c_master_read+0x2a>
     7f6:	8b83      	ldrh	r3, [r0, #28]
     7f8:	b29b      	uxth	r3, r3
     7fa:	2b01      	cmp	r3, #1
     7fc:	d010      	beq.n	820 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     7fe:	8ba3      	ldrh	r3, [r4, #28]
     800:	b29b      	uxth	r3, r3
     802:	2b00      	cmp	r3, #0
     804:	d102      	bne.n	80c <_i2c_master_read+0x38>
		if (module->send_stop) {
     806:	7aa3      	ldrb	r3, [r4, #10]
     808:	2b00      	cmp	r3, #0
     80a:	d11c      	bne.n	846 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     80c:	0020      	movs	r0, r4
     80e:	4b12      	ldr	r3, [pc, #72]	; (858 <_i2c_master_read+0x84>)
     810:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     812:	6a23      	ldr	r3, [r4, #32]
     814:	195d      	adds	r5, r3, r5
     816:	2328      	movs	r3, #40	; 0x28
     818:	5cf3      	ldrb	r3, [r6, r3]
     81a:	b2db      	uxtb	r3, r3
     81c:	702b      	strb	r3, [r5, #0]
}
     81e:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     820:	6872      	ldr	r2, [r6, #4]
     822:	2380      	movs	r3, #128	; 0x80
     824:	02db      	lsls	r3, r3, #11
     826:	4313      	orrs	r3, r2
     828:	6073      	str	r3, [r6, #4]
     82a:	e7e8      	b.n	7fe <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     82c:	7ac3      	ldrb	r3, [r0, #11]
     82e:	2b00      	cmp	r3, #0
     830:	d0e5      	beq.n	7fe <_i2c_master_read+0x2a>
     832:	8b83      	ldrh	r3, [r0, #28]
     834:	b29b      	uxth	r3, r3
     836:	2b00      	cmp	r3, #0
     838:	d1e1      	bne.n	7fe <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     83a:	6872      	ldr	r2, [r6, #4]
     83c:	2380      	movs	r3, #128	; 0x80
     83e:	02db      	lsls	r3, r3, #11
     840:	4313      	orrs	r3, r2
     842:	6073      	str	r3, [r6, #4]
     844:	e7db      	b.n	7fe <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     846:	0020      	movs	r0, r4
     848:	4b03      	ldr	r3, [pc, #12]	; (858 <_i2c_master_read+0x84>)
     84a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     84c:	6872      	ldr	r2, [r6, #4]
     84e:	23c0      	movs	r3, #192	; 0xc0
     850:	029b      	lsls	r3, r3, #10
     852:	4313      	orrs	r3, r2
     854:	6073      	str	r3, [r6, #4]
     856:	e7d9      	b.n	80c <_i2c_master_read+0x38>
     858:	000007c9 	.word	0x000007c9

0000085c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     85c:	b570      	push	{r4, r5, r6, lr}
     85e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     860:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     862:	8b6b      	ldrh	r3, [r5, #26]
     864:	075b      	lsls	r3, r3, #29
     866:	d503      	bpl.n	870 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     868:	221e      	movs	r2, #30
     86a:	2325      	movs	r3, #37	; 0x25
     86c:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     86e:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     870:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     872:	8b83      	ldrh	r3, [r0, #28]
     874:	1af6      	subs	r6, r6, r3
     876:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     878:	8b83      	ldrh	r3, [r0, #28]
     87a:	3b01      	subs	r3, #1
     87c:	b29b      	uxth	r3, r3
     87e:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     880:	4b04      	ldr	r3, [pc, #16]	; (894 <_i2c_master_write+0x38>)
     882:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     884:	6a23      	ldr	r3, [r4, #32]
     886:	199e      	adds	r6, r3, r6
     888:	7833      	ldrb	r3, [r6, #0]
     88a:	b2db      	uxtb	r3, r3
     88c:	2228      	movs	r2, #40	; 0x28
     88e:	54ab      	strb	r3, [r5, r2]
     890:	e7ed      	b.n	86e <_i2c_master_write+0x12>
     892:	46c0      	nop			; (mov r8, r8)
     894:	000007c9 	.word	0x000007c9

00000898 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     898:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     89a:	0080      	lsls	r0, r0, #2
     89c:	4b75      	ldr	r3, [pc, #468]	; (a74 <_i2c_master_interrupt_handler+0x1dc>)
     89e:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8a0:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     8a2:	682b      	ldr	r3, [r5, #0]
     8a4:	011b      	lsls	r3, r3, #4
     8a6:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     8a8:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     8aa:	7e26      	ldrb	r6, [r4, #24]
     8ac:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     8ae:	8b63      	ldrh	r3, [r4, #26]
     8b0:	b29b      	uxth	r3, r3
     8b2:	2b00      	cmp	r3, #0
     8b4:	d103      	bne.n	8be <_i2c_master_interrupt_handler+0x26>
     8b6:	8ba3      	ldrh	r3, [r4, #28]
     8b8:	b29b      	uxth	r3, r3
     8ba:	2b00      	cmp	r3, #0
     8bc:	d123      	bne.n	906 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     8be:	8b63      	ldrh	r3, [r4, #26]
     8c0:	b29b      	uxth	r3, r3
     8c2:	2b00      	cmp	r3, #0
     8c4:	d008      	beq.n	8d8 <_i2c_master_interrupt_handler+0x40>
     8c6:	8ba3      	ldrh	r3, [r4, #28]
     8c8:	b29b      	uxth	r3, r3
     8ca:	2b00      	cmp	r3, #0
     8cc:	d104      	bne.n	8d8 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     8ce:	3325      	adds	r3, #37	; 0x25
     8d0:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     8d2:	2b05      	cmp	r3, #5
     8d4:	d100      	bne.n	8d8 <_i2c_master_interrupt_handler+0x40>
     8d6:	e06d      	b.n	9b4 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     8d8:	8b63      	ldrh	r3, [r4, #26]
     8da:	b29b      	uxth	r3, r3
     8dc:	2b00      	cmp	r3, #0
     8de:	d024      	beq.n	92a <_i2c_master_interrupt_handler+0x92>
     8e0:	8ba3      	ldrh	r3, [r4, #28]
     8e2:	b29b      	uxth	r3, r3
     8e4:	2b00      	cmp	r3, #0
     8e6:	d020      	beq.n	92a <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     8e8:	8b6b      	ldrh	r3, [r5, #26]
     8ea:	069b      	lsls	r3, r3, #26
     8ec:	d500      	bpl.n	8f0 <_i2c_master_interrupt_handler+0x58>
     8ee:	e081      	b.n	9f4 <_i2c_master_interrupt_handler+0x15c>
     8f0:	2a00      	cmp	r2, #0
     8f2:	d004      	beq.n	8fe <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     8f4:	8ba3      	ldrh	r3, [r4, #28]
     8f6:	b29b      	uxth	r3, r3
     8f8:	2b01      	cmp	r3, #1
     8fa:	d100      	bne.n	8fe <_i2c_master_interrupt_handler+0x66>
     8fc:	e07a      	b.n	9f4 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     8fe:	2241      	movs	r2, #65	; 0x41
     900:	2325      	movs	r3, #37	; 0x25
     902:	54e2      	strb	r2, [r4, r3]
     904:	e011      	b.n	92a <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     906:	7e2b      	ldrb	r3, [r5, #24]
     908:	07db      	lsls	r3, r3, #31
     90a:	d507      	bpl.n	91c <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     90c:	2301      	movs	r3, #1
     90e:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     910:	8b6b      	ldrh	r3, [r5, #26]
     912:	079b      	lsls	r3, r3, #30
     914:	d52e      	bpl.n	974 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     916:	2241      	movs	r2, #65	; 0x41
     918:	2325      	movs	r3, #37	; 0x25
     91a:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     91c:	8ba3      	ldrh	r3, [r4, #28]
     91e:	b29b      	uxth	r3, r3
     920:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     922:	2325      	movs	r3, #37	; 0x25
     924:	5ce3      	ldrb	r3, [r4, r3]
     926:	2b05      	cmp	r3, #5
     928:	d038      	beq.n	99c <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     92a:	8b63      	ldrh	r3, [r4, #26]
     92c:	b29b      	uxth	r3, r3
     92e:	2b00      	cmp	r3, #0
     930:	d007      	beq.n	942 <_i2c_master_interrupt_handler+0xaa>
     932:	8ba3      	ldrh	r3, [r4, #28]
     934:	b29b      	uxth	r3, r3
     936:	2b00      	cmp	r3, #0
     938:	d103      	bne.n	942 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     93a:	3325      	adds	r3, #37	; 0x25
     93c:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     93e:	2b05      	cmp	r3, #5
     940:	d064      	beq.n	a0c <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     942:	2325      	movs	r3, #37	; 0x25
     944:	5ce3      	ldrb	r3, [r4, r3]
     946:	2b05      	cmp	r3, #5
     948:	d013      	beq.n	972 <_i2c_master_interrupt_handler+0xda>
     94a:	2325      	movs	r3, #37	; 0x25
     94c:	5ce3      	ldrb	r3, [r4, r3]
     94e:	2b00      	cmp	r3, #0
     950:	d00f      	beq.n	972 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     952:	2303      	movs	r3, #3
     954:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     956:	2300      	movs	r3, #0
     958:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     95a:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     95c:	3325      	adds	r3, #37	; 0x25
     95e:	5ce3      	ldrb	r3, [r4, r3]
     960:	2b41      	cmp	r3, #65	; 0x41
     962:	d003      	beq.n	96c <_i2c_master_interrupt_handler+0xd4>
     964:	7aa3      	ldrb	r3, [r4, #10]
     966:	2b00      	cmp	r3, #0
     968:	d000      	beq.n	96c <_i2c_master_interrupt_handler+0xd4>
     96a:	e075      	b.n	a58 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     96c:	0773      	lsls	r3, r6, #29
     96e:	d500      	bpl.n	972 <_i2c_master_interrupt_handler+0xda>
     970:	e07b      	b.n	a6a <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     972:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     974:	8b6b      	ldrh	r3, [r5, #26]
     976:	075b      	lsls	r3, r3, #29
     978:	d5d0      	bpl.n	91c <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     97a:	2218      	movs	r2, #24
     97c:	2325      	movs	r3, #37	; 0x25
     97e:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     980:	2300      	movs	r3, #0
     982:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     984:	7aa3      	ldrb	r3, [r4, #10]
     986:	2b00      	cmp	r3, #0
     988:	d0c8      	beq.n	91c <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     98a:	0020      	movs	r0, r4
     98c:	4b3a      	ldr	r3, [pc, #232]	; (a78 <_i2c_master_interrupt_handler+0x1e0>)
     98e:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     990:	686a      	ldr	r2, [r5, #4]
     992:	23c0      	movs	r3, #192	; 0xc0
     994:	029b      	lsls	r3, r3, #10
     996:	4313      	orrs	r3, r2
     998:	606b      	str	r3, [r5, #4]
     99a:	e7bf      	b.n	91c <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     99c:	331f      	adds	r3, #31
     99e:	5ce3      	ldrb	r3, [r4, r3]
     9a0:	2b00      	cmp	r3, #0
     9a2:	d003      	beq.n	9ac <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     9a4:	0020      	movs	r0, r4
     9a6:	4b35      	ldr	r3, [pc, #212]	; (a7c <_i2c_master_interrupt_handler+0x1e4>)
     9a8:	4798      	blx	r3
     9aa:	e7be      	b.n	92a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     9ac:	0020      	movs	r0, r4
     9ae:	4b34      	ldr	r3, [pc, #208]	; (a80 <_i2c_master_interrupt_handler+0x1e8>)
     9b0:	4798      	blx	r3
     9b2:	e7ba      	b.n	92a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     9b4:	331f      	adds	r3, #31
     9b6:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     9b8:	2b00      	cmp	r3, #0
     9ba:	d000      	beq.n	9be <_i2c_master_interrupt_handler+0x126>
     9bc:	e78c      	b.n	8d8 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     9be:	3303      	adds	r3, #3
     9c0:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     9c2:	2300      	movs	r3, #0
     9c4:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     9c6:	3325      	adds	r3, #37	; 0x25
     9c8:	2200      	movs	r2, #0
     9ca:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     9cc:	7aa3      	ldrb	r3, [r4, #10]
     9ce:	2b00      	cmp	r3, #0
     9d0:	d107      	bne.n	9e2 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     9d2:	2301      	movs	r3, #1
     9d4:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     9d6:	07f3      	lsls	r3, r6, #31
     9d8:	d5a7      	bpl.n	92a <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     9da:	68e3      	ldr	r3, [r4, #12]
     9dc:	0020      	movs	r0, r4
     9de:	4798      	blx	r3
     9e0:	e7a3      	b.n	92a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     9e2:	0020      	movs	r0, r4
     9e4:	4b24      	ldr	r3, [pc, #144]	; (a78 <_i2c_master_interrupt_handler+0x1e0>)
     9e6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     9e8:	686a      	ldr	r2, [r5, #4]
     9ea:	23c0      	movs	r3, #192	; 0xc0
     9ec:	029b      	lsls	r3, r3, #10
     9ee:	4313      	orrs	r3, r2
     9f0:	606b      	str	r3, [r5, #4]
     9f2:	e7f0      	b.n	9d6 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     9f4:	2324      	movs	r3, #36	; 0x24
     9f6:	5ce3      	ldrb	r3, [r4, r3]
     9f8:	2b00      	cmp	r3, #0
     9fa:	d103      	bne.n	a04 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     9fc:	0020      	movs	r0, r4
     9fe:	4b20      	ldr	r3, [pc, #128]	; (a80 <_i2c_master_interrupt_handler+0x1e8>)
     a00:	4798      	blx	r3
     a02:	e792      	b.n	92a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     a04:	0020      	movs	r0, r4
     a06:	4b1d      	ldr	r3, [pc, #116]	; (a7c <_i2c_master_interrupt_handler+0x1e4>)
     a08:	4798      	blx	r3
     a0a:	e78e      	b.n	92a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     a0c:	331f      	adds	r3, #31
     a0e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     a10:	2b01      	cmp	r3, #1
     a12:	d196      	bne.n	942 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     a14:	7e2b      	ldrb	r3, [r5, #24]
     a16:	079b      	lsls	r3, r3, #30
     a18:	d501      	bpl.n	a1e <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     a1a:	2302      	movs	r3, #2
     a1c:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     a1e:	2303      	movs	r3, #3
     a20:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     a22:	2300      	movs	r3, #0
     a24:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     a26:	3325      	adds	r3, #37	; 0x25
     a28:	2200      	movs	r2, #0
     a2a:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     a2c:	07b3      	lsls	r3, r6, #30
     a2e:	d503      	bpl.n	a38 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     a30:	2324      	movs	r3, #36	; 0x24
     a32:	5ce3      	ldrb	r3, [r4, r3]
     a34:	2b01      	cmp	r3, #1
     a36:	d00b      	beq.n	a50 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     a38:	07f3      	lsls	r3, r6, #31
     a3a:	d400      	bmi.n	a3e <_i2c_master_interrupt_handler+0x1a6>
     a3c:	e781      	b.n	942 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     a3e:	2324      	movs	r3, #36	; 0x24
     a40:	5ce3      	ldrb	r3, [r4, r3]
     a42:	2b00      	cmp	r3, #0
     a44:	d000      	beq.n	a48 <_i2c_master_interrupt_handler+0x1b0>
     a46:	e77c      	b.n	942 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     a48:	68e3      	ldr	r3, [r4, #12]
     a4a:	0020      	movs	r0, r4
     a4c:	4798      	blx	r3
     a4e:	e778      	b.n	942 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     a50:	6923      	ldr	r3, [r4, #16]
     a52:	0020      	movs	r0, r4
     a54:	4798      	blx	r3
     a56:	e774      	b.n	942 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     a58:	0020      	movs	r0, r4
     a5a:	4b07      	ldr	r3, [pc, #28]	; (a78 <_i2c_master_interrupt_handler+0x1e0>)
     a5c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     a5e:	686a      	ldr	r2, [r5, #4]
     a60:	23e0      	movs	r3, #224	; 0xe0
     a62:	02db      	lsls	r3, r3, #11
     a64:	4313      	orrs	r3, r2
     a66:	606b      	str	r3, [r5, #4]
     a68:	e780      	b.n	96c <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     a6a:	6963      	ldr	r3, [r4, #20]
     a6c:	0020      	movs	r0, r4
     a6e:	4798      	blx	r3
}
     a70:	e77f      	b.n	972 <_i2c_master_interrupt_handler+0xda>
     a72:	46c0      	nop			; (mov r8, r8)
     a74:	20000d40 	.word	0x20000d40
     a78:	000007c9 	.word	0x000007c9
     a7c:	000007d5 	.word	0x000007d5
     a80:	0000085d 	.word	0x0000085d

00000a84 <authenticate_client>:




void authenticate_client(void)
{//
     a84:	b5f0      	push	{r4, r5, r6, r7, lr}
     a86:	4c85      	ldr	r4, [pc, #532]	; (c9c <authenticate_client+0x218>)
     a88:	44a5      	add	sp, r4
	char disp_str[1500];
	int disp_size = sizeof(disp_str);
     a8a:	4b85      	ldr	r3, [pc, #532]	; (ca0 <authenticate_client+0x21c>)
     a8c:	9302      	str	r3, [sp, #8]
	uint8_t config_index = 0;
	
	/*HOST AUTHENTICATES A CLIENT DEVERSIFIED KEY USING ROOT KEY*/
	do{
		/*Set HOST I2C address*/
		cfg_sha204a_i2c_default.atcai2c.slave_address = DERIVED_KEY_HOST_I2C_ADDR;
     a8e:	4885      	ldr	r0, [pc, #532]	; (ca4 <authenticate_client+0x220>)
     a90:	23ce      	movs	r3, #206	; 0xce
     a92:	7103      	strb	r3, [r0, #4]
		return_code = atcab_init( &cfg_sha204a_i2c_default );
     a94:	4b84      	ldr	r3, [pc, #528]	; (ca8 <authenticate_client+0x224>)
     a96:	4798      	blx	r3
		if (return_code != ATCA_SUCCESS)
     a98:	2800      	cmp	r0, #0
     a9a:	d000      	beq.n	a9e <authenticate_client+0x1a>
     a9c:	e0ca      	b.n	c34 <authenticate_client+0x1b0>
		{
			printf("Not Communicating check I2C address\r\n");
			break;
		}else
		{
			printf("HOST \r\n");
     a9e:	4883      	ldr	r0, [pc, #524]	; (cac <authenticate_client+0x228>)
     aa0:	4c83      	ldr	r4, [pc, #524]	; (cb0 <authenticate_client+0x22c>)
     aa2:	47a0      	blx	r4
			printf("Set HOST I2C address\r\n");
     aa4:	4883      	ldr	r0, [pc, #524]	; (cb4 <authenticate_client+0x230>)
     aa6:	47a0      	blx	r4
		}
		
		/*HOST GET RANDOM NUMBER*/
		return_code = atcab_random(client_auth.host_random);
     aa8:	4883      	ldr	r0, [pc, #524]	; (cb8 <authenticate_client+0x234>)
     aaa:	4b84      	ldr	r3, [pc, #528]	; (cbc <authenticate_client+0x238>)
     aac:	4798      	blx	r3
		if (return_code != ATCA_SUCCESS)
     aae:	2800      	cmp	r0, #0
     ab0:	d000      	beq.n	ab4 <authenticate_client+0x30>
     ab2:	e0c5      	b.n	c40 <authenticate_client+0x1bc>
		{
			printf("Random Number Generation failed\r\n");
			break;
		}else
		{
			disp_size = sizeof(disp_str);
     ab4:	4b7a      	ldr	r3, [pc, #488]	; (ca0 <authenticate_client+0x21c>)
     ab6:	9302      	str	r3, [sp, #8]
			atcab_bin2hex( client_auth.host_random, sizeof(client_auth.host_random), disp_str, &disp_size);
     ab8:	ab02      	add	r3, sp, #8
     aba:	aa03      	add	r2, sp, #12
     abc:	2120      	movs	r1, #32
     abe:	487e      	ldr	r0, [pc, #504]	; (cb8 <authenticate_client+0x234>)
     ac0:	4c7f      	ldr	r4, [pc, #508]	; (cc0 <authenticate_client+0x23c>)
     ac2:	47a0      	blx	r4
			printf("HOST: Sending Random Challenge to Client:\n\r\n%s\r\n", disp_str);
     ac4:	a903      	add	r1, sp, #12
     ac6:	487f      	ldr	r0, [pc, #508]	; (cc4 <authenticate_client+0x240>)
     ac8:	4b7f      	ldr	r3, [pc, #508]	; (cc8 <authenticate_client+0x244>)
     aca:	4798      	blx	r3
			printf("\r\n");
     acc:	487f      	ldr	r0, [pc, #508]	; (ccc <authenticate_client+0x248>)
     ace:	4b78      	ldr	r3, [pc, #480]	; (cb0 <authenticate_client+0x22c>)
     ad0:	4798      	blx	r3
		}
		
		/*Set client configured I2C address*/
		cfg_sha204a_i2c_default.atcai2c.slave_address = DERIVED_KEY_CLIENT_I2C_ADDR;
     ad2:	4874      	ldr	r0, [pc, #464]	; (ca4 <authenticate_client+0x220>)
     ad4:	23c8      	movs	r3, #200	; 0xc8
     ad6:	7103      	strb	r3, [r0, #4]
		return_code = atcab_init( &cfg_sha204a_i2c_default );
     ad8:	4b73      	ldr	r3, [pc, #460]	; (ca8 <authenticate_client+0x224>)
     ada:	4798      	blx	r3
		if (return_code != ATCA_SUCCESS)
     adc:	2800      	cmp	r0, #0
     ade:	d000      	beq.n	ae2 <authenticate_client+0x5e>
     ae0:	e0b2      	b.n	c48 <authenticate_client+0x1c4>
		{
			printf("Not Communicating check I2C address\r\n");
			break;
		}else
		{
			printf("CLIENT\r\n");
     ae2:	487b      	ldr	r0, [pc, #492]	; (cd0 <authenticate_client+0x24c>)
     ae4:	4c72      	ldr	r4, [pc, #456]	; (cb0 <authenticate_client+0x22c>)
     ae6:	47a0      	blx	r4
			printf("Set CLIENT I2C address\r\n");
     ae8:	487a      	ldr	r0, [pc, #488]	; (cd4 <authenticate_client+0x250>)
     aea:	47a0      	blx	r4
			printf("\r\n");
     aec:	4877      	ldr	r0, [pc, #476]	; (ccc <authenticate_client+0x248>)
     aee:	47a0      	blx	r4
		}
		
		/*CLIENT GENERATE MAC (SHA 256 HASH) ON CLIENT USING DERIVED KEY IN SLOT 1 AND CHALANGE (RANDOM NUMBER)*/
		/*CLIENT CALCULATE MAC FROM DERIVED KEY IN SLOT 0x01 AND RANDOM CHALLANEGE FROM HOST*/
		printf("CLIENT: Obtaining MAC for the Diversified Key in Slot 1\r\n");
     af0:	4879      	ldr	r0, [pc, #484]	; (cd8 <authenticate_client+0x254>)
     af2:	47a0      	blx	r4
		return_code = atcab_mac( CLIENT_MODE_FOR_CAL_MAC, CLIENT_DERIVE_KEY_SLOT_NO_CONSUMTION_COUNTING, client_auth.host_random, client_auth.sha_256_MAC );
     af4:	4a70      	ldr	r2, [pc, #448]	; (cb8 <authenticate_client+0x234>)
     af6:	0013      	movs	r3, r2
     af8:	3320      	adds	r3, #32
     afa:	2101      	movs	r1, #1
     afc:	2040      	movs	r0, #64	; 0x40
     afe:	4c77      	ldr	r4, [pc, #476]	; (cdc <authenticate_client+0x258>)
     b00:	47a0      	blx	r4
		if (return_code	!= ATCA_SUCCESS)
     b02:	2800      	cmp	r0, #0
     b04:	d100      	bne.n	b08 <authenticate_client+0x84>
     b06:	e0a3      	b.n	c50 <authenticate_client+0x1cc>
		{
			printf("MAC failed\r\n");
     b08:	4875      	ldr	r0, [pc, #468]	; (ce0 <authenticate_client+0x25c>)
     b0a:	4b69      	ldr	r3, [pc, #420]	; (cb0 <authenticate_client+0x22c>)
     b0c:	4798      	blx	r3
			printf("Responding Challenge from HOST:\n\r\n%s\r\n", disp_str);
			printf("\r\n");
		}
		
		///*CLIENT Read Serial Number*/
		return_code = atcab_read_serial_number(client_auth.dev_serial);
     b0e:	486a      	ldr	r0, [pc, #424]	; (cb8 <authenticate_client+0x234>)
     b10:	3051      	adds	r0, #81	; 0x51
     b12:	4b74      	ldr	r3, [pc, #464]	; (ce4 <authenticate_client+0x260>)
     b14:	4798      	blx	r3
		if (return_code != ATCA_SUCCESS)
     b16:	2800      	cmp	r0, #0
     b18:	d000      	beq.n	b1c <authenticate_client+0x98>
     b1a:	e0aa      	b.n	c72 <authenticate_client+0x1ee>
		{
			printf("Read Serial Number failed\r\n");
			break;
		}else
		{
			disp_size = sizeof(disp_str);
     b1c:	4b60      	ldr	r3, [pc, #384]	; (ca0 <authenticate_client+0x21c>)
     b1e:	9302      	str	r3, [sp, #8]
			atcab_bin2hex( client_auth.dev_serial,sizeof(client_auth.dev_serial), disp_str, &disp_size);
     b20:	ab02      	add	r3, sp, #8
     b22:	aa03      	add	r2, sp, #12
     b24:	2109      	movs	r1, #9
     b26:	4864      	ldr	r0, [pc, #400]	; (cb8 <authenticate_client+0x234>)
     b28:	3051      	adds	r0, #81	; 0x51
     b2a:	4c65      	ldr	r4, [pc, #404]	; (cc0 <authenticate_client+0x23c>)
     b2c:	47a0      	blx	r4
			printf("CLIENT: Reading Client SerialNumber:\n\r\n%s\r\n", disp_str);
     b2e:	a903      	add	r1, sp, #12
     b30:	486d      	ldr	r0, [pc, #436]	; (ce8 <authenticate_client+0x264>)
     b32:	4b65      	ldr	r3, [pc, #404]	; (cc8 <authenticate_client+0x244>)
     b34:	4798      	blx	r3
			printf("Sending to HOST\r\n");
     b36:	486d      	ldr	r0, [pc, #436]	; (cec <authenticate_client+0x268>)
     b38:	4c5d      	ldr	r4, [pc, #372]	; (cb0 <authenticate_client+0x22c>)
     b3a:	47a0      	blx	r4
			printf("\r\n");
     b3c:	4863      	ldr	r0, [pc, #396]	; (ccc <authenticate_client+0x248>)
     b3e:	47a0      	blx	r4
		
		

		
		/*Set HOST I2C address*/
		cfg_sha204a_i2c_default.atcai2c.slave_address = DERIVED_KEY_HOST_I2C_ADDR;
     b40:	4858      	ldr	r0, [pc, #352]	; (ca4 <authenticate_client+0x220>)
     b42:	23ce      	movs	r3, #206	; 0xce
     b44:	7103      	strb	r3, [r0, #4]
		return_code = atcab_init( &cfg_sha204a_i2c_default );
     b46:	4b58      	ldr	r3, [pc, #352]	; (ca8 <authenticate_client+0x224>)
     b48:	4798      	blx	r3
		if (return_code != ATCA_SUCCESS)
     b4a:	2800      	cmp	r0, #0
     b4c:	d000      	beq.n	b50 <authenticate_client+0xcc>
     b4e:	e094      	b.n	c7a <authenticate_client+0x1f6>
		{
			printf("Not Communicating check I2C address\r\n");
			break;
		}else
		{
			printf("HOST \r\n");
     b50:	4856      	ldr	r0, [pc, #344]	; (cac <authenticate_client+0x228>)
     b52:	4c57      	ldr	r4, [pc, #348]	; (cb0 <authenticate_client+0x22c>)
     b54:	47a0      	blx	r4
			printf("Set HOST I2C address\r\n");
     b56:	4857      	ldr	r0, [pc, #348]	; (cb4 <authenticate_client+0x230>)
     b58:	47a0      	blx	r4
			printf("\r\n");
     b5a:	4f5c      	ldr	r7, [pc, #368]	; (ccc <authenticate_client+0x248>)
     b5c:	0038      	movs	r0, r7
     b5e:	47a0      	blx	r4
		}
		
		///*HOST PAD SERIAL NUMBER-> SERIAL + PAD OF 7's TO FORM A 32BYTE TEMP KEY*/
		printf("HOST: Padding Serial Number from CLIENT with 0x77\r\n");
     b60:	4863      	ldr	r0, [pc, #396]	; (cf0 <authenticate_client+0x26c>)
     b62:	47a0      	blx	r4
		
		// Set the pad bytes
		memset(&client_auth.tempkey[0], 0x77, ATCA_BLOCK_SIZE);
     b64:	4e54      	ldr	r6, [pc, #336]	; (cb8 <authenticate_client+0x234>)
     b66:	0035      	movs	r5, r6
     b68:	355a      	adds	r5, #90	; 0x5a
     b6a:	2220      	movs	r2, #32
     b6c:	2177      	movs	r1, #119	; 0x77
     b6e:	0028      	movs	r0, r5
     b70:	4b60      	ldr	r3, [pc, #384]	; (cf4 <authenticate_client+0x270>)
     b72:	4798      	blx	r3
		// If successfully read, then copy
		memcpy(&client_auth.tempkey[0], &client_auth.dev_serial, ATCA_SERIAL_NUM_SIZE);
     b74:	0031      	movs	r1, r6
     b76:	3151      	adds	r1, #81	; 0x51
     b78:	2209      	movs	r2, #9
     b7a:	0028      	movs	r0, r5
     b7c:	4b5e      	ldr	r3, [pc, #376]	; (cf8 <authenticate_client+0x274>)
     b7e:	4798      	blx	r3
		
		disp_size = sizeof(disp_str);
     b80:	4b47      	ldr	r3, [pc, #284]	; (ca0 <authenticate_client+0x21c>)
     b82:	9302      	str	r3, [sp, #8]
		atcab_bin2hex( client_auth.tempkey,sizeof(client_auth.tempkey), disp_str, &disp_size);
     b84:	ab02      	add	r3, sp, #8
     b86:	aa03      	add	r2, sp, #12
     b88:	2120      	movs	r1, #32
     b8a:	0028      	movs	r0, r5
     b8c:	4e4c      	ldr	r6, [pc, #304]	; (cc0 <authenticate_client+0x23c>)
     b8e:	47b0      	blx	r6
		printf("HOST:Padded Serial Number:\n\r\n%s\r\n", disp_str);
     b90:	a903      	add	r1, sp, #12
     b92:	485a      	ldr	r0, [pc, #360]	; (cfc <authenticate_client+0x278>)
     b94:	4b4c      	ldr	r3, [pc, #304]	; (cc8 <authenticate_client+0x244>)
     b96:	4798      	blx	r3
		printf("\r\n");
     b98:	0038      	movs	r0, r7
     b9a:	47a0      	blx	r4
		
		printf("HOST:Performing Pass Though Nonce Command\r\n");
     b9c:	4858      	ldr	r0, [pc, #352]	; (d00 <authenticate_client+0x27c>)
     b9e:	47a0      	blx	r4
		return_code = atcab_nonce(client_auth.tempkey);
     ba0:	0028      	movs	r0, r5
     ba2:	4b58      	ldr	r3, [pc, #352]	; (d04 <authenticate_client+0x280>)
     ba4:	4798      	blx	r3
		if (return_code != ATCA_SUCCESS)
     ba6:	2800      	cmp	r0, #0
     ba8:	d000      	beq.n	bac <authenticate_client+0x128>
     baa:	e06a      	b.n	c82 <authenticate_client+0x1fe>
		{
			printf("Nonce Command failed\r\n");
			break;
		}else
		{
			printf("\nTempKey SourceFlag Set\r\n");
     bac:	4856      	ldr	r0, [pc, #344]	; (d08 <authenticate_client+0x284>)
     bae:	4c40      	ldr	r4, [pc, #256]	; (cb0 <authenticate_client+0x22c>)
     bb0:	47a0      	blx	r4
			printf("\r\n");
     bb2:	4846      	ldr	r0, [pc, #280]	; (ccc <authenticate_client+0x248>)
     bb4:	47a0      	blx	r4
		}
		
		printf("HOST:Performing GenDig Command, this sets TempKey with the root key in slot 0\r\n");
     bb6:	4855      	ldr	r0, [pc, #340]	; (d0c <authenticate_client+0x288>)
     bb8:	47a0      	blx	r4
		return_code = atcab_gendig(DATA_ZONE, HOST_ROOT_KEY_SLOT_NO_CONSUMTION_COUNTING, client_auth.gen_dig_other_data, sizeof(client_auth.gen_dig_other_data));
     bba:	2304      	movs	r3, #4
     bbc:	4a3e      	ldr	r2, [pc, #248]	; (cb8 <authenticate_client+0x234>)
     bbe:	3240      	adds	r2, #64	; 0x40
     bc0:	2100      	movs	r1, #0
     bc2:	2002      	movs	r0, #2
     bc4:	4c52      	ldr	r4, [pc, #328]	; (d10 <authenticate_client+0x28c>)
     bc6:	47a0      	blx	r4
		if (return_code != ATCA_SUCCESS)
     bc8:	2800      	cmp	r0, #0
     bca:	d15e      	bne.n	c8a <authenticate_client+0x206>
		{
			printf("GenDig Command failed\r\n");
			break;
		}else
		{
			printf("GenDig Command executed\r\n");
     bcc:	4851      	ldr	r0, [pc, #324]	; (d14 <authenticate_client+0x290>)
     bce:	4d38      	ldr	r5, [pc, #224]	; (cb0 <authenticate_client+0x22c>)
     bd0:	47a8      	blx	r5
			printf("\r\n");
     bd2:	483e      	ldr	r0, [pc, #248]	; (ccc <authenticate_client+0x248>)
     bd4:	47a8      	blx	r5
		
		uint8_t client_mode_for_mac = CLIENT_MODE_FOR_CAL_MAC;
		uint16_t client_slot_id_for_mac = (uint16_t)CLIENT_DERIVE_KEY_SLOT_NO_CONSUMTION_COUNTING;
		/*Formatting CHECKMAC other data with Opcode and CLIENT serial Number as described in data sheet*/

		memcpy(&client_auth.checkmac_other_data[1], &client_mode_for_mac, 1);				//Client Mode used for MAC
     bd6:	4c38      	ldr	r4, [pc, #224]	; (cb8 <authenticate_client+0x234>)
     bd8:	2240      	movs	r2, #64	; 0x40
     bda:	2345      	movs	r3, #69	; 0x45
     bdc:	54e2      	strb	r2, [r4, r3]
		memcpy(&client_auth.checkmac_other_data[2], &client_slot_id_for_mac, 2);			//Client Slot ID used for MAC
     bde:	3a3f      	subs	r2, #63	; 0x3f
     be0:	3301      	adds	r3, #1
     be2:	52e2      	strh	r2, [r4, r3]
		memcpy(&client_auth.checkmac_other_data[7], &client_auth.dev_serial[4], 4);			//Client Serial number (4:7)
     be4:	0020      	movs	r0, r4
     be6:	304b      	adds	r0, #75	; 0x4b
     be8:	0021      	movs	r1, r4
     bea:	3155      	adds	r1, #85	; 0x55
     bec:	3203      	adds	r2, #3
     bee:	4e42      	ldr	r6, [pc, #264]	; (cf8 <authenticate_client+0x274>)
     bf0:	47b0      	blx	r6
		memcpy(&client_auth.checkmac_other_data[11], &client_auth.dev_serial[2], 2);		//Client Serial number (2:3)
     bf2:	0020      	movs	r0, r4
     bf4:	304f      	adds	r0, #79	; 0x4f
     bf6:	0021      	movs	r1, r4
     bf8:	3153      	adds	r1, #83	; 0x53
     bfa:	2202      	movs	r2, #2
     bfc:	47b0      	blx	r6
		
		printf("HOST: Performing CheckMAC using Random Challenge and Derive Key computed internally by HOST\r\n");
     bfe:	4846      	ldr	r0, [pc, #280]	; (d18 <authenticate_client+0x294>)
     c00:	47a8      	blx	r5
		return_code = atcab_checkmac( HOST_CHECK_MACK_MODE, HOST_DIVERSIFIED_KEY_SLOT_NO_CONSUMTION_COUNTING, client_auth.host_random, client_auth.sha_256_MAC, client_auth.checkmac_other_data);
     c02:	0023      	movs	r3, r4
     c04:	3320      	adds	r3, #32
     c06:	0022      	movs	r2, r4
     c08:	3244      	adds	r2, #68	; 0x44
     c0a:	9200      	str	r2, [sp, #0]
     c0c:	0022      	movs	r2, r4
     c0e:	2101      	movs	r1, #1
     c10:	2006      	movs	r0, #6
     c12:	4c42      	ldr	r4, [pc, #264]	; (d1c <authenticate_client+0x298>)
     c14:	47a0      	blx	r4
		if (return_code != ATCA_SUCCESS)
     c16:	2800      	cmp	r0, #0
     c18:	d13b      	bne.n	c92 <authenticate_client+0x20e>
		{
			printf("CLIENT IS NOT AUTHENTIC\r\n");
			break;
		}else
		{
			printf("\r\n");
     c1a:	4d2c      	ldr	r5, [pc, #176]	; (ccc <authenticate_client+0x248>)
     c1c:	0028      	movs	r0, r5
     c1e:	4c24      	ldr	r4, [pc, #144]	; (cb0 <authenticate_client+0x22c>)
     c20:	47a0      	blx	r4
			delay_ms(100);
     c22:	2064      	movs	r0, #100	; 0x64
     c24:	4b3e      	ldr	r3, [pc, #248]	; (d20 <authenticate_client+0x29c>)
     c26:	4798      	blx	r3
			printf("CLIENT IS AUTHENTIC\r\n");
     c28:	483e      	ldr	r0, [pc, #248]	; (d24 <authenticate_client+0x2a0>)
     c2a:	47a0      	blx	r4
			printf("\r\n");
     c2c:	0028      	movs	r0, r5
     c2e:	47a0      	blx	r4
		}
		/*Calling NONCE Mode 3 "Pass Through Nonce Set value in Temp Key*/
		asm("nop");
     c30:	46c0      	nop			; (mov r8, r8)
	}while(0);
}
     c32:	e002      	b.n	c3a <authenticate_client+0x1b6>
			printf("Not Communicating check I2C address\r\n");
     c34:	483c      	ldr	r0, [pc, #240]	; (d28 <authenticate_client+0x2a4>)
     c36:	4b1e      	ldr	r3, [pc, #120]	; (cb0 <authenticate_client+0x22c>)
     c38:	4798      	blx	r3
}
     c3a:	4b3c      	ldr	r3, [pc, #240]	; (d2c <authenticate_client+0x2a8>)
     c3c:	449d      	add	sp, r3
     c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("Random Number Generation failed\r\n");
     c40:	483b      	ldr	r0, [pc, #236]	; (d30 <authenticate_client+0x2ac>)
     c42:	4b1b      	ldr	r3, [pc, #108]	; (cb0 <authenticate_client+0x22c>)
     c44:	4798      	blx	r3
			break;
     c46:	e7f8      	b.n	c3a <authenticate_client+0x1b6>
			printf("Not Communicating check I2C address\r\n");
     c48:	4837      	ldr	r0, [pc, #220]	; (d28 <authenticate_client+0x2a4>)
     c4a:	4b19      	ldr	r3, [pc, #100]	; (cb0 <authenticate_client+0x22c>)
     c4c:	4798      	blx	r3
			break;
     c4e:	e7f4      	b.n	c3a <authenticate_client+0x1b6>
			disp_size = sizeof(disp_str);
     c50:	4b13      	ldr	r3, [pc, #76]	; (ca0 <authenticate_client+0x21c>)
     c52:	9302      	str	r3, [sp, #8]
			atcab_bin2hex( client_auth.sha_256_MAC,sizeof(client_auth.sha_256_MAC), disp_str, &disp_size);
     c54:	ab02      	add	r3, sp, #8
     c56:	aa03      	add	r2, sp, #12
     c58:	2120      	movs	r1, #32
     c5a:	4817      	ldr	r0, [pc, #92]	; (cb8 <authenticate_client+0x234>)
     c5c:	3020      	adds	r0, #32
     c5e:	4c18      	ldr	r4, [pc, #96]	; (cc0 <authenticate_client+0x23c>)
     c60:	47a0      	blx	r4
			printf("Responding Challenge from HOST:\n\r\n%s\r\n", disp_str);
     c62:	a903      	add	r1, sp, #12
     c64:	4833      	ldr	r0, [pc, #204]	; (d34 <authenticate_client+0x2b0>)
     c66:	4b18      	ldr	r3, [pc, #96]	; (cc8 <authenticate_client+0x244>)
     c68:	4798      	blx	r3
			printf("\r\n");
     c6a:	4818      	ldr	r0, [pc, #96]	; (ccc <authenticate_client+0x248>)
     c6c:	4b10      	ldr	r3, [pc, #64]	; (cb0 <authenticate_client+0x22c>)
     c6e:	4798      	blx	r3
     c70:	e74d      	b.n	b0e <authenticate_client+0x8a>
			printf("Read Serial Number failed\r\n");
     c72:	4831      	ldr	r0, [pc, #196]	; (d38 <authenticate_client+0x2b4>)
     c74:	4b0e      	ldr	r3, [pc, #56]	; (cb0 <authenticate_client+0x22c>)
     c76:	4798      	blx	r3
			break;
     c78:	e7df      	b.n	c3a <authenticate_client+0x1b6>
			printf("Not Communicating check I2C address\r\n");
     c7a:	482b      	ldr	r0, [pc, #172]	; (d28 <authenticate_client+0x2a4>)
     c7c:	4b0c      	ldr	r3, [pc, #48]	; (cb0 <authenticate_client+0x22c>)
     c7e:	4798      	blx	r3
			break;
     c80:	e7db      	b.n	c3a <authenticate_client+0x1b6>
			printf("Nonce Command failed\r\n");
     c82:	482e      	ldr	r0, [pc, #184]	; (d3c <authenticate_client+0x2b8>)
     c84:	4b0a      	ldr	r3, [pc, #40]	; (cb0 <authenticate_client+0x22c>)
     c86:	4798      	blx	r3
			break;
     c88:	e7d7      	b.n	c3a <authenticate_client+0x1b6>
			printf("GenDig Command failed\r\n");
     c8a:	482d      	ldr	r0, [pc, #180]	; (d40 <authenticate_client+0x2bc>)
     c8c:	4b08      	ldr	r3, [pc, #32]	; (cb0 <authenticate_client+0x22c>)
     c8e:	4798      	blx	r3
			break;
     c90:	e7d3      	b.n	c3a <authenticate_client+0x1b6>
			printf("CLIENT IS NOT AUTHENTIC\r\n");
     c92:	482c      	ldr	r0, [pc, #176]	; (d44 <authenticate_client+0x2c0>)
     c94:	4b06      	ldr	r3, [pc, #24]	; (cb0 <authenticate_client+0x22c>)
     c96:	4798      	blx	r3
			break;
     c98:	e7cf      	b.n	c3a <authenticate_client+0x1b6>
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	fffffa14 	.word	0xfffffa14
     ca0:	000005dc 	.word	0x000005dc
     ca4:	20000380 	.word	0x20000380
     ca8:	00001ebd 	.word	0x00001ebd
     cac:	00007d74 	.word	0x00007d74
     cb0:	00006af1 	.word	0x00006af1
     cb4:	00007d7c 	.word	0x00007d7c
     cb8:	20000000 	.word	0x20000000
     cbc:	000020d5 	.word	0x000020d5
     cc0:	00002e55 	.word	0x00002e55
     cc4:	00007db8 	.word	0x00007db8
     cc8:	000069d5 	.word	0x000069d5
     ccc:	0000888c 	.word	0x0000888c
     cd0:	00007dec 	.word	0x00007dec
     cd4:	00007df4 	.word	0x00007df4
     cd8:	00007e0c 	.word	0x00007e0c
     cdc:	00002851 	.word	0x00002851
     ce0:	00007e48 	.word	0x00007e48
     ce4:	000025c5 	.word	0x000025c5
     ce8:	00007e98 	.word	0x00007e98
     cec:	00007ec4 	.word	0x00007ec4
     cf0:	00007ed8 	.word	0x00007ed8
     cf4:	00006875 	.word	0x00006875
     cf8:	0000683f 	.word	0x0000683f
     cfc:	00007f0c 	.word	0x00007f0c
     d00:	00007f30 	.word	0x00007f30
     d04:	00002281 	.word	0x00002281
     d08:	00007f74 	.word	0x00007f74
     d0c:	00007f90 	.word	0x00007f90
     d10:	00002745 	.word	0x00002745
     d14:	00007ff8 	.word	0x00007ff8
     d18:	00008014 	.word	0x00008014
     d1c:	00002929 	.word	0x00002929
     d20:	00003801 	.word	0x00003801
     d24:	00008090 	.word	0x00008090
     d28:	00007d4c 	.word	0x00007d4c
     d2c:	000005ec 	.word	0x000005ec
     d30:	00007d94 	.word	0x00007d94
     d34:	00007e54 	.word	0x00007e54
     d38:	00007e7c 	.word	0x00007e7c
     d3c:	00007f5c 	.word	0x00007f5c
     d40:	00007fe0 	.word	0x00007fe0
     d44:	00008074 	.word	0x00008074

00000d48 <authenticate_client_consumtion_counting>:

void authenticate_client_consumtion_counting(void)
{
     d48:	b5f0      	push	{r4, r5, r6, r7, lr}
     d4a:	4ccc      	ldr	r4, [pc, #816]	; (107c <authenticate_client_consumtion_counting+0x334>)
     d4c:	44a5      	add	sp, r4
	char disp_str[1500];
	int disp_size = sizeof(disp_str);
     d4e:	4bcc      	ldr	r3, [pc, #816]	; (1080 <authenticate_client_consumtion_counting+0x338>)
     d50:	9302      	str	r3, [sp, #8]
	uint8_t config_index = 0;
	
	/*HOST AUTHENTICATES A CLIENT DEVERSIFIED KEY USING ROOT KEY*/
	do{
		/*SET HOST SPECIFIC DELAY SINCE WE CHANGED I2C ADDRESS */
		cfg_sha204a_i2c_default.atcai2c.slave_address = DERIVED_KEY_HOST_I2C_ADDR;
     d52:	48cc      	ldr	r0, [pc, #816]	; (1084 <authenticate_client_consumtion_counting+0x33c>)
     d54:	23ce      	movs	r3, #206	; 0xce
     d56:	7103      	strb	r3, [r0, #4]
		return_code = atcab_init( &cfg_sha204a_i2c_default );
     d58:	4bcb      	ldr	r3, [pc, #812]	; (1088 <authenticate_client_consumtion_counting+0x340>)
     d5a:	4798      	blx	r3
		if (return_code != ATCA_SUCCESS)
     d5c:	2800      	cmp	r0, #0
     d5e:	d000      	beq.n	d62 <authenticate_client_consumtion_counting+0x1a>
     d60:	e14a      	b.n	ff8 <authenticate_client_consumtion_counting+0x2b0>
		{
			printf("Not Communicating check I2C address\r\n");
			break;
		}else
		{
			printf("HOST \r\n");
     d62:	48ca      	ldr	r0, [pc, #808]	; (108c <authenticate_client_consumtion_counting+0x344>)
     d64:	4cca      	ldr	r4, [pc, #808]	; (1090 <authenticate_client_consumtion_counting+0x348>)
     d66:	47a0      	blx	r4
			printf("Set HOST I2C address\r\n");
     d68:	48ca      	ldr	r0, [pc, #808]	; (1094 <authenticate_client_consumtion_counting+0x34c>)
     d6a:	47a0      	blx	r4
		}
		
		/*HOST GET RANDOM NUMBER*/
		return_code = atcab_random(client_auth_consumption_count.host_random);
     d6c:	48ca      	ldr	r0, [pc, #808]	; (1098 <authenticate_client_consumtion_counting+0x350>)
     d6e:	4bcb      	ldr	r3, [pc, #812]	; (109c <authenticate_client_consumtion_counting+0x354>)
     d70:	4798      	blx	r3
		if (return_code != ATCA_SUCCESS)
     d72:	2800      	cmp	r0, #0
     d74:	d000      	beq.n	d78 <authenticate_client_consumtion_counting+0x30>
     d76:	e145      	b.n	1004 <authenticate_client_consumtion_counting+0x2bc>
		{
			printf("Random Number Generation failed\r\n");
			break;
		}else
		{
			disp_size = sizeof(disp_str);
     d78:	4bc1      	ldr	r3, [pc, #772]	; (1080 <authenticate_client_consumtion_counting+0x338>)
     d7a:	9302      	str	r3, [sp, #8]
			atcab_bin2hex( client_auth_consumption_count.host_random,sizeof(client_auth_consumption_count.host_random), disp_str, &disp_size);
     d7c:	ab02      	add	r3, sp, #8
     d7e:	aa03      	add	r2, sp, #12
     d80:	2120      	movs	r1, #32
     d82:	48c5      	ldr	r0, [pc, #788]	; (1098 <authenticate_client_consumtion_counting+0x350>)
     d84:	4cc6      	ldr	r4, [pc, #792]	; (10a0 <authenticate_client_consumtion_counting+0x358>)
     d86:	47a0      	blx	r4
			printf("HOST: Sending Random Challenge to Client:\n\r\n%s\r\n", disp_str);
     d88:	a903      	add	r1, sp, #12
     d8a:	48c6      	ldr	r0, [pc, #792]	; (10a4 <authenticate_client_consumtion_counting+0x35c>)
     d8c:	4bc6      	ldr	r3, [pc, #792]	; (10a8 <authenticate_client_consumtion_counting+0x360>)
     d8e:	4798      	blx	r3
			printf("\r\n");
     d90:	48c6      	ldr	r0, [pc, #792]	; (10ac <authenticate_client_consumtion_counting+0x364>)
     d92:	4bbf      	ldr	r3, [pc, #764]	; (1090 <authenticate_client_consumtion_counting+0x348>)
     d94:	4798      	blx	r3
		}
		
		/*SET HOST SPECIFIC DELAY SINCE WE CHANGED I2C ADDRESS */
		cfg_sha204a_i2c_default.atcai2c.slave_address = DERIVED_KEY_CLIENT_I2C_ADDR;
     d96:	48bb      	ldr	r0, [pc, #748]	; (1084 <authenticate_client_consumtion_counting+0x33c>)
     d98:	23c8      	movs	r3, #200	; 0xc8
     d9a:	7103      	strb	r3, [r0, #4]
		return_code = atcab_init( &cfg_sha204a_i2c_default );
     d9c:	4bba      	ldr	r3, [pc, #744]	; (1088 <authenticate_client_consumtion_counting+0x340>)
     d9e:	4798      	blx	r3
		if (return_code != ATCA_SUCCESS)
     da0:	2800      	cmp	r0, #0
     da2:	d000      	beq.n	da6 <authenticate_client_consumtion_counting+0x5e>
     da4:	e132      	b.n	100c <authenticate_client_consumtion_counting+0x2c4>
		{
			printf("Not Communicating check I2C address\r\n");
			break;
		}else
		{
			printf("CLIENT\r\n");
     da6:	48c2      	ldr	r0, [pc, #776]	; (10b0 <authenticate_client_consumtion_counting+0x368>)
     da8:	4cb9      	ldr	r4, [pc, #740]	; (1090 <authenticate_client_consumtion_counting+0x348>)
     daa:	47a0      	blx	r4
			printf("Set CLIENT I2C address\r\n");
     dac:	48c1      	ldr	r0, [pc, #772]	; (10b4 <authenticate_client_consumtion_counting+0x36c>)
     dae:	47a0      	blx	r4
			printf("\r\n");
     db0:	48be      	ldr	r0, [pc, #760]	; (10ac <authenticate_client_consumtion_counting+0x364>)
     db2:	47a0      	blx	r4
		
		
		config_index = 0;
		config_zone_offset = 0;
		config_zone_block = 2;
		printf("CLIENT: Reading UseFlag counter\r\n");
     db4:	48c0      	ldr	r0, [pc, #768]	; (10b8 <authenticate_client_consumtion_counting+0x370>)
     db6:	47a0      	blx	r4
		printf("CLIENT: This is the Secondary Counter counter. Top count is 8\r\n");
     db8:	48c0      	ldr	r0, [pc, #768]	; (10bc <authenticate_client_consumtion_counting+0x374>)
     dba:	47a0      	blx	r4
		
		return_code = atcab_read_zone(ATCA_ZONE_CONFIG, 0, config_zone_block, config_zone_offset, client_auth_consumption_count.used_flag, ATCA_WORD_SIZE);
     dbc:	2304      	movs	r3, #4
     dbe:	9301      	str	r3, [sp, #4]
     dc0:	4bb5      	ldr	r3, [pc, #724]	; (1098 <authenticate_client_consumtion_counting+0x350>)
     dc2:	337a      	adds	r3, #122	; 0x7a
     dc4:	9300      	str	r3, [sp, #0]
     dc6:	2300      	movs	r3, #0
     dc8:	2202      	movs	r2, #2
     dca:	2100      	movs	r1, #0
     dcc:	2000      	movs	r0, #0
     dce:	4cbc      	ldr	r4, [pc, #752]	; (10c0 <authenticate_client_consumtion_counting+0x378>)
     dd0:	47a0      	blx	r4
		if (return_code	!= ATCA_SUCCESS)
     dd2:	2800      	cmp	r0, #0
     dd4:	d000      	beq.n	dd8 <authenticate_client_consumtion_counting+0x90>
     dd6:	e11d      	b.n	1014 <authenticate_client_consumtion_counting+0x2cc>
			printf("Reading UseFlag counter failed\r\n");
			break;
		}
		else
		{
			printf("The secondary counter value is: %#01x\r\n",client_auth_consumption_count.used_flag[2]);
     dd8:	4caf      	ldr	r4, [pc, #700]	; (1098 <authenticate_client_consumtion_counting+0x350>)
     dda:	237c      	movs	r3, #124	; 0x7c
     ddc:	5ce1      	ldrb	r1, [r4, r3]
     dde:	48b9      	ldr	r0, [pc, #740]	; (10c4 <authenticate_client_consumtion_counting+0x37c>)
     de0:	4bb1      	ldr	r3, [pc, #708]	; (10a8 <authenticate_client_consumtion_counting+0x360>)
     de2:	4798      	blx	r3
			printf("\r\n");
     de4:	48b1      	ldr	r0, [pc, #708]	; (10ac <authenticate_client_consumtion_counting+0x364>)
     de6:	4baa      	ldr	r3, [pc, #680]	; (1090 <authenticate_client_consumtion_counting+0x348>)
     de8:	4798      	blx	r3
		}
		
		config_index = 0;
		config_zone_offset = 1;
		config_zone_block = 2;
		return_code = atcab_read_zone(ATCA_ZONE_CONFIG, 0, config_zone_block, config_zone_offset, &client_auth_consumption_count.last_key_used[config_index], ATCA_WORD_SIZE);
     dea:	2304      	movs	r3, #4
     dec:	9301      	str	r3, [sp, #4]
     dee:	347e      	adds	r4, #126	; 0x7e
     df0:	9400      	str	r4, [sp, #0]
     df2:	3b03      	subs	r3, #3
     df4:	2202      	movs	r2, #2
     df6:	2100      	movs	r1, #0
     df8:	2000      	movs	r0, #0
     dfa:	4cb1      	ldr	r4, [pc, #708]	; (10c0 <authenticate_client_consumtion_counting+0x378>)
     dfc:	47a0      	blx	r4
		if (return_code	!= ATCA_SUCCESS) break;
     dfe:	2800      	cmp	r0, #0
     e00:	d000      	beq.n	e04 <authenticate_client_consumtion_counting+0xbc>
     e02:	e0fc      	b.n	ffe <authenticate_client_consumtion_counting+0x2b6>
		config_zone_offset = 2;
		config_index += ATCA_WORD_SIZE;
		return_code = atcab_read_zone(ATCA_ZONE_CONFIG, 0, config_zone_block, config_zone_offset, &client_auth_consumption_count.last_key_used[config_index], ATCA_WORD_SIZE);
     e04:	2304      	movs	r3, #4
     e06:	9301      	str	r3, [sp, #4]
     e08:	4ba3      	ldr	r3, [pc, #652]	; (1098 <authenticate_client_consumtion_counting+0x350>)
     e0a:	3382      	adds	r3, #130	; 0x82
     e0c:	9300      	str	r3, [sp, #0]
     e0e:	2302      	movs	r3, #2
     e10:	2202      	movs	r2, #2
     e12:	2100      	movs	r1, #0
     e14:	4caa      	ldr	r4, [pc, #680]	; (10c0 <authenticate_client_consumtion_counting+0x378>)
     e16:	47a0      	blx	r4
		if (return_code	!= ATCA_SUCCESS) break;
     e18:	2800      	cmp	r0, #0
     e1a:	d000      	beq.n	e1e <authenticate_client_consumtion_counting+0xd6>
     e1c:	e0ef      	b.n	ffe <authenticate_client_consumtion_counting+0x2b6>
		config_zone_offset = 3;
		config_index += ATCA_WORD_SIZE;
		return_code = atcab_read_zone(ATCA_ZONE_CONFIG, 0, config_zone_block, config_zone_offset, &client_auth_consumption_count.last_key_used[config_index], ATCA_WORD_SIZE);
     e1e:	2304      	movs	r3, #4
     e20:	9301      	str	r3, [sp, #4]
     e22:	4b9d      	ldr	r3, [pc, #628]	; (1098 <authenticate_client_consumtion_counting+0x350>)
     e24:	3386      	adds	r3, #134	; 0x86
     e26:	9300      	str	r3, [sp, #0]
     e28:	2303      	movs	r3, #3
     e2a:	2202      	movs	r2, #2
     e2c:	2100      	movs	r1, #0
     e2e:	4ca4      	ldr	r4, [pc, #656]	; (10c0 <authenticate_client_consumtion_counting+0x378>)
     e30:	47a0      	blx	r4
		if (return_code	!= ATCA_SUCCESS) break;
     e32:	2800      	cmp	r0, #0
     e34:	d000      	beq.n	e38 <authenticate_client_consumtion_counting+0xf0>
     e36:	e0e2      	b.n	ffe <authenticate_client_consumtion_counting+0x2b6>
		config_zone_offset = 4;
		config_index += ATCA_WORD_SIZE;
		return_code = atcab_read_zone(ATCA_ZONE_CONFIG, 0, config_zone_block, config_zone_offset, &client_auth_consumption_count.last_key_used[config_index], ATCA_WORD_SIZE);
     e38:	2304      	movs	r3, #4
     e3a:	9301      	str	r3, [sp, #4]
     e3c:	4b96      	ldr	r3, [pc, #600]	; (1098 <authenticate_client_consumtion_counting+0x350>)
     e3e:	338a      	adds	r3, #138	; 0x8a
     e40:	9300      	str	r3, [sp, #0]
     e42:	2304      	movs	r3, #4
     e44:	2202      	movs	r2, #2
     e46:	2100      	movs	r1, #0
     e48:	4c9d      	ldr	r4, [pc, #628]	; (10c0 <authenticate_client_consumtion_counting+0x378>)
     e4a:	47a0      	blx	r4
		if (return_code	!= ATCA_SUCCESS) break;
     e4c:	2800      	cmp	r0, #0
     e4e:	d000      	beq.n	e52 <authenticate_client_consumtion_counting+0x10a>
     e50:	e0d5      	b.n	ffe <authenticate_client_consumtion_counting+0x2b6>
		config_zone_offset = 5;
		
		disp_size = sizeof(disp_str);
     e52:	4b8b      	ldr	r3, [pc, #556]	; (1080 <authenticate_client_consumtion_counting+0x338>)
     e54:	9302      	str	r3, [sp, #8]
		atcab_bin2hex( client_auth_consumption_count.last_key_used,sizeof(client_auth_consumption_count.last_key_used), disp_str, &disp_size);
     e56:	4d90      	ldr	r5, [pc, #576]	; (1098 <authenticate_client_consumtion_counting+0x350>)
     e58:	0028      	movs	r0, r5
     e5a:	307e      	adds	r0, #126	; 0x7e
     e5c:	ab02      	add	r3, sp, #8
     e5e:	aa03      	add	r2, sp, #12
     e60:	2110      	movs	r1, #16
     e62:	4c8f      	ldr	r4, [pc, #572]	; (10a0 <authenticate_client_consumtion_counting+0x358>)
     e64:	47a0      	blx	r4
		printf("CLIENT: Reading Last Key Used, This is the main counter. Top count is 128\r\n");
     e66:	4898      	ldr	r0, [pc, #608]	; (10c8 <authenticate_client_consumtion_counting+0x380>)
     e68:	4c89      	ldr	r4, [pc, #548]	; (1090 <authenticate_client_consumtion_counting+0x348>)
     e6a:	47a0      	blx	r4
		printf("CLIENT: This chaining technique will allow the counter to reach 128x8. Top is 1024\r\n");
     e6c:	4897      	ldr	r0, [pc, #604]	; (10cc <authenticate_client_consumtion_counting+0x384>)
     e6e:	47a0      	blx	r4
		printf("%s\r\n", disp_str);
     e70:	a903      	add	r1, sp, #12
     e72:	4897      	ldr	r0, [pc, #604]	; (10d0 <authenticate_client_consumtion_counting+0x388>)
     e74:	4b8c      	ldr	r3, [pc, #560]	; (10a8 <authenticate_client_consumtion_counting+0x360>)
     e76:	4798      	blx	r3
		printf("\r\n");
     e78:	488c      	ldr	r0, [pc, #560]	; (10ac <authenticate_client_consumtion_counting+0x364>)
     e7a:	47a0      	blx	r4
		
		/*CHECING COUNT FLAG, IF ITS ZERO, WE NEED TO ROLL*/
		if (client_auth_consumption_count.used_flag[2] == 0x00)
     e7c:	237c      	movs	r3, #124	; 0x7c
     e7e:	5ceb      	ldrb	r3, [r5, r3]
     e80:	2b00      	cmp	r3, #0
     e82:	d125      	bne.n	ed0 <authenticate_client_consumtion_counting+0x188>
		{
			printf("Use Flag 1 = 0, performing DeriveKey cmd to roll\r\n");
     e84:	4893      	ldr	r0, [pc, #588]	; (10d4 <authenticate_client_consumtion_counting+0x38c>)
     e86:	4c82      	ldr	r4, [pc, #520]	; (1090 <authenticate_client_consumtion_counting+0x348>)
     e88:	47a0      	blx	r4
			printf("This process will reset the secondary counter to a value of 8 (0xFF)\r\n");
     e8a:	4893      	ldr	r0, [pc, #588]	; (10d8 <authenticate_client_consumtion_counting+0x390>)
     e8c:	47a0      	blx	r4
			printf("It will also decrement the main counter by 1\r\n");
     e8e:	4893      	ldr	r0, [pc, #588]	; (10dc <authenticate_client_consumtion_counting+0x394>)
     e90:	47a0      	blx	r4
			// Set the pad bytes
			memset(&client_auth_consumption_count.tempkey[0], 0x77, ATCA_BLOCK_SIZE);
     e92:	4c81      	ldr	r4, [pc, #516]	; (1098 <authenticate_client_consumtion_counting+0x350>)
     e94:	0025      	movs	r5, r4
     e96:	355a      	adds	r5, #90	; 0x5a
     e98:	2220      	movs	r2, #32
     e9a:	2177      	movs	r1, #119	; 0x77
     e9c:	0028      	movs	r0, r5
     e9e:	4b90      	ldr	r3, [pc, #576]	; (10e0 <authenticate_client_consumtion_counting+0x398>)
     ea0:	4798      	blx	r3
			// If successfully read, then copy
			memcpy(&client_auth_consumption_count.tempkey[0], &client_auth_consumption_count.dev_serial, ATCA_SERIAL_NUM_SIZE);
     ea2:	0021      	movs	r1, r4
     ea4:	3151      	adds	r1, #81	; 0x51
     ea6:	2209      	movs	r2, #9
     ea8:	0028      	movs	r0, r5
     eaa:	4b8e      	ldr	r3, [pc, #568]	; (10e4 <authenticate_client_consumtion_counting+0x39c>)
     eac:	4798      	blx	r3

			//Performing Nonce command
			return_code = atcab_nonce(client_auth_consumption_count.tempkey);
     eae:	0028      	movs	r0, r5
     eb0:	4b8d      	ldr	r3, [pc, #564]	; (10e8 <authenticate_client_consumtion_counting+0x3a0>)
     eb2:	4798      	blx	r3
			if (return_code != ATCA_SUCCESS)
     eb4:	2800      	cmp	r0, #0
     eb6:	d000      	beq.n	eba <authenticate_client_consumtion_counting+0x172>
     eb8:	e0b0      	b.n	101c <authenticate_client_consumtion_counting+0x2d4>
			{
				printf("Nonce Command failed\r\n");
				break;
			}else
			{
				printf("TempKey SourceFlag Set\r\n");
     eba:	488c      	ldr	r0, [pc, #560]	; (10ec <authenticate_client_consumtion_counting+0x3a4>)
     ebc:	4c74      	ldr	r4, [pc, #464]	; (1090 <authenticate_client_consumtion_counting+0x348>)
     ebe:	47a0      	blx	r4
				printf("\r\n");
     ec0:	487a      	ldr	r0, [pc, #488]	; (10ac <authenticate_client_consumtion_counting+0x364>)
     ec2:	47a0      	blx	r4
			}
			
			//Executing DeriveKey Command to Roll Counter back to 0xFF
			return_code = atcab_derive_key(CLIENT_DERIVE_KEY_SLOT_CONSUMTION_COUNTING, false, NULL);
     ec4:	2200      	movs	r2, #0
     ec6:	2100      	movs	r1, #0
     ec8:	2007      	movs	r0, #7
     eca:	4b89      	ldr	r3, [pc, #548]	; (10f0 <authenticate_client_consumtion_counting+0x3a8>)
     ecc:	4798      	blx	r3
			asm("nop");
     ece:	46c0      	nop			; (mov r8, r8)
		}
		
		
		/*CLIENT GENERATE MAC (SHA 256 HASH) ON CLIENT USING DERIVED KEY IN SLOT 1 AND CHALANGE (RANDOM NUMBER)*/
		/*CLIENT CALCULATE MAC FROM DERIVED KEY IN SLOT 0x07 AND RANDOM CHALLANEGE FROM HOST*/
		return_code = atcab_mac( CLIENT_MODE_FOR_CAL_MAC, CLIENT_DERIVE_KEY_SLOT_CONSUMTION_COUNTING, client_auth_consumption_count.host_random, client_auth_consumption_count.sha_256_MAC );
     ed0:	4a71      	ldr	r2, [pc, #452]	; (1098 <authenticate_client_consumtion_counting+0x350>)
     ed2:	0013      	movs	r3, r2
     ed4:	3320      	adds	r3, #32
     ed6:	2107      	movs	r1, #7
     ed8:	2040      	movs	r0, #64	; 0x40
     eda:	4c86      	ldr	r4, [pc, #536]	; (10f4 <authenticate_client_consumtion_counting+0x3ac>)
     edc:	47a0      	blx	r4
		if (return_code	!= ATCA_SUCCESS)
     ede:	2800      	cmp	r0, #0
     ee0:	d100      	bne.n	ee4 <authenticate_client_consumtion_counting+0x19c>
     ee2:	e09f      	b.n	1024 <authenticate_client_consumtion_counting+0x2dc>
		{
			printf("MAC failed\r\n");
     ee4:	4884      	ldr	r0, [pc, #528]	; (10f8 <authenticate_client_consumtion_counting+0x3b0>)
     ee6:	4b6a      	ldr	r3, [pc, #424]	; (1090 <authenticate_client_consumtion_counting+0x348>)
     ee8:	4798      	blx	r3
			printf("CLIENT: Obtaining MAC for the consumption counting Diversified Key in Slot 7:\n\r\n%s\r\n", disp_str);
			printf("\r\n");
		}

		///*CLIENT Read Serial Number*/
		return_code = atcab_read_serial_number(client_auth_consumption_count.dev_serial);
     eea:	486b      	ldr	r0, [pc, #428]	; (1098 <authenticate_client_consumtion_counting+0x350>)
     eec:	3051      	adds	r0, #81	; 0x51
     eee:	4b83      	ldr	r3, [pc, #524]	; (10fc <authenticate_client_consumtion_counting+0x3b4>)
     ef0:	4798      	blx	r3
		if (return_code != ATCA_SUCCESS)
     ef2:	2800      	cmp	r0, #0
     ef4:	d000      	beq.n	ef8 <authenticate_client_consumtion_counting+0x1b0>
     ef6:	e0a6      	b.n	1046 <authenticate_client_consumtion_counting+0x2fe>
		{
			printf("Read Serial Number failed\r\n");
			break;
		}else
		{
			disp_size = sizeof(disp_str);
     ef8:	4b61      	ldr	r3, [pc, #388]	; (1080 <authenticate_client_consumtion_counting+0x338>)
     efa:	9302      	str	r3, [sp, #8]
			atcab_bin2hex( client_auth_consumption_count.dev_serial,sizeof(client_auth_consumption_count.dev_serial), disp_str, &disp_size);
     efc:	ab02      	add	r3, sp, #8
     efe:	aa03      	add	r2, sp, #12
     f00:	2109      	movs	r1, #9
     f02:	4865      	ldr	r0, [pc, #404]	; (1098 <authenticate_client_consumtion_counting+0x350>)
     f04:	3051      	adds	r0, #81	; 0x51
     f06:	4c66      	ldr	r4, [pc, #408]	; (10a0 <authenticate_client_consumtion_counting+0x358>)
     f08:	47a0      	blx	r4
			printf("CLIENT: Reading Client Serial Number:\n\r\n%s\r\n", disp_str);
     f0a:	a903      	add	r1, sp, #12
     f0c:	487c      	ldr	r0, [pc, #496]	; (1100 <authenticate_client_consumtion_counting+0x3b8>)
     f0e:	4c66      	ldr	r4, [pc, #408]	; (10a8 <authenticate_client_consumtion_counting+0x360>)
     f10:	47a0      	blx	r4
			printf("Sending to HOST");
     f12:	487c      	ldr	r0, [pc, #496]	; (1104 <authenticate_client_consumtion_counting+0x3bc>)
     f14:	47a0      	blx	r4
			printf("\r\n");
     f16:	4865      	ldr	r0, [pc, #404]	; (10ac <authenticate_client_consumtion_counting+0x364>)
     f18:	4b5d      	ldr	r3, [pc, #372]	; (1090 <authenticate_client_consumtion_counting+0x348>)
     f1a:	4798      	blx	r3
		}
		
		
		///*Set HOST I2C address*/
		cfg_sha204a_i2c_default.atcai2c.slave_address = DERIVED_KEY_HOST_I2C_ADDR;
     f1c:	4859      	ldr	r0, [pc, #356]	; (1084 <authenticate_client_consumtion_counting+0x33c>)
     f1e:	23ce      	movs	r3, #206	; 0xce
     f20:	7103      	strb	r3, [r0, #4]
		return_code = atcab_init( &cfg_sha204a_i2c_default );
     f22:	4b59      	ldr	r3, [pc, #356]	; (1088 <authenticate_client_consumtion_counting+0x340>)
     f24:	4798      	blx	r3
		if (return_code != ATCA_SUCCESS)
     f26:	2800      	cmp	r0, #0
     f28:	d000      	beq.n	f2c <authenticate_client_consumtion_counting+0x1e4>
     f2a:	e090      	b.n	104e <authenticate_client_consumtion_counting+0x306>
		{
			printf("Not Communicating check I2C address\r\n");
			break;
		}else
		{
			printf("HOST \r\n");
     f2c:	4857      	ldr	r0, [pc, #348]	; (108c <authenticate_client_consumtion_counting+0x344>)
     f2e:	4c58      	ldr	r4, [pc, #352]	; (1090 <authenticate_client_consumtion_counting+0x348>)
     f30:	47a0      	blx	r4
			printf("Set HOST I2C address\r\n");
     f32:	4858      	ldr	r0, [pc, #352]	; (1094 <authenticate_client_consumtion_counting+0x34c>)
     f34:	47a0      	blx	r4
			printf("\r\n");
     f36:	4f5d      	ldr	r7, [pc, #372]	; (10ac <authenticate_client_consumtion_counting+0x364>)
     f38:	0038      	movs	r0, r7
     f3a:	47a0      	blx	r4
		}
		
		///*HOST PAD SERIAL NUMBER-> SERIAL + PAD OF 7's TO FORM A 32BYTE TEMP KEY*/
		// Set the pad bytes
		memset(&client_auth_consumption_count.tempkey[0], 0x77, ATCA_BLOCK_SIZE);
     f3c:	4e56      	ldr	r6, [pc, #344]	; (1098 <authenticate_client_consumtion_counting+0x350>)
     f3e:	0035      	movs	r5, r6
     f40:	355a      	adds	r5, #90	; 0x5a
     f42:	2220      	movs	r2, #32
     f44:	2177      	movs	r1, #119	; 0x77
     f46:	0028      	movs	r0, r5
     f48:	4b65      	ldr	r3, [pc, #404]	; (10e0 <authenticate_client_consumtion_counting+0x398>)
     f4a:	4798      	blx	r3
		// If successfully read, then copy
		memcpy(&client_auth_consumption_count.tempkey[0], &client_auth_consumption_count.dev_serial, ATCA_SERIAL_NUM_SIZE);
     f4c:	0031      	movs	r1, r6
     f4e:	3151      	adds	r1, #81	; 0x51
     f50:	2209      	movs	r2, #9
     f52:	0028      	movs	r0, r5
     f54:	4b63      	ldr	r3, [pc, #396]	; (10e4 <authenticate_client_consumtion_counting+0x39c>)
     f56:	4798      	blx	r3
		
		disp_size = sizeof(disp_str);
     f58:	4b49      	ldr	r3, [pc, #292]	; (1080 <authenticate_client_consumtion_counting+0x338>)
     f5a:	9302      	str	r3, [sp, #8]
		atcab_bin2hex( client_auth_consumption_count.tempkey,sizeof(client_auth_consumption_count.tempkey), disp_str, &disp_size);
     f5c:	ab02      	add	r3, sp, #8
     f5e:	aa03      	add	r2, sp, #12
     f60:	2120      	movs	r1, #32
     f62:	0028      	movs	r0, r5
     f64:	4e4e      	ldr	r6, [pc, #312]	; (10a0 <authenticate_client_consumtion_counting+0x358>)
     f66:	47b0      	blx	r6
		printf("HOST: Padding Serial Number from CLIENT with 0x77:\n\r\n%s\r\n", disp_str);
     f68:	a903      	add	r1, sp, #12
     f6a:	4867      	ldr	r0, [pc, #412]	; (1108 <authenticate_client_consumtion_counting+0x3c0>)
     f6c:	4b4e      	ldr	r3, [pc, #312]	; (10a8 <authenticate_client_consumtion_counting+0x360>)
     f6e:	4798      	blx	r3
		printf("\r\n");
     f70:	0038      	movs	r0, r7
     f72:	47a0      	blx	r4

		printf("HOST:Performing Pass Though Nonce Command, This will place the padded Client serial number in TempKey\r\n");
     f74:	4865      	ldr	r0, [pc, #404]	; (110c <authenticate_client_consumtion_counting+0x3c4>)
     f76:	47a0      	blx	r4
		return_code = atcab_nonce(client_auth_consumption_count.tempkey);
     f78:	0028      	movs	r0, r5
     f7a:	4b5b      	ldr	r3, [pc, #364]	; (10e8 <authenticate_client_consumtion_counting+0x3a0>)
     f7c:	4798      	blx	r3
		if (return_code != ATCA_SUCCESS)
     f7e:	2800      	cmp	r0, #0
     f80:	d169      	bne.n	1056 <authenticate_client_consumtion_counting+0x30e>
		{
			printf("Nonce Command failed\r\n");
			break;
		}else
		{
			printf("TempKey SourceFlag Set\r\n");
     f82:	485a      	ldr	r0, [pc, #360]	; (10ec <authenticate_client_consumtion_counting+0x3a4>)
     f84:	4c42      	ldr	r4, [pc, #264]	; (1090 <authenticate_client_consumtion_counting+0x348>)
     f86:	47a0      	blx	r4
			printf("\r\n");
     f88:	4848      	ldr	r0, [pc, #288]	; (10ac <authenticate_client_consumtion_counting+0x364>)
     f8a:	47a0      	blx	r4
		}
		
		printf("HOST:Performing GenDig Command to Initialize\rInternal TempKey slot with the Diversified Key\r\n");
     f8c:	4860      	ldr	r0, [pc, #384]	; (1110 <authenticate_client_consumtion_counting+0x3c8>)
     f8e:	47a0      	blx	r4
		return_code = atcab_gendig(DATA_ZONE, HOST_ROOT_KEY_SLOT_CONSUMTION_COUNTING, client_auth_consumption_count.gen_dig_other_data, sizeof(client_auth_consumption_count.gen_dig_other_data));
     f90:	2304      	movs	r3, #4
     f92:	4a41      	ldr	r2, [pc, #260]	; (1098 <authenticate_client_consumtion_counting+0x350>)
     f94:	3240      	adds	r2, #64	; 0x40
     f96:	210f      	movs	r1, #15
     f98:	2002      	movs	r0, #2
     f9a:	4c5e      	ldr	r4, [pc, #376]	; (1114 <authenticate_client_consumtion_counting+0x3cc>)
     f9c:	47a0      	blx	r4
		if (return_code != ATCA_SUCCESS)
     f9e:	2800      	cmp	r0, #0
     fa0:	d15d      	bne.n	105e <authenticate_client_consumtion_counting+0x316>
		{
			printf("GenDig Command failed\r\n");
			break;
		}else
		{
			printf("GenDig Command executed\r\n");
     fa2:	485d      	ldr	r0, [pc, #372]	; (1118 <authenticate_client_consumtion_counting+0x3d0>)
     fa4:	4d3a      	ldr	r5, [pc, #232]	; (1090 <authenticate_client_consumtion_counting+0x348>)
     fa6:	47a8      	blx	r5
			printf("\r\n");
     fa8:	4840      	ldr	r0, [pc, #256]	; (10ac <authenticate_client_consumtion_counting+0x364>)
     faa:	47a8      	blx	r5
		
		uint8_t client_mode_for_mac = CLIENT_MODE_FOR_CAL_MAC;
		uint16_t client_slot_id_for_mac = (uint16_t)CLIENT_DERIVE_KEY_SLOT_CONSUMTION_COUNTING;
		/*Formatting CHECKMAC other data with Opcode and CLIENT serial Number as described in data sheet*/

		memcpy(&client_auth_consumption_count.checkmac_other_data[1], &client_mode_for_mac, 1);				//Client Mode used for MAC
     fac:	4c3a      	ldr	r4, [pc, #232]	; (1098 <authenticate_client_consumtion_counting+0x350>)
     fae:	2240      	movs	r2, #64	; 0x40
     fb0:	2345      	movs	r3, #69	; 0x45
     fb2:	54e2      	strb	r2, [r4, r3]
		memcpy(&client_auth_consumption_count.checkmac_other_data[2], &client_slot_id_for_mac, 2);			//Client Slot ID used for MAC
     fb4:	2607      	movs	r6, #7
     fb6:	3301      	adds	r3, #1
     fb8:	52e6      	strh	r6, [r4, r3]
		memcpy(&client_auth_consumption_count.checkmac_other_data[7], &client_auth_consumption_count.dev_serial[4], 4);			//Client Serial number (4:7)
     fba:	0020      	movs	r0, r4
     fbc:	304b      	adds	r0, #75	; 0x4b
     fbe:	0021      	movs	r1, r4
     fc0:	3155      	adds	r1, #85	; 0x55
     fc2:	3a3c      	subs	r2, #60	; 0x3c
     fc4:	4f47      	ldr	r7, [pc, #284]	; (10e4 <authenticate_client_consumtion_counting+0x39c>)
     fc6:	47b8      	blx	r7
		memcpy(&client_auth_consumption_count.checkmac_other_data[11], &client_auth_consumption_count.dev_serial[2], 2);		//Client Serial number (2:3)
     fc8:	0020      	movs	r0, r4
     fca:	304f      	adds	r0, #79	; 0x4f
     fcc:	0021      	movs	r1, r4
     fce:	3153      	adds	r1, #83	; 0x53
     fd0:	2202      	movs	r2, #2
     fd2:	47b8      	blx	r7

		printf("HOST: Performing CheckMAC using Random Challenge and Derive Key computed internally by HOST\r\n");
     fd4:	4851      	ldr	r0, [pc, #324]	; (111c <authenticate_client_consumtion_counting+0x3d4>)
     fd6:	47a8      	blx	r5
		return_code = atcab_checkmac( HOST_CHECK_MACK_MODE, CLIENT_DERIVE_KEY_SLOT_CONSUMTION_COUNTING, 
     fd8:	0023      	movs	r3, r4
     fda:	3320      	adds	r3, #32
     fdc:	0022      	movs	r2, r4
     fde:	3244      	adds	r2, #68	; 0x44
     fe0:	9200      	str	r2, [sp, #0]
     fe2:	0022      	movs	r2, r4
     fe4:	0031      	movs	r1, r6
     fe6:	2006      	movs	r0, #6
     fe8:	4c4d      	ldr	r4, [pc, #308]	; (1120 <authenticate_client_consumtion_counting+0x3d8>)
     fea:	47a0      	blx	r4
		client_auth_consumption_count.host_random, 
		client_auth_consumption_count.sha_256_MAC, 
		client_auth_consumption_count.checkmac_other_data);
		if (return_code != ATCA_SUCCESS)
     fec:	2800      	cmp	r0, #0
     fee:	d03a      	beq.n	1066 <authenticate_client_consumtion_counting+0x31e>
		{
			printf("CLIENT IS NOT AUTHENTIC\r\n");
     ff0:	484c      	ldr	r0, [pc, #304]	; (1124 <authenticate_client_consumtion_counting+0x3dc>)
     ff2:	4b27      	ldr	r3, [pc, #156]	; (1090 <authenticate_client_consumtion_counting+0x348>)
     ff4:	4798      	blx	r3
			break;
     ff6:	e002      	b.n	ffe <authenticate_client_consumtion_counting+0x2b6>
			printf("Not Communicating check I2C address\r\n");
     ff8:	484b      	ldr	r0, [pc, #300]	; (1128 <authenticate_client_consumtion_counting+0x3e0>)
     ffa:	4b25      	ldr	r3, [pc, #148]	; (1090 <authenticate_client_consumtion_counting+0x348>)
     ffc:	4798      	blx	r3
			delay_ms(100);
			printf("CLIENT IS AUTHENTIC\r\n");
		}
		asm("nop");
	}while(0);
}
     ffe:	4b4b      	ldr	r3, [pc, #300]	; (112c <authenticate_client_consumtion_counting+0x3e4>)
    1000:	449d      	add	sp, r3
    1002:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("Random Number Generation failed\r\n");
    1004:	484a      	ldr	r0, [pc, #296]	; (1130 <authenticate_client_consumtion_counting+0x3e8>)
    1006:	4b22      	ldr	r3, [pc, #136]	; (1090 <authenticate_client_consumtion_counting+0x348>)
    1008:	4798      	blx	r3
			break;
    100a:	e7f8      	b.n	ffe <authenticate_client_consumtion_counting+0x2b6>
			printf("Not Communicating check I2C address\r\n");
    100c:	4846      	ldr	r0, [pc, #280]	; (1128 <authenticate_client_consumtion_counting+0x3e0>)
    100e:	4b20      	ldr	r3, [pc, #128]	; (1090 <authenticate_client_consumtion_counting+0x348>)
    1010:	4798      	blx	r3
			break;
    1012:	e7f4      	b.n	ffe <authenticate_client_consumtion_counting+0x2b6>
			printf("Reading UseFlag counter failed\r\n");
    1014:	4847      	ldr	r0, [pc, #284]	; (1134 <authenticate_client_consumtion_counting+0x3ec>)
    1016:	4b1e      	ldr	r3, [pc, #120]	; (1090 <authenticate_client_consumtion_counting+0x348>)
    1018:	4798      	blx	r3
			break;
    101a:	e7f0      	b.n	ffe <authenticate_client_consumtion_counting+0x2b6>
				printf("Nonce Command failed\r\n");
    101c:	4846      	ldr	r0, [pc, #280]	; (1138 <authenticate_client_consumtion_counting+0x3f0>)
    101e:	4b1c      	ldr	r3, [pc, #112]	; (1090 <authenticate_client_consumtion_counting+0x348>)
    1020:	4798      	blx	r3
				break;
    1022:	e7ec      	b.n	ffe <authenticate_client_consumtion_counting+0x2b6>
			disp_size = sizeof(disp_str);
    1024:	4b16      	ldr	r3, [pc, #88]	; (1080 <authenticate_client_consumtion_counting+0x338>)
    1026:	9302      	str	r3, [sp, #8]
			atcab_bin2hex( client_auth_consumption_count.sha_256_MAC,sizeof(client_auth_consumption_count.sha_256_MAC), disp_str, &disp_size);
    1028:	ab02      	add	r3, sp, #8
    102a:	aa03      	add	r2, sp, #12
    102c:	2120      	movs	r1, #32
    102e:	481a      	ldr	r0, [pc, #104]	; (1098 <authenticate_client_consumtion_counting+0x350>)
    1030:	3020      	adds	r0, #32
    1032:	4c1b      	ldr	r4, [pc, #108]	; (10a0 <authenticate_client_consumtion_counting+0x358>)
    1034:	47a0      	blx	r4
			printf("CLIENT: Obtaining MAC for the consumption counting Diversified Key in Slot 7:\n\r\n%s\r\n", disp_str);
    1036:	a903      	add	r1, sp, #12
    1038:	4840      	ldr	r0, [pc, #256]	; (113c <authenticate_client_consumtion_counting+0x3f4>)
    103a:	4b1b      	ldr	r3, [pc, #108]	; (10a8 <authenticate_client_consumtion_counting+0x360>)
    103c:	4798      	blx	r3
			printf("\r\n");
    103e:	481b      	ldr	r0, [pc, #108]	; (10ac <authenticate_client_consumtion_counting+0x364>)
    1040:	4b13      	ldr	r3, [pc, #76]	; (1090 <authenticate_client_consumtion_counting+0x348>)
    1042:	4798      	blx	r3
    1044:	e751      	b.n	eea <authenticate_client_consumtion_counting+0x1a2>
			printf("Read Serial Number failed\r\n");
    1046:	483e      	ldr	r0, [pc, #248]	; (1140 <authenticate_client_consumtion_counting+0x3f8>)
    1048:	4b11      	ldr	r3, [pc, #68]	; (1090 <authenticate_client_consumtion_counting+0x348>)
    104a:	4798      	blx	r3
			break;
    104c:	e7d7      	b.n	ffe <authenticate_client_consumtion_counting+0x2b6>
			printf("Not Communicating check I2C address\r\n");
    104e:	4836      	ldr	r0, [pc, #216]	; (1128 <authenticate_client_consumtion_counting+0x3e0>)
    1050:	4b0f      	ldr	r3, [pc, #60]	; (1090 <authenticate_client_consumtion_counting+0x348>)
    1052:	4798      	blx	r3
			break;
    1054:	e7d3      	b.n	ffe <authenticate_client_consumtion_counting+0x2b6>
			printf("Nonce Command failed\r\n");
    1056:	4838      	ldr	r0, [pc, #224]	; (1138 <authenticate_client_consumtion_counting+0x3f0>)
    1058:	4b0d      	ldr	r3, [pc, #52]	; (1090 <authenticate_client_consumtion_counting+0x348>)
    105a:	4798      	blx	r3
			break;
    105c:	e7cf      	b.n	ffe <authenticate_client_consumtion_counting+0x2b6>
			printf("GenDig Command failed\r\n");
    105e:	4839      	ldr	r0, [pc, #228]	; (1144 <authenticate_client_consumtion_counting+0x3fc>)
    1060:	4b0b      	ldr	r3, [pc, #44]	; (1090 <authenticate_client_consumtion_counting+0x348>)
    1062:	4798      	blx	r3
			break;
    1064:	e7cb      	b.n	ffe <authenticate_client_consumtion_counting+0x2b6>
			printf("\r\n");
    1066:	4811      	ldr	r0, [pc, #68]	; (10ac <authenticate_client_consumtion_counting+0x364>)
    1068:	4c09      	ldr	r4, [pc, #36]	; (1090 <authenticate_client_consumtion_counting+0x348>)
    106a:	47a0      	blx	r4
			delay_ms(100);
    106c:	2064      	movs	r0, #100	; 0x64
    106e:	4b36      	ldr	r3, [pc, #216]	; (1148 <authenticate_client_consumtion_counting+0x400>)
    1070:	4798      	blx	r3
			printf("CLIENT IS AUTHENTIC\r\n");
    1072:	4836      	ldr	r0, [pc, #216]	; (114c <authenticate_client_consumtion_counting+0x404>)
    1074:	47a0      	blx	r4
		asm("nop");
    1076:	46c0      	nop			; (mov r8, r8)
}
    1078:	e7c1      	b.n	ffe <authenticate_client_consumtion_counting+0x2b6>
    107a:	46c0      	nop			; (mov r8, r8)
    107c:	fffffa14 	.word	0xfffffa14
    1080:	000005dc 	.word	0x000005dc
    1084:	20000380 	.word	0x20000380
    1088:	00001ebd 	.word	0x00001ebd
    108c:	00007d74 	.word	0x00007d74
    1090:	00006af1 	.word	0x00006af1
    1094:	00007d7c 	.word	0x00007d7c
    1098:	20000090 	.word	0x20000090
    109c:	000020d5 	.word	0x000020d5
    10a0:	00002e55 	.word	0x00002e55
    10a4:	00007db8 	.word	0x00007db8
    10a8:	000069d5 	.word	0x000069d5
    10ac:	0000888c 	.word	0x0000888c
    10b0:	00007dec 	.word	0x00007dec
    10b4:	00007df4 	.word	0x00007df4
    10b8:	000080a8 	.word	0x000080a8
    10bc:	000080cc 	.word	0x000080cc
    10c0:	000024c1 	.word	0x000024c1
    10c4:	0000812c 	.word	0x0000812c
    10c8:	00008154 	.word	0x00008154
    10cc:	000081a0 	.word	0x000081a0
    10d0:	00008308 	.word	0x00008308
    10d4:	000081f4 	.word	0x000081f4
    10d8:	00008228 	.word	0x00008228
    10dc:	00008270 	.word	0x00008270
    10e0:	00006875 	.word	0x00006875
    10e4:	0000683f 	.word	0x0000683f
    10e8:	00002281 	.word	0x00002281
    10ec:	000082a0 	.word	0x000082a0
    10f0:	00002c75 	.word	0x00002c75
    10f4:	00002851 	.word	0x00002851
    10f8:	00007e48 	.word	0x00007e48
    10fc:	000025c5 	.word	0x000025c5
    1100:	00008310 	.word	0x00008310
    1104:	00008340 	.word	0x00008340
    1108:	00008350 	.word	0x00008350
    110c:	0000838c 	.word	0x0000838c
    1110:	000083f4 	.word	0x000083f4
    1114:	00002745 	.word	0x00002745
    1118:	00007ff8 	.word	0x00007ff8
    111c:	00008014 	.word	0x00008014
    1120:	00002929 	.word	0x00002929
    1124:	00008074 	.word	0x00008074
    1128:	00007d4c 	.word	0x00007d4c
    112c:	000005ec 	.word	0x000005ec
    1130:	00007d94 	.word	0x00007d94
    1134:	0000810c 	.word	0x0000810c
    1138:	00007f5c 	.word	0x00007f5c
    113c:	000082b8 	.word	0x000082b8
    1140:	00007e7c 	.word	0x00007e7c
    1144:	00007fe0 	.word	0x00007fe0
    1148:	00003801 	.word	0x00003801
    114c:	00008090 	.word	0x00008090

00001150 <host_write_data_zone>:
  atcab_sleep();
  return ret;
}

int host_write_data_zone(const uint8_t * data, uint16_t len)
{
    1150:	b5f0      	push	{r4, r5, r6, r7, lr}
    1152:	46d6      	mov	lr, sl
    1154:	464f      	mov	r7, r9
    1156:	4646      	mov	r6, r8
    1158:	b5c0      	push	{r6, r7, lr}
    115a:	b082      	sub	sp, #8
    115c:	4681      	mov	r9, r0
    115e:	468a      	mov	sl, r1
  uint8_t ret = ATCA_SUCCESS;
  int index = 0;
  uint8_t slot = 0;
    1160:	2400      	movs	r4, #0
  int index = 0;
    1162:	2500      	movs	r5, #0
  
  do
  {
    atcab_idle();
    1164:	4b0d      	ldr	r3, [pc, #52]	; (119c <host_write_data_zone+0x4c>)
    1166:	4698      	mov	r8, r3
	ret = atcab_write_bytes_zone(ATCA_ZONE_DATA, slot, 0, &data[index], 32);
    1168:	2720      	movs	r7, #32
    116a:	4e0d      	ldr	r6, [pc, #52]	; (11a0 <host_write_data_zone+0x50>)
    atcab_idle();
    116c:	47c0      	blx	r8
	ret = atcab_write_bytes_zone(ATCA_ZONE_DATA, slot, 0, &data[index], 32);
    116e:	464b      	mov	r3, r9
    1170:	195b      	adds	r3, r3, r5
    1172:	b2a1      	uxth	r1, r4
    1174:	9700      	str	r7, [sp, #0]
    1176:	2200      	movs	r2, #0
    1178:	2002      	movs	r0, #2
    117a:	47b0      	blx	r6
    if (ret != ATCA_SUCCESS)
    117c:	2800      	cmp	r0, #0
    117e:	d105      	bne.n	118c <host_write_data_zone+0x3c>
    {
      asm("nop");
      break;
    }
    index += 32;
    1180:	3520      	adds	r5, #32
    slot++;
    1182:	3401      	adds	r4, #1
    1184:	b2e4      	uxtb	r4, r4
  } while (index < len);
    1186:	4555      	cmp	r5, sl
    1188:	dbf0      	blt.n	116c <host_write_data_zone+0x1c>
    118a:	e000      	b.n	118e <host_write_data_zone+0x3e>
      asm("nop");
    118c:	46c0      	nop			; (mov r8, r8)
  
  return ret;
}
    118e:	b002      	add	sp, #8
    1190:	bc1c      	pop	{r2, r3, r4}
    1192:	4690      	mov	r8, r2
    1194:	4699      	mov	r9, r3
    1196:	46a2      	mov	sl, r4
    1198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	00001f49 	.word	0x00001f49
    11a0:	00002af1 	.word	0x00002af1

000011a4 <host_provision>:
{
    11a4:	b530      	push	{r4, r5, lr}
    11a6:	4c45      	ldr	r4, [pc, #276]	; (12bc <host_provision+0x118>)
    11a8:	44a5      	add	sp, r4
  bool lockstate = 0;
    11aa:	2300      	movs	r3, #0
    11ac:	4a44      	ldr	r2, [pc, #272]	; (12c0 <host_provision+0x11c>)
    11ae:	446a      	add	r2, sp
    11b0:	7013      	strb	r3, [r2, #0]
  int disp_size = sizeof(disp_str);
    11b2:	4a44      	ldr	r2, [pc, #272]	; (12c4 <host_provision+0x120>)
    11b4:	9201      	str	r2, [sp, #4]
  uint8_t ecc508_info[4] = {};
    11b6:	9300      	str	r3, [sp, #0]
  cfg_sha204a_i2c_default.atcai2c.slave_address = DERIVED_KEY_HOST_I2C_ADDR;
    11b8:	4843      	ldr	r0, [pc, #268]	; (12c8 <host_provision+0x124>)
    11ba:	33ce      	adds	r3, #206	; 0xce
    11bc:	7103      	strb	r3, [r0, #4]
  ret = atcab_init( &cfg_sha204a_i2c_default );
    11be:	4b43      	ldr	r3, [pc, #268]	; (12cc <host_provision+0x128>)
    11c0:	4798      	blx	r3
    11c2:	4c43      	ldr	r4, [pc, #268]	; (12d0 <host_provision+0x12c>)
    11c4:	6020      	str	r0, [r4, #0]
  ret = atcab_info(ecc508_info);
    11c6:	4668      	mov	r0, sp
    11c8:	4b42      	ldr	r3, [pc, #264]	; (12d4 <host_provision+0x130>)
    11ca:	4798      	blx	r3
    11cc:	6020      	str	r0, [r4, #0]
  if (ret != ATCA_SUCCESS)
    11ce:	2800      	cmp	r0, #0
    11d0:	d118      	bne.n	1204 <host_provision+0x60>
  ret = atcab_is_locked(LOCK_ZONE_CONFIG, &lockstate);
    11d2:	493b      	ldr	r1, [pc, #236]	; (12c0 <host_provision+0x11c>)
    11d4:	4469      	add	r1, sp
    11d6:	2000      	movs	r0, #0
    11d8:	4b3f      	ldr	r3, [pc, #252]	; (12d8 <host_provision+0x134>)
    11da:	4798      	blx	r3
    11dc:	1e03      	subs	r3, r0, #0
    11de:	4a3c      	ldr	r2, [pc, #240]	; (12d0 <host_provision+0x12c>)
    11e0:	6010      	str	r0, [r2, #0]
  if (ret != ATCA_SUCCESS) return ret;
    11e2:	d10b      	bne.n	11fc <host_provision+0x58>
  if (!lockstate)
    11e4:	4b36      	ldr	r3, [pc, #216]	; (12c0 <host_provision+0x11c>)
    11e6:	446b      	add	r3, sp
    11e8:	781b      	ldrb	r3, [r3, #0]
    11ea:	2b00      	cmp	r3, #0
    11ec:	d127      	bne.n	123e <host_provision+0x9a>
    ret = atcab_write_sha_config_zone(host_config_zone);
    11ee:	483b      	ldr	r0, [pc, #236]	; (12dc <host_provision+0x138>)
    11f0:	4b3b      	ldr	r3, [pc, #236]	; (12e0 <host_provision+0x13c>)
    11f2:	4798      	blx	r3
    11f4:	1e03      	subs	r3, r0, #0
    11f6:	4a36      	ldr	r2, [pc, #216]	; (12d0 <host_provision+0x12c>)
    11f8:	6010      	str	r0, [r2, #0]
    if (ret != ATCA_SUCCESS) return ret;
    11fa:	d00b      	beq.n	1214 <host_provision+0x70>
}
    11fc:	0018      	movs	r0, r3
    11fe:	4b39      	ldr	r3, [pc, #228]	; (12e4 <host_provision+0x140>)
    1200:	449d      	add	sp, r3
    1202:	bd30      	pop	{r4, r5, pc}
	  cfg_sha204a_i2c_default.atcai2c.slave_address = ATSHA204_FACTORY_I2C_ADDR;
    1204:	4830      	ldr	r0, [pc, #192]	; (12c8 <host_provision+0x124>)
    1206:	23c8      	movs	r3, #200	; 0xc8
    1208:	7103      	strb	r3, [r0, #4]
	  ret = atcab_init( &cfg_sha204a_i2c_default );
    120a:	4b30      	ldr	r3, [pc, #192]	; (12cc <host_provision+0x128>)
    120c:	4798      	blx	r3
    120e:	4b30      	ldr	r3, [pc, #192]	; (12d0 <host_provision+0x12c>)
    1210:	6018      	str	r0, [r3, #0]
    1212:	e7de      	b.n	11d2 <host_provision+0x2e>
      disp_size = sizeof(disp_str);
    1214:	4b2b      	ldr	r3, [pc, #172]	; (12c4 <host_provision+0x120>)
    1216:	9301      	str	r3, [sp, #4]
      atcab_bin2hex(host_config_zone, sizeof(host_config_zone), disp_str, &disp_size);
    1218:	ab01      	add	r3, sp, #4
    121a:	aa02      	add	r2, sp, #8
    121c:	2158      	movs	r1, #88	; 0x58
    121e:	482f      	ldr	r0, [pc, #188]	; (12dc <host_provision+0x138>)
    1220:	4c31      	ldr	r4, [pc, #196]	; (12e8 <host_provision+0x144>)
    1222:	47a0      	blx	r4
      printf("Writing SHA204 Configuration Zone:\r\n%s\r\n", disp_str);
    1224:	a902      	add	r1, sp, #8
    1226:	4831      	ldr	r0, [pc, #196]	; (12ec <host_provision+0x148>)
    1228:	4b31      	ldr	r3, [pc, #196]	; (12f0 <host_provision+0x14c>)
    122a:	4798      	blx	r3
    ret = atcab_lock_config_zone(&lock_response);
    122c:	4831      	ldr	r0, [pc, #196]	; (12f4 <host_provision+0x150>)
    122e:	4468      	add	r0, sp
    1230:	4b31      	ldr	r3, [pc, #196]	; (12f8 <host_provision+0x154>)
    1232:	4798      	blx	r3
    1234:	1e03      	subs	r3, r0, #0
    1236:	4a26      	ldr	r2, [pc, #152]	; (12d0 <host_provision+0x12c>)
    1238:	6010      	str	r0, [r2, #0]
    if (ret != ATCA_SUCCESS) return ret;
    123a:	d003      	beq.n	1244 <host_provision+0xa0>
    123c:	e7de      	b.n	11fc <host_provision+0x58>
    printf("\n\rConfiguratioin Zone Locked\n");
    123e:	482f      	ldr	r0, [pc, #188]	; (12fc <host_provision+0x158>)
    1240:	4b2f      	ldr	r3, [pc, #188]	; (1300 <host_provision+0x15c>)
    1242:	4798      	blx	r3
  atcab_sleep();
    1244:	4b2f      	ldr	r3, [pc, #188]	; (1304 <host_provision+0x160>)
    1246:	4798      	blx	r3
  ret = atcab_is_locked(LOCK_ZONE_DATA, &lockstate);
    1248:	491d      	ldr	r1, [pc, #116]	; (12c0 <host_provision+0x11c>)
    124a:	4469      	add	r1, sp
    124c:	2001      	movs	r0, #1
    124e:	4b22      	ldr	r3, [pc, #136]	; (12d8 <host_provision+0x134>)
    1250:	4798      	blx	r3
    1252:	1e03      	subs	r3, r0, #0
    1254:	4a1e      	ldr	r2, [pc, #120]	; (12d0 <host_provision+0x12c>)
    1256:	6010      	str	r0, [r2, #0]
  if (ret != ATCA_SUCCESS) return ret;
    1258:	d1d0      	bne.n	11fc <host_provision+0x58>
  if (!lockstate)
    125a:	4b19      	ldr	r3, [pc, #100]	; (12c0 <host_provision+0x11c>)
    125c:	446b      	add	r3, sp
    125e:	781b      	ldrb	r3, [r3, #0]
    1260:	2b00      	cmp	r3, #0
    1262:	d123      	bne.n	12ac <host_provision+0x108>
    ret = host_write_data_zone(host_data_zone, sizeof(host_data_zone));
    1264:	2180      	movs	r1, #128	; 0x80
    1266:	0089      	lsls	r1, r1, #2
    1268:	4827      	ldr	r0, [pc, #156]	; (1308 <host_provision+0x164>)
    126a:	4b28      	ldr	r3, [pc, #160]	; (130c <host_provision+0x168>)
    126c:	4798      	blx	r3
    126e:	1e03      	subs	r3, r0, #0
    1270:	4a17      	ldr	r2, [pc, #92]	; (12d0 <host_provision+0x12c>)
    1272:	6010      	str	r0, [r2, #0]
    if (ret != ATCA_SUCCESS) return ret;
    1274:	d1c2      	bne.n	11fc <host_provision+0x58>
      printf("\r\nTHESE KEY VALUES ARE SHOWN ONLY FOR DEMOSTRATION PURPOSES!");
    1276:	4826      	ldr	r0, [pc, #152]	; (1310 <host_provision+0x16c>)
    1278:	4c1d      	ldr	r4, [pc, #116]	; (12f0 <host_provision+0x14c>)
    127a:	47a0      	blx	r4
      printf("\r\nAND SHOULD BE KEPT SECRET!\r\n");
    127c:	4825      	ldr	r0, [pc, #148]	; (1314 <host_provision+0x170>)
    127e:	4b20      	ldr	r3, [pc, #128]	; (1300 <host_provision+0x15c>)
    1280:	4798      	blx	r3
      disp_size = sizeof(disp_str);
    1282:	4b10      	ldr	r3, [pc, #64]	; (12c4 <host_provision+0x120>)
    1284:	9301      	str	r3, [sp, #4]
      atcab_bin2hex(host_data_zone, sizeof(host_data_zone), disp_str, &disp_size);
    1286:	ab01      	add	r3, sp, #4
    1288:	aa02      	add	r2, sp, #8
    128a:	2180      	movs	r1, #128	; 0x80
    128c:	0089      	lsls	r1, r1, #2
    128e:	481e      	ldr	r0, [pc, #120]	; (1308 <host_provision+0x164>)
    1290:	4d15      	ldr	r5, [pc, #84]	; (12e8 <host_provision+0x144>)
    1292:	47a8      	blx	r5
      printf("Writing SHA204 Configuration Zone:\r\n%s\r\n", disp_str);
    1294:	a902      	add	r1, sp, #8
    1296:	4815      	ldr	r0, [pc, #84]	; (12ec <host_provision+0x148>)
    1298:	47a0      	blx	r4
    ret = atcab_lock_data_zone(&lock_response);
    129a:	4816      	ldr	r0, [pc, #88]	; (12f4 <host_provision+0x150>)
    129c:	4468      	add	r0, sp
    129e:	4b1e      	ldr	r3, [pc, #120]	; (1318 <host_provision+0x174>)
    12a0:	4798      	blx	r3
    12a2:	1e03      	subs	r3, r0, #0
    12a4:	4a0a      	ldr	r2, [pc, #40]	; (12d0 <host_provision+0x12c>)
    12a6:	6010      	str	r0, [r2, #0]
    if (ret != ATCA_SUCCESS) return ret;
    12a8:	d003      	beq.n	12b2 <host_provision+0x10e>
    12aa:	e7a7      	b.n	11fc <host_provision+0x58>
    printf("\n\rData Zone Locked\n\r");
    12ac:	481b      	ldr	r0, [pc, #108]	; (131c <host_provision+0x178>)
    12ae:	4b10      	ldr	r3, [pc, #64]	; (12f0 <host_provision+0x14c>)
    12b0:	4798      	blx	r3
  atcab_sleep();
    12b2:	4b14      	ldr	r3, [pc, #80]	; (1304 <host_provision+0x160>)
    12b4:	4798      	blx	r3
  return ret;
    12b6:	4b06      	ldr	r3, [pc, #24]	; (12d0 <host_provision+0x12c>)
    12b8:	681b      	ldr	r3, [r3, #0]
    12ba:	e79f      	b.n	11fc <host_provision+0x58>
    12bc:	fffff94c 	.word	0xfffff94c
    12c0:	000006af 	.word	0x000006af
    12c4:	000006a4 	.word	0x000006a4
    12c8:	20000380 	.word	0x20000380
    12cc:	00001ebd 	.word	0x00001ebd
    12d0:	20000494 	.word	0x20000494
    12d4:	00001f9d 	.word	0x00001f9d
    12d8:	0000260d 	.word	0x0000260d
    12dc:	0000858c 	.word	0x0000858c
    12e0:	00002c4d 	.word	0x00002c4d
    12e4:	000006b4 	.word	0x000006b4
    12e8:	00002e55 	.word	0x00002e55
    12ec:	000087e4 	.word	0x000087e4
    12f0:	000069d5 	.word	0x000069d5
    12f4:	000006ae 	.word	0x000006ae
    12f8:	00002715 	.word	0x00002715
    12fc:	00008810 	.word	0x00008810
    1300:	00006af1 	.word	0x00006af1
    1304:	00001f79 	.word	0x00001f79
    1308:	000085e4 	.word	0x000085e4
    130c:	00001151 	.word	0x00001151
    1310:	00008830 	.word	0x00008830
    1314:	00008870 	.word	0x00008870
    1318:	0000272d 	.word	0x0000272d
    131c:	00008890 	.word	0x00008890

00001320 <client_write_data_zone>:
	}
	return ret;
}

int client_write_data_zone(const uint8_t * data, uint16_t len)
{
    1320:	b5f0      	push	{r4, r5, r6, r7, lr}
    1322:	46d6      	mov	lr, sl
    1324:	464f      	mov	r7, r9
    1326:	4646      	mov	r6, r8
    1328:	b5c0      	push	{r6, r7, lr}
    132a:	b082      	sub	sp, #8
    132c:	4681      	mov	r9, r0
    132e:	468a      	mov	sl, r1
	int ret = ATCA_SUCCESS;
	int index = 0;
	uint8_t slot = 0;
    1330:	2400      	movs	r4, #0
	int index = 0;
    1332:	2500      	movs	r5, #0
	
	do
	{
		atcab_idle();
    1334:	4b0d      	ldr	r3, [pc, #52]	; (136c <client_write_data_zone+0x4c>)
    1336:	4698      	mov	r8, r3
		ret = atcab_write_bytes_zone(ATCA_ZONE_DATA, slot, 0, &data[index], 32);
    1338:	2720      	movs	r7, #32
    133a:	4e0d      	ldr	r6, [pc, #52]	; (1370 <client_write_data_zone+0x50>)
		atcab_idle();
    133c:	47c0      	blx	r8
		ret = atcab_write_bytes_zone(ATCA_ZONE_DATA, slot, 0, &data[index], 32);
    133e:	464b      	mov	r3, r9
    1340:	195b      	adds	r3, r3, r5
    1342:	b2a1      	uxth	r1, r4
    1344:	9700      	str	r7, [sp, #0]
    1346:	2200      	movs	r2, #0
    1348:	2002      	movs	r0, #2
    134a:	47b0      	blx	r6
		if (ret != ATCA_SUCCESS)
    134c:	2800      	cmp	r0, #0
    134e:	d105      	bne.n	135c <client_write_data_zone+0x3c>
		{
			asm("nop");
			break;
		}
		index += 32;
    1350:	3520      	adds	r5, #32
		slot++;
    1352:	3401      	adds	r4, #1
    1354:	b2e4      	uxtb	r4, r4
		
	} while (index < len);
    1356:	4555      	cmp	r5, sl
    1358:	dbf0      	blt.n	133c <client_write_data_zone+0x1c>
    135a:	e000      	b.n	135e <client_write_data_zone+0x3e>
			asm("nop");
    135c:	46c0      	nop			; (mov r8, r8)
	
	return ret;
}
    135e:	b002      	add	sp, #8
    1360:	bc1c      	pop	{r2, r3, r4}
    1362:	4690      	mov	r8, r2
    1364:	4699      	mov	r9, r3
    1366:	46a2      	mov	sl, r4
    1368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    136a:	46c0      	nop			; (mov r8, r8)
    136c:	00001f49 	.word	0x00001f49
    1370:	00002af1 	.word	0x00002af1

00001374 <generate_derive_key>:

int generate_derive_key(uint8_t * derive_key, uint8_t derive_slot, uint8_t * root_key)
{
    1374:	b5f0      	push	{r4, r5, r6, r7, lr}
    1376:	4c21      	ldr	r4, [pc, #132]	; (13fc <generate_derive_key+0x88>)
    1378:	44a5      	add	sp, r4
    137a:	0005      	movs	r5, r0
    137c:	000f      	movs	r7, r1
    137e:	0016      	movs	r6, r2
	char disp_str[1500];
	int disp_size = sizeof(disp_str);
    1380:	4b1f      	ldr	r3, [pc, #124]	; (1400 <generate_derive_key+0x8c>)
    1382:	9330      	str	r3, [sp, #192]	; 0xc0
	uint8_t return_code = ATCA_SUCCESS;
	atcac_sha2_256_ctx ctx;
	
	printf("Generating Derive Key\r\n");
    1384:	481f      	ldr	r0, [pc, #124]	; (1404 <generate_derive_key+0x90>)
    1386:	4c20      	ldr	r4, [pc, #128]	; (1408 <generate_derive_key+0x94>)
    1388:	47a0      	blx	r4
	printf("Communicating with Client to obtain Serial Number\r\n");
    138a:	4820      	ldr	r0, [pc, #128]	; (140c <generate_derive_key+0x98>)
    138c:	47a0      	blx	r4
	
	/*Setting the Derive Key Slot to be used*/
	client_derive_key.param[0] = derive_slot;
    138e:	4c20      	ldr	r4, [pc, #128]	; (1410 <generate_derive_key+0x9c>)
    1390:	2322      	movs	r3, #34	; 0x22
    1392:	54e7      	strb	r7, [r4, r3]
	memcpy(client_derive_key.root_key, root_key, 32);
    1394:	2220      	movs	r2, #32
    1396:	0031      	movs	r1, r6
    1398:	0020      	movs	r0, r4
    139a:	4b1e      	ldr	r3, [pc, #120]	; (1414 <generate_derive_key+0xa0>)
    139c:	4798      	blx	r3
	
	do{
		///*CLIENT Read Serial Number*/
		return_code = atcab_read_serial_number(client_derive_key.temp_key);
    139e:	0020      	movs	r0, r4
    13a0:	3040      	adds	r0, #64	; 0x40
    13a2:	4b1d      	ldr	r3, [pc, #116]	; (1418 <generate_derive_key+0xa4>)
    13a4:	4798      	blx	r3
    13a6:	1e04      	subs	r4, r0, #0
		if (return_code != ATCA_SUCCESS)
    13a8:	d123      	bne.n	13f2 <generate_derive_key+0x7e>
		{
			printf("Read Serial Number failed\r\n");
			break;
		}else
		{
			disp_size = sizeof(disp_str);
    13aa:	4b15      	ldr	r3, [pc, #84]	; (1400 <generate_derive_key+0x8c>)
    13ac:	9330      	str	r3, [sp, #192]	; 0xc0
			atcab_bin2hex( client_derive_key.temp_key , 9, disp_str, &disp_size);
    13ae:	4e18      	ldr	r6, [pc, #96]	; (1410 <generate_derive_key+0x9c>)
    13b0:	0030      	movs	r0, r6
    13b2:	3040      	adds	r0, #64	; 0x40
    13b4:	ab30      	add	r3, sp, #192	; 0xc0
    13b6:	aa31      	add	r2, sp, #196	; 0xc4
    13b8:	2109      	movs	r1, #9
    13ba:	4f18      	ldr	r7, [pc, #96]	; (141c <generate_derive_key+0xa8>)
    13bc:	47b8      	blx	r7
			printf("Client Serial Number:\n\r\n%s\r\n", disp_str);
    13be:	a931      	add	r1, sp, #196	; 0xc4
    13c0:	4817      	ldr	r0, [pc, #92]	; (1420 <generate_derive_key+0xac>)
    13c2:	4b18      	ldr	r3, [pc, #96]	; (1424 <generate_derive_key+0xb0>)
    13c4:	4798      	blx	r3
			
			/*Padding Client's Serial number with 0x77*/
			memset(&client_derive_key.temp_key[9], 0x77, 23);
    13c6:	0030      	movs	r0, r6
    13c8:	3049      	adds	r0, #73	; 0x49
    13ca:	2217      	movs	r2, #23
    13cc:	2177      	movs	r1, #119	; 0x77
    13ce:	4b16      	ldr	r3, [pc, #88]	; (1428 <generate_derive_key+0xb4>)
    13d0:	4798      	blx	r3
			
			atcac_sw_sha2_256_init(&ctx);
    13d2:	4668      	mov	r0, sp
    13d4:	4b15      	ldr	r3, [pc, #84]	; (142c <generate_derive_key+0xb8>)
    13d6:	4798      	blx	r3
			atcac_sw_sha2_256_update(&ctx, &client_derive_key, sizeof(client_derive_key));
    13d8:	2260      	movs	r2, #96	; 0x60
    13da:	0031      	movs	r1, r6
    13dc:	4668      	mov	r0, sp
    13de:	4b14      	ldr	r3, [pc, #80]	; (1430 <generate_derive_key+0xbc>)
    13e0:	4798      	blx	r3
			atcac_sw_sha2_256_finish(&ctx, derive_key);
    13e2:	0029      	movs	r1, r5
    13e4:	4668      	mov	r0, sp
    13e6:	4b13      	ldr	r3, [pc, #76]	; (1434 <generate_derive_key+0xc0>)
    13e8:	4798      	blx	r3
		}
	}while(0);
	
	return return_code;
    13ea:	0020      	movs	r0, r4
    13ec:	4b12      	ldr	r3, [pc, #72]	; (1438 <generate_derive_key+0xc4>)
    13ee:	449d      	add	sp, r3
    13f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("Read Serial Number failed\r\n");
    13f2:	4812      	ldr	r0, [pc, #72]	; (143c <generate_derive_key+0xc8>)
    13f4:	4b04      	ldr	r3, [pc, #16]	; (1408 <generate_derive_key+0x94>)
    13f6:	4798      	blx	r3
			break;
    13f8:	e7f7      	b.n	13ea <generate_derive_key+0x76>
    13fa:	46c0      	nop			; (mov r8, r8)
    13fc:	fffff95c 	.word	0xfffff95c
    1400:	000005dc 	.word	0x000005dc
    1404:	00008540 	.word	0x00008540
    1408:	00006af1 	.word	0x00006af1
    140c:	00008558 	.word	0x00008558
    1410:	20000320 	.word	0x20000320
    1414:	0000683f 	.word	0x0000683f
    1418:	000025c5 	.word	0x000025c5
    141c:	00002e55 	.word	0x00002e55
    1420:	00008320 	.word	0x00008320
    1424:	000069d5 	.word	0x000069d5
    1428:	00006875 	.word	0x00006875
    142c:	00002e69 	.word	0x00002e69
    1430:	00002e79 	.word	0x00002e79
    1434:	00002e89 	.word	0x00002e89
    1438:	000006a4 	.word	0x000006a4
    143c:	00007e7c 	.word	0x00007e7c

00001440 <client_provision>:
{
    1440:	b5f0      	push	{r4, r5, r6, r7, lr}
    1442:	4c64      	ldr	r4, [pc, #400]	; (15d4 <client_provision+0x194>)
    1444:	44a5      	add	sp, r4
	bool lockstate = 0;
    1446:	2200      	movs	r2, #0
    1448:	4b63      	ldr	r3, [pc, #396]	; (15d8 <client_provision+0x198>)
    144a:	446b      	add	r3, sp
    144c:	701a      	strb	r2, [r3, #0]
	int disp_size = sizeof(disp_str);
    144e:	4b63      	ldr	r3, [pc, #396]	; (15dc <client_provision+0x19c>)
    1450:	9321      	str	r3, [sp, #132]	; 0x84
	uint8_t root_key_non_consumption_cout[32] = {0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
    1452:	a809      	add	r0, sp, #36	; 0x24
    1454:	4b62      	ldr	r3, [pc, #392]	; (15e0 <client_provision+0x1a0>)
    1456:	0002      	movs	r2, r0
    1458:	0019      	movs	r1, r3
    145a:	c931      	ldmia	r1!, {r0, r4, r5}
    145c:	c231      	stmia	r2!, {r0, r4, r5}
    145e:	c931      	ldmia	r1!, {r0, r4, r5}
    1460:	c231      	stmia	r2!, {r0, r4, r5}
    1462:	c911      	ldmia	r1!, {r0, r4}
    1464:	c211      	stmia	r2!, {r0, r4}
	uint8_t root_key_consuption_count[32] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    1466:	a901      	add	r1, sp, #4
    1468:	3320      	adds	r3, #32
    146a:	000a      	movs	r2, r1
    146c:	cb13      	ldmia	r3!, {r0, r1, r4}
    146e:	c213      	stmia	r2!, {r0, r1, r4}
    1470:	cb13      	ldmia	r3!, {r0, r1, r4}
    1472:	c213      	stmia	r2!, {r0, r1, r4}
    1474:	cb03      	ldmia	r3!, {r0, r1}
    1476:	c203      	stmia	r2!, {r0, r1}
	cfg_sha204a_i2c_default.atcai2c.slave_address = ATSHA204_FACTORY_I2C_ADDR;
    1478:	485a      	ldr	r0, [pc, #360]	; (15e4 <client_provision+0x1a4>)
    147a:	23c8      	movs	r3, #200	; 0xc8
    147c:	7103      	strb	r3, [r0, #4]
	ret = atcab_init( &cfg_sha204a_i2c_default );
    147e:	4b5a      	ldr	r3, [pc, #360]	; (15e8 <client_provision+0x1a8>)
    1480:	4798      	blx	r3
    1482:	4c5a      	ldr	r4, [pc, #360]	; (15ec <client_provision+0x1ac>)
    1484:	6020      	str	r0, [r4, #0]
	ret = generate_derive_key(derive_key_1, 0x01, root_key_non_consumption_cout);
    1486:	aa09      	add	r2, sp, #36	; 0x24
    1488:	2101      	movs	r1, #1
    148a:	a819      	add	r0, sp, #100	; 0x64
    148c:	4b58      	ldr	r3, [pc, #352]	; (15f0 <client_provision+0x1b0>)
    148e:	4798      	blx	r3
    1490:	6020      	str	r0, [r4, #0]
	if (ret != ATCA_SUCCESS) return ret;
    1492:	2800      	cmp	r0, #0
    1494:	d002      	beq.n	149c <client_provision+0x5c>
}
    1496:	4b57      	ldr	r3, [pc, #348]	; (15f4 <client_provision+0x1b4>)
    1498:	449d      	add	sp, r3
    149a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(&client_data_zone[32 * 1], derive_key_1, 32);
    149c:	4c56      	ldr	r4, [pc, #344]	; (15f8 <client_provision+0x1b8>)
    149e:	aa19      	add	r2, sp, #100	; 0x64
    14a0:	0023      	movs	r3, r4
    14a2:	3320      	adds	r3, #32
    14a4:	ca23      	ldmia	r2!, {r0, r1, r5}
    14a6:	c323      	stmia	r3!, {r0, r1, r5}
    14a8:	ca23      	ldmia	r2!, {r0, r1, r5}
    14aa:	c323      	stmia	r3!, {r0, r1, r5}
    14ac:	ca03      	ldmia	r2!, {r0, r1}
    14ae:	c303      	stmia	r3!, {r0, r1}
	ret = generate_derive_key(derive_key_2, 0x07, root_key_consuption_count);
    14b0:	aa01      	add	r2, sp, #4
    14b2:	2107      	movs	r1, #7
    14b4:	a811      	add	r0, sp, #68	; 0x44
    14b6:	4b4e      	ldr	r3, [pc, #312]	; (15f0 <client_provision+0x1b0>)
    14b8:	4798      	blx	r3
    14ba:	4d4c      	ldr	r5, [pc, #304]	; (15ec <client_provision+0x1ac>)
    14bc:	6028      	str	r0, [r5, #0]
	memcpy(&client_data_zone[32 * 7], derive_key_2, 32);
    14be:	aa11      	add	r2, sp, #68	; 0x44
    14c0:	34e0      	adds	r4, #224	; 0xe0
    14c2:	ca0b      	ldmia	r2!, {r0, r1, r3}
    14c4:	c40b      	stmia	r4!, {r0, r1, r3}
    14c6:	ca0b      	ldmia	r2!, {r0, r1, r3}
    14c8:	c40b      	stmia	r4!, {r0, r1, r3}
    14ca:	ca0a      	ldmia	r2!, {r1, r3}
    14cc:	c40a      	stmia	r4!, {r1, r3}
	disp_size = sizeof(disp_str);
    14ce:	4f43      	ldr	r7, [pc, #268]	; (15dc <client_provision+0x19c>)
    14d0:	9721      	str	r7, [sp, #132]	; 0x84
	atcab_bin2hex(derive_key_1, sizeof(derive_key_1), disp_str, &disp_size);
    14d2:	ab21      	add	r3, sp, #132	; 0x84
    14d4:	aa22      	add	r2, sp, #136	; 0x88
    14d6:	2120      	movs	r1, #32
    14d8:	a819      	add	r0, sp, #100	; 0x64
    14da:	4e48      	ldr	r6, [pc, #288]	; (15fc <client_provision+0x1bc>)
    14dc:	47b0      	blx	r6
	printf("Derive Key no consumption counting:\r\n%s\r\n", disp_str);
    14de:	a922      	add	r1, sp, #136	; 0x88
    14e0:	4847      	ldr	r0, [pc, #284]	; (1600 <client_provision+0x1c0>)
    14e2:	4c48      	ldr	r4, [pc, #288]	; (1604 <client_provision+0x1c4>)
    14e4:	47a0      	blx	r4
	disp_size = sizeof(disp_str);
    14e6:	9721      	str	r7, [sp, #132]	; 0x84
	atcab_bin2hex(derive_key_2, sizeof(derive_key_2), disp_str, &disp_size);
    14e8:	ab21      	add	r3, sp, #132	; 0x84
    14ea:	aa22      	add	r2, sp, #136	; 0x88
    14ec:	2120      	movs	r1, #32
    14ee:	a811      	add	r0, sp, #68	; 0x44
    14f0:	47b0      	blx	r6
	printf("Derive Key consumption counting:\r\n%s\r\n", disp_str);
    14f2:	a922      	add	r1, sp, #136	; 0x88
    14f4:	4844      	ldr	r0, [pc, #272]	; (1608 <client_provision+0x1c8>)
    14f6:	47a0      	blx	r4
	asm("nop");
    14f8:	46c0      	nop			; (mov r8, r8)
	ret = atcab_is_locked(LOCK_ZONE_CONFIG, &lockstate);
    14fa:	4937      	ldr	r1, [pc, #220]	; (15d8 <client_provision+0x198>)
    14fc:	4469      	add	r1, sp
    14fe:	2000      	movs	r0, #0
    1500:	4b42      	ldr	r3, [pc, #264]	; (160c <client_provision+0x1cc>)
    1502:	4798      	blx	r3
    1504:	6028      	str	r0, [r5, #0]
	if (ret != ATCA_SUCCESS) return ret;
    1506:	2800      	cmp	r0, #0
    1508:	d1c5      	bne.n	1496 <client_provision+0x56>
	if (!lockstate)
    150a:	4b33      	ldr	r3, [pc, #204]	; (15d8 <client_provision+0x198>)
    150c:	446b      	add	r3, sp
    150e:	781b      	ldrb	r3, [r3, #0]
    1510:	2b00      	cmp	r3, #0
    1512:	d11a      	bne.n	154a <client_provision+0x10a>
		ret = atcab_write_sha_config_zone(client_config_zone);
    1514:	483e      	ldr	r0, [pc, #248]	; (1610 <client_provision+0x1d0>)
    1516:	4b3f      	ldr	r3, [pc, #252]	; (1614 <client_provision+0x1d4>)
    1518:	4798      	blx	r3
    151a:	4a34      	ldr	r2, [pc, #208]	; (15ec <client_provision+0x1ac>)
    151c:	6010      	str	r0, [r2, #0]
		if (ret != ATCA_SUCCESS) return ret;
    151e:	2800      	cmp	r0, #0
    1520:	d1b9      	bne.n	1496 <client_provision+0x56>
			disp_size = sizeof(disp_str);
    1522:	9721      	str	r7, [sp, #132]	; 0x84
			atcab_bin2hex(client_config_zone, sizeof(client_config_zone), disp_str, &disp_size);
    1524:	ab21      	add	r3, sp, #132	; 0x84
    1526:	aa22      	add	r2, sp, #136	; 0x88
    1528:	2158      	movs	r1, #88	; 0x58
    152a:	4839      	ldr	r0, [pc, #228]	; (1610 <client_provision+0x1d0>)
    152c:	4c33      	ldr	r4, [pc, #204]	; (15fc <client_provision+0x1bc>)
    152e:	47a0      	blx	r4
			printf("Writing SHA204 Configuration Zone:\r\n%s\r\n", disp_str);
    1530:	a922      	add	r1, sp, #136	; 0x88
    1532:	4839      	ldr	r0, [pc, #228]	; (1618 <client_provision+0x1d8>)
    1534:	4b33      	ldr	r3, [pc, #204]	; (1604 <client_provision+0x1c4>)
    1536:	4798      	blx	r3
		ret = atcab_lock_config_zone(&lock_response);
    1538:	4838      	ldr	r0, [pc, #224]	; (161c <client_provision+0x1dc>)
    153a:	4468      	add	r0, sp
    153c:	4b38      	ldr	r3, [pc, #224]	; (1620 <client_provision+0x1e0>)
    153e:	4798      	blx	r3
    1540:	4a2a      	ldr	r2, [pc, #168]	; (15ec <client_provision+0x1ac>)
    1542:	6010      	str	r0, [r2, #0]
		if (ret != ATCA_SUCCESS) return ret;
    1544:	2800      	cmp	r0, #0
    1546:	d003      	beq.n	1550 <client_provision+0x110>
    1548:	e7a5      	b.n	1496 <client_provision+0x56>
		printf("\n\rConfiguratioin Zone Locked\n");
    154a:	4836      	ldr	r0, [pc, #216]	; (1624 <client_provision+0x1e4>)
    154c:	4b36      	ldr	r3, [pc, #216]	; (1628 <client_provision+0x1e8>)
    154e:	4798      	blx	r3
	atcab_sleep();
    1550:	4b36      	ldr	r3, [pc, #216]	; (162c <client_provision+0x1ec>)
    1552:	4798      	blx	r3
	cfg_sha204a_i2c_default.atcai2c.slave_address = DERIVED_KEY_CLIENT_I2C_ADDR;
    1554:	4823      	ldr	r0, [pc, #140]	; (15e4 <client_provision+0x1a4>)
    1556:	23c8      	movs	r3, #200	; 0xc8
    1558:	7103      	strb	r3, [r0, #4]
	atcab_init( &cfg_sha204a_i2c_default );
    155a:	4b23      	ldr	r3, [pc, #140]	; (15e8 <client_provision+0x1a8>)
    155c:	4798      	blx	r3
	ret = atcab_is_locked(LOCK_ZONE_DATA, &lockstate);
    155e:	491e      	ldr	r1, [pc, #120]	; (15d8 <client_provision+0x198>)
    1560:	4469      	add	r1, sp
    1562:	2001      	movs	r0, #1
    1564:	4b29      	ldr	r3, [pc, #164]	; (160c <client_provision+0x1cc>)
    1566:	4798      	blx	r3
    1568:	4a20      	ldr	r2, [pc, #128]	; (15ec <client_provision+0x1ac>)
    156a:	6010      	str	r0, [r2, #0]
	if (ret != ATCA_SUCCESS) return ret;
    156c:	2800      	cmp	r0, #0
    156e:	d000      	beq.n	1572 <client_provision+0x132>
    1570:	e791      	b.n	1496 <client_provision+0x56>
	if (!lockstate)
    1572:	4b19      	ldr	r3, [pc, #100]	; (15d8 <client_provision+0x198>)
    1574:	446b      	add	r3, sp
    1576:	781b      	ldrb	r3, [r3, #0]
    1578:	2b00      	cmp	r3, #0
    157a:	d124      	bne.n	15c6 <client_provision+0x186>
		ret = client_write_data_zone(client_data_zone, sizeof(client_data_zone));
    157c:	2180      	movs	r1, #128	; 0x80
    157e:	0089      	lsls	r1, r1, #2
    1580:	481d      	ldr	r0, [pc, #116]	; (15f8 <client_provision+0x1b8>)
    1582:	4b2b      	ldr	r3, [pc, #172]	; (1630 <client_provision+0x1f0>)
    1584:	4798      	blx	r3
    1586:	4b19      	ldr	r3, [pc, #100]	; (15ec <client_provision+0x1ac>)
    1588:	6018      	str	r0, [r3, #0]
		if (ret != ATCA_SUCCESS) return ret;
    158a:	2800      	cmp	r0, #0
    158c:	d000      	beq.n	1590 <client_provision+0x150>
    158e:	e782      	b.n	1496 <client_provision+0x56>
			printf("\r\nTHESE KEY VALUES ARE SHOWN ONLY FOR DEMOSTRATION PURPOSES!");
    1590:	4828      	ldr	r0, [pc, #160]	; (1634 <client_provision+0x1f4>)
    1592:	4c1c      	ldr	r4, [pc, #112]	; (1604 <client_provision+0x1c4>)
    1594:	47a0      	blx	r4
			printf("\r\nAND SHOULD BE KEPT SECRET!\r\n");
    1596:	4828      	ldr	r0, [pc, #160]	; (1638 <client_provision+0x1f8>)
    1598:	4b23      	ldr	r3, [pc, #140]	; (1628 <client_provision+0x1e8>)
    159a:	4798      	blx	r3
			disp_size = sizeof(disp_str);
    159c:	4b0f      	ldr	r3, [pc, #60]	; (15dc <client_provision+0x19c>)
    159e:	9321      	str	r3, [sp, #132]	; 0x84
			atcab_bin2hex(client_data_zone, sizeof(client_data_zone), disp_str, &disp_size);
    15a0:	ab21      	add	r3, sp, #132	; 0x84
    15a2:	aa22      	add	r2, sp, #136	; 0x88
    15a4:	2180      	movs	r1, #128	; 0x80
    15a6:	0089      	lsls	r1, r1, #2
    15a8:	4813      	ldr	r0, [pc, #76]	; (15f8 <client_provision+0x1b8>)
    15aa:	4d14      	ldr	r5, [pc, #80]	; (15fc <client_provision+0x1bc>)
    15ac:	47a8      	blx	r5
			printf("Writing SHA204 Configuration Zone:\r\n%s\r\n", disp_str);
    15ae:	a922      	add	r1, sp, #136	; 0x88
    15b0:	4819      	ldr	r0, [pc, #100]	; (1618 <client_provision+0x1d8>)
    15b2:	47a0      	blx	r4
		ret = atcab_lock_data_zone(&lock_response);
    15b4:	4819      	ldr	r0, [pc, #100]	; (161c <client_provision+0x1dc>)
    15b6:	4468      	add	r0, sp
    15b8:	4b20      	ldr	r3, [pc, #128]	; (163c <client_provision+0x1fc>)
    15ba:	4798      	blx	r3
    15bc:	4a0b      	ldr	r2, [pc, #44]	; (15ec <client_provision+0x1ac>)
    15be:	6010      	str	r0, [r2, #0]
		if (ret != ATCA_SUCCESS) return ret;
    15c0:	2800      	cmp	r0, #0
    15c2:	d003      	beq.n	15cc <client_provision+0x18c>
    15c4:	e767      	b.n	1496 <client_provision+0x56>
		printf("\n\rData Zone Locked\n\r");
    15c6:	481e      	ldr	r0, [pc, #120]	; (1640 <client_provision+0x200>)
    15c8:	4b0e      	ldr	r3, [pc, #56]	; (1604 <client_provision+0x1c4>)
    15ca:	4798      	blx	r3
	return ret;
    15cc:	4b07      	ldr	r3, [pc, #28]	; (15ec <client_provision+0x1ac>)
    15ce:	6818      	ldr	r0, [r3, #0]
    15d0:	e761      	b.n	1496 <client_provision+0x56>
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	fffff8cc 	.word	0xfffff8cc
    15d8:	0000072f 	.word	0x0000072f
    15dc:	000006a4 	.word	0x000006a4
    15e0:	00008454 	.word	0x00008454
    15e4:	20000380 	.word	0x20000380
    15e8:	00001ebd 	.word	0x00001ebd
    15ec:	20000498 	.word	0x20000498
    15f0:	00001375 	.word	0x00001375
    15f4:	00000734 	.word	0x00000734
    15f8:	20000120 	.word	0x20000120
    15fc:	00002e55 	.word	0x00002e55
    1600:	000084ec 	.word	0x000084ec
    1604:	000069d5 	.word	0x000069d5
    1608:	00008518 	.word	0x00008518
    160c:	0000260d 	.word	0x0000260d
    1610:	00008494 	.word	0x00008494
    1614:	00002c4d 	.word	0x00002c4d
    1618:	000087e4 	.word	0x000087e4
    161c:	0000072e 	.word	0x0000072e
    1620:	00002715 	.word	0x00002715
    1624:	00008810 	.word	0x00008810
    1628:	00006af1 	.word	0x00006af1
    162c:	00001f79 	.word	0x00001f79
    1630:	00001321 	.word	0x00001321
    1634:	00008830 	.word	0x00008830
    1638:	00008870 	.word	0x00008870
    163c:	0000272d 	.word	0x0000272d
    1640:	00008890 	.word	0x00008890

00001644 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1644:	b570      	push	{r4, r5, r6, lr}
    1646:	b082      	sub	sp, #8
    1648:	0005      	movs	r5, r0
    164a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    164c:	2200      	movs	r2, #0
    164e:	466b      	mov	r3, sp
    1650:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1652:	4c06      	ldr	r4, [pc, #24]	; (166c <usart_serial_getchar+0x28>)
    1654:	466b      	mov	r3, sp
    1656:	1d99      	adds	r1, r3, #6
    1658:	0028      	movs	r0, r5
    165a:	47a0      	blx	r4
    165c:	2800      	cmp	r0, #0
    165e:	d1f9      	bne.n	1654 <usart_serial_getchar+0x10>

	*c = temp;
    1660:	466b      	mov	r3, sp
    1662:	3306      	adds	r3, #6
    1664:	881b      	ldrh	r3, [r3, #0]
    1666:	7033      	strb	r3, [r6, #0]
}
    1668:	b002      	add	sp, #8
    166a:	bd70      	pop	{r4, r5, r6, pc}
    166c:	00004201 	.word	0x00004201

00001670 <usart_serial_putchar>:
{
    1670:	b570      	push	{r4, r5, r6, lr}
    1672:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1674:	b28c      	uxth	r4, r1
    1676:	4e03      	ldr	r6, [pc, #12]	; (1684 <usart_serial_putchar+0x14>)
    1678:	0021      	movs	r1, r4
    167a:	0028      	movs	r0, r5
    167c:	47b0      	blx	r6
    167e:	2800      	cmp	r0, #0
    1680:	d1fa      	bne.n	1678 <usart_serial_putchar+0x8>
}
    1682:	bd70      	pop	{r4, r5, r6, pc}
    1684:	000041d5 	.word	0x000041d5

00001688 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    1688:	b510      	push	{r4, lr}
    168a:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    168c:	466b      	mov	r3, sp
    168e:	1ddc      	adds	r4, r3, #7
    1690:	2201      	movs	r2, #1
    1692:	0021      	movs	r1, r4
    1694:	480b      	ldr	r0, [pc, #44]	; (16c4 <USART_HOST_ISR_VECT+0x3c>)
    1696:	4b0c      	ldr	r3, [pc, #48]	; (16c8 <USART_HOST_ISR_VECT+0x40>)
    1698:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    169a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    169c:	f3bf 8f5f 	dmb	sy
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    16a0:	4a0a      	ldr	r2, [pc, #40]	; (16cc <USART_HOST_ISR_VECT+0x44>)
    16a2:	2300      	movs	r3, #0
    16a4:	7013      	strb	r3, [r2, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    16a6:	490a      	ldr	r1, [pc, #40]	; (16d0 <USART_HOST_ISR_VECT+0x48>)
    16a8:	780b      	ldrb	r3, [r1, #0]
    16aa:	7824      	ldrb	r4, [r4, #0]
    16ac:	4809      	ldr	r0, [pc, #36]	; (16d4 <USART_HOST_ISR_VECT+0x4c>)
    16ae:	54c4      	strb	r4, [r0, r3]
	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    16b0:	3301      	adds	r3, #1
    16b2:	700b      	strb	r3, [r1, #0]
	}

	cpu_irq_enable();
    16b4:	2301      	movs	r3, #1
    16b6:	7013      	strb	r3, [r2, #0]
    16b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    16bc:	b662      	cpsie	i
}
    16be:	b002      	add	sp, #8
    16c0:	bd10      	pop	{r4, pc}
    16c2:	46c0      	nop			; (mov r8, r8)
    16c4:	2000049c 	.word	0x2000049c
    16c8:	00004279 	.word	0x00004279
    16cc:	20000410 	.word	0x20000410
    16d0:	200008d1 	.word	0x200008d1
    16d4:	200004d0 	.word	0x200004d0

000016d8 <sio2host_init>:
{
    16d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    16da:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    16dc:	2380      	movs	r3, #128	; 0x80
    16de:	05db      	lsls	r3, r3, #23
    16e0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    16e2:	2300      	movs	r3, #0
    16e4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    16e6:	22ff      	movs	r2, #255	; 0xff
    16e8:	4669      	mov	r1, sp
    16ea:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    16ec:	2200      	movs	r2, #0
    16ee:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    16f0:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    16f2:	2401      	movs	r4, #1
    16f4:	2124      	movs	r1, #36	; 0x24
    16f6:	4668      	mov	r0, sp
    16f8:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    16fa:	3101      	adds	r1, #1
    16fc:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    16fe:	3101      	adds	r1, #1
    1700:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    1702:	3101      	adds	r1, #1
    1704:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    1706:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1708:	3105      	adds	r1, #5
    170a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    170c:	3101      	adds	r1, #1
    170e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1710:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1712:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1714:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1716:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1718:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    171a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    171c:	2313      	movs	r3, #19
    171e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1720:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    1722:	2380      	movs	r3, #128	; 0x80
    1724:	035b      	lsls	r3, r3, #13
    1726:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    1728:	4b2f      	ldr	r3, [pc, #188]	; (17e8 <sio2host_init+0x110>)
    172a:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    172c:	4b2f      	ldr	r3, [pc, #188]	; (17ec <sio2host_init+0x114>)
    172e:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    1730:	2301      	movs	r3, #1
    1732:	425b      	negs	r3, r3
    1734:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    1736:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    1738:	23e1      	movs	r3, #225	; 0xe1
    173a:	025b      	lsls	r3, r3, #9
    173c:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    173e:	4d2c      	ldr	r5, [pc, #176]	; (17f0 <sio2host_init+0x118>)
    1740:	4b2c      	ldr	r3, [pc, #176]	; (17f4 <sio2host_init+0x11c>)
    1742:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1744:	4a2c      	ldr	r2, [pc, #176]	; (17f8 <sio2host_init+0x120>)
    1746:	4b2d      	ldr	r3, [pc, #180]	; (17fc <sio2host_init+0x124>)
    1748:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    174a:	4a2d      	ldr	r2, [pc, #180]	; (1800 <sio2host_init+0x128>)
    174c:	4b2d      	ldr	r3, [pc, #180]	; (1804 <sio2host_init+0x12c>)
    174e:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1750:	466a      	mov	r2, sp
    1752:	492d      	ldr	r1, [pc, #180]	; (1808 <sio2host_init+0x130>)
    1754:	0028      	movs	r0, r5
    1756:	4b2d      	ldr	r3, [pc, #180]	; (180c <sio2host_init+0x134>)
    1758:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    175a:	4f2d      	ldr	r7, [pc, #180]	; (1810 <sio2host_init+0x138>)
    175c:	683b      	ldr	r3, [r7, #0]
    175e:	6898      	ldr	r0, [r3, #8]
    1760:	2100      	movs	r1, #0
    1762:	4e2c      	ldr	r6, [pc, #176]	; (1814 <sio2host_init+0x13c>)
    1764:	47b0      	blx	r6
	setbuf(stdin, NULL);
    1766:	683b      	ldr	r3, [r7, #0]
    1768:	6858      	ldr	r0, [r3, #4]
    176a:	2100      	movs	r1, #0
    176c:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    176e:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1770:	0030      	movs	r0, r6
    1772:	4b29      	ldr	r3, [pc, #164]	; (1818 <sio2host_init+0x140>)
    1774:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1776:	231f      	movs	r3, #31
    1778:	4018      	ands	r0, r3
    177a:	4084      	lsls	r4, r0
    177c:	4b27      	ldr	r3, [pc, #156]	; (181c <sio2host_init+0x144>)
    177e:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1780:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1782:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1784:	2b00      	cmp	r3, #0
    1786:	d1fc      	bne.n	1782 <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1788:	6833      	ldr	r3, [r6, #0]
    178a:	2202      	movs	r2, #2
    178c:	4313      	orrs	r3, r2
    178e:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1790:	4b17      	ldr	r3, [pc, #92]	; (17f0 <sio2host_init+0x118>)
    1792:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    1794:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1796:	2a00      	cmp	r2, #0
    1798:	d1fc      	bne.n	1794 <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    179a:	6859      	ldr	r1, [r3, #4]
    179c:	2280      	movs	r2, #128	; 0x80
    179e:	0252      	lsls	r2, r2, #9
    17a0:	430a      	orrs	r2, r1
    17a2:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    17a4:	2101      	movs	r1, #1
    17a6:	4a12      	ldr	r2, [pc, #72]	; (17f0 <sio2host_init+0x118>)
    17a8:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    17aa:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    17ac:	2a00      	cmp	r2, #0
    17ae:	d1fc      	bne.n	17aa <sio2host_init+0xd2>
	return (usart_hw->SYNCBUSY.reg);
    17b0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    17b2:	2a00      	cmp	r2, #0
    17b4:	d1fc      	bne.n	17b0 <sio2host_init+0xd8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    17b6:	6859      	ldr	r1, [r3, #4]
    17b8:	2280      	movs	r2, #128	; 0x80
    17ba:	0292      	lsls	r2, r2, #10
    17bc:	430a      	orrs	r2, r1
    17be:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    17c0:	2101      	movs	r1, #1
    17c2:	4a0b      	ldr	r2, [pc, #44]	; (17f0 <sio2host_init+0x118>)
    17c4:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    17c6:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    17c8:	2a00      	cmp	r2, #0
    17ca:	d1fc      	bne.n	17c6 <sio2host_init+0xee>
	USART_HOST_RX_ISR_ENABLE();
    17cc:	4914      	ldr	r1, [pc, #80]	; (1820 <sio2host_init+0x148>)
    17ce:	2003      	movs	r0, #3
    17d0:	4b14      	ldr	r3, [pc, #80]	; (1824 <sio2host_init+0x14c>)
    17d2:	4798      	blx	r3
    17d4:	2204      	movs	r2, #4
    17d6:	4b0c      	ldr	r3, [pc, #48]	; (1808 <sio2host_init+0x130>)
    17d8:	759a      	strb	r2, [r3, #22]
    17da:	2280      	movs	r2, #128	; 0x80
    17dc:	0152      	lsls	r2, r2, #5
    17de:	4b0f      	ldr	r3, [pc, #60]	; (181c <sio2host_init+0x144>)
    17e0:	601a      	str	r2, [r3, #0]
}
    17e2:	b011      	add	sp, #68	; 0x44
    17e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17e6:	46c0      	nop			; (mov r8, r8)
    17e8:	00160002 	.word	0x00160002
    17ec:	00170002 	.word	0x00170002
    17f0:	2000049c 	.word	0x2000049c
    17f4:	20000d74 	.word	0x20000d74
    17f8:	00001671 	.word	0x00001671
    17fc:	20000d70 	.word	0x20000d70
    1800:	00001645 	.word	0x00001645
    1804:	20000d6c 	.word	0x20000d6c
    1808:	42001400 	.word	0x42001400
    180c:	00003e95 	.word	0x00003e95
    1810:	20000414 	.word	0x20000414
    1814:	00006b29 	.word	0x00006b29
    1818:	00003e05 	.word	0x00003e05
    181c:	e000e100 	.word	0xe000e100
    1820:	00001689 	.word	0x00001689
    1824:	00003dc9 	.word	0x00003dc9

00001828 <sio2host_rx>:
{
    1828:	b530      	push	{r4, r5, lr}
    182a:	0002      	movs	r2, r0
	if(serial_rx_buf_tail >= serial_rx_buf_head)
    182c:	4b12      	ldr	r3, [pc, #72]	; (1878 <sio2host_rx+0x50>)
    182e:	7818      	ldrb	r0, [r3, #0]
    1830:	4b12      	ldr	r3, [pc, #72]	; (187c <sio2host_rx+0x54>)
    1832:	781b      	ldrb	r3, [r3, #0]
    1834:	4298      	cmp	r0, r3
    1836:	d31a      	bcc.n	186e <sio2host_rx+0x46>
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
    1838:	1ac0      	subs	r0, r0, r3
    183a:	4c11      	ldr	r4, [pc, #68]	; (1880 <sio2host_rx+0x58>)
    183c:	7020      	strb	r0, [r4, #0]
	if (0 == serial_rx_count) {
    183e:	4810      	ldr	r0, [pc, #64]	; (1880 <sio2host_rx+0x58>)
    1840:	7800      	ldrb	r0, [r0, #0]
    1842:	2800      	cmp	r0, #0
    1844:	d012      	beq.n	186c <sio2host_rx+0x44>
    1846:	1c04      	adds	r4, r0, #0
    1848:	4288      	cmp	r0, r1
    184a:	d900      	bls.n	184e <sio2host_rx+0x26>
    184c:	1c0c      	adds	r4, r1, #0
    184e:	b2e0      	uxtb	r0, r4
	while (max_length > 0) {
    1850:	2800      	cmp	r0, #0
    1852:	d00b      	beq.n	186c <sio2host_rx+0x44>
    1854:	181c      	adds	r4, r3, r0
    1856:	b2e4      	uxtb	r4, r4
		*data = serial_rx_buf[serial_rx_buf_head];
    1858:	4d0a      	ldr	r5, [pc, #40]	; (1884 <sio2host_rx+0x5c>)
    185a:	5ce9      	ldrb	r1, [r5, r3]
    185c:	7011      	strb	r1, [r2, #0]
		data++;
    185e:	3201      	adds	r2, #1
    1860:	3301      	adds	r3, #1
    1862:	b2db      	uxtb	r3, r3
	while (max_length > 0) {
    1864:	429c      	cmp	r4, r3
    1866:	d1f8      	bne.n	185a <sio2host_rx+0x32>
    1868:	4a04      	ldr	r2, [pc, #16]	; (187c <sio2host_rx+0x54>)
    186a:	7013      	strb	r3, [r2, #0]
}
    186c:	bd30      	pop	{r4, r5, pc}
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
    186e:	1ac0      	subs	r0, r0, r3
    1870:	4c03      	ldr	r4, [pc, #12]	; (1880 <sio2host_rx+0x58>)
    1872:	7020      	strb	r0, [r4, #0]
    1874:	e7e3      	b.n	183e <sio2host_rx+0x16>
    1876:	46c0      	nop			; (mov r8, r8)
    1878:	200008d1 	.word	0x200008d1
    187c:	200008d0 	.word	0x200008d0
    1880:	200008d2 	.word	0x200008d2
    1884:	200004d0 	.word	0x200004d0

00001888 <help>:
	/** \brief help method prints out the console menu commands to the console
	\return ATCA_STATUS
	*/

	int help(void)
	{
    1888:	b510      	push	{r4, lr}
		printf("DISPOSABLE AUTHENTICATION TRAINING:\r\n");
    188a:	4808      	ldr	r0, [pc, #32]	; (18ac <help+0x24>)
    188c:	4c08      	ldr	r4, [pc, #32]	; (18b0 <help+0x28>)
    188e:	47a0      	blx	r4
		printf("Usage:\r\n");
    1890:	4808      	ldr	r0, [pc, #32]	; (18b4 <help+0x2c>)
    1892:	47a0      	blx	r4
		printf("host_provision                    ---Command will provision Host\r\n");
    1894:	4808      	ldr	r0, [pc, #32]	; (18b8 <help+0x30>)
    1896:	47a0      	blx	r4
		printf("client_provision                  ---Command will provision Client\r\n");
    1898:	4808      	ldr	r0, [pc, #32]	; (18bc <help+0x34>)
    189a:	47a0      	blx	r4
		printf("authenticate_client               ---Command will Initiate Client Authentication by Host\r\n");
    189c:	4808      	ldr	r0, [pc, #32]	; (18c0 <help+0x38>)
    189e:	47a0      	blx	r4
		printf("authenticate_client_counters      ---Command will Initiate Client Authentication by Host with Monotonic Counter Enabled\r\n");
    18a0:	4808      	ldr	r0, [pc, #32]	; (18c4 <help+0x3c>)
    18a2:	47a0      	blx	r4
		printf("\r\n");
    18a4:	4808      	ldr	r0, [pc, #32]	; (18c8 <help+0x40>)
    18a6:	47a0      	blx	r4
		return ATCA_SUCCESS;
	}
    18a8:	2000      	movs	r0, #0
    18aa:	bd10      	pop	{r4, pc}
    18ac:	000088a8 	.word	0x000088a8
    18b0:	00006af1 	.word	0x00006af1
    18b4:	000088d0 	.word	0x000088d0
    18b8:	000088d8 	.word	0x000088d8
    18bc:	0000891c 	.word	0x0000891c
    18c0:	00008960 	.word	0x00008960
    18c4:	000089bc 	.word	0x000089bc
    18c8:	0000888c 	.word	0x0000888c

000018cc <parseCmd>:
	*  requested.
	*  \param[in] commands - a command string
	*/

	int parseCmd( char *commands )
	{
    18cc:	b510      	push	{r4, lr}
    18ce:	0004      	movs	r4, r0
		if (!strcmp( commands, "help")) {
    18d0:	4921      	ldr	r1, [pc, #132]	; (1958 <parseCmd+0x8c>)
    18d2:	4b22      	ldr	r3, [pc, #136]	; (195c <parseCmd+0x90>)
    18d4:	4798      	blx	r3
    18d6:	2800      	cmp	r0, #0
    18d8:	d01f      	beq.n	191a <parseCmd+0x4e>
			printf("\r\n");
			help();
		}else
		if (!strcmp( commands, "host_provision")) {
    18da:	4921      	ldr	r1, [pc, #132]	; (1960 <parseCmd+0x94>)
    18dc:	0020      	movs	r0, r4
    18de:	4b1f      	ldr	r3, [pc, #124]	; (195c <parseCmd+0x90>)
    18e0:	4798      	blx	r3
    18e2:	2800      	cmp	r0, #0
    18e4:	d020      	beq.n	1928 <parseCmd+0x5c>
			printf("\r\n");
			host_provision();
		} else
		if (!strcmp( commands, "client_provision")) {
    18e6:	491f      	ldr	r1, [pc, #124]	; (1964 <parseCmd+0x98>)
    18e8:	0020      	movs	r0, r4
    18ea:	4b1c      	ldr	r3, [pc, #112]	; (195c <parseCmd+0x90>)
    18ec:	4798      	blx	r3
    18ee:	2800      	cmp	r0, #0
    18f0:	d020      	beq.n	1934 <parseCmd+0x68>
			printf("\r\n");
			client_provision();
		}else
		if (!strcmp( commands, "authenticate_client")) {
    18f2:	491d      	ldr	r1, [pc, #116]	; (1968 <parseCmd+0x9c>)
    18f4:	0020      	movs	r0, r4
    18f6:	4b19      	ldr	r3, [pc, #100]	; (195c <parseCmd+0x90>)
    18f8:	4798      	blx	r3
    18fa:	2800      	cmp	r0, #0
    18fc:	d020      	beq.n	1940 <parseCmd+0x74>
			printf("\r\n");
			authenticate_client();
		}else
		if (!strcmp( commands, "authenticate_client_counters")) {
    18fe:	491b      	ldr	r1, [pc, #108]	; (196c <parseCmd+0xa0>)
    1900:	0020      	movs	r0, r4
    1902:	4b16      	ldr	r3, [pc, #88]	; (195c <parseCmd+0x90>)
    1904:	4798      	blx	r3
    1906:	2800      	cmp	r0, #0
    1908:	d020      	beq.n	194c <parseCmd+0x80>
			printf("\r\n");
			authenticate_client_consumtion_counting();
		}else if ( strlen(commands) ) {
    190a:	7823      	ldrb	r3, [r4, #0]
    190c:	2b00      	cmp	r3, #0
    190e:	d009      	beq.n	1924 <parseCmd+0x58>
		printf("\r\nsyntax error in command: %s\r\n", commands);
    1910:	0021      	movs	r1, r4
    1912:	4817      	ldr	r0, [pc, #92]	; (1970 <parseCmd+0xa4>)
    1914:	4b17      	ldr	r3, [pc, #92]	; (1974 <parseCmd+0xa8>)
    1916:	4798      	blx	r3
    1918:	e004      	b.n	1924 <parseCmd+0x58>
			printf("\r\n");
    191a:	4817      	ldr	r0, [pc, #92]	; (1978 <parseCmd+0xac>)
    191c:	4b17      	ldr	r3, [pc, #92]	; (197c <parseCmd+0xb0>)
    191e:	4798      	blx	r3
			help();
    1920:	4b17      	ldr	r3, [pc, #92]	; (1980 <parseCmd+0xb4>)
    1922:	4798      	blx	r3
		}
		return ATCA_SUCCESS;
	}
    1924:	2000      	movs	r0, #0
    1926:	bd10      	pop	{r4, pc}
			printf("\r\n");
    1928:	4813      	ldr	r0, [pc, #76]	; (1978 <parseCmd+0xac>)
    192a:	4b14      	ldr	r3, [pc, #80]	; (197c <parseCmd+0xb0>)
    192c:	4798      	blx	r3
			host_provision();
    192e:	4b15      	ldr	r3, [pc, #84]	; (1984 <parseCmd+0xb8>)
    1930:	4798      	blx	r3
    1932:	e7f7      	b.n	1924 <parseCmd+0x58>
			printf("\r\n");
    1934:	4810      	ldr	r0, [pc, #64]	; (1978 <parseCmd+0xac>)
    1936:	4b11      	ldr	r3, [pc, #68]	; (197c <parseCmd+0xb0>)
    1938:	4798      	blx	r3
			client_provision();
    193a:	4b13      	ldr	r3, [pc, #76]	; (1988 <parseCmd+0xbc>)
    193c:	4798      	blx	r3
    193e:	e7f1      	b.n	1924 <parseCmd+0x58>
			printf("\r\n");
    1940:	480d      	ldr	r0, [pc, #52]	; (1978 <parseCmd+0xac>)
    1942:	4b0e      	ldr	r3, [pc, #56]	; (197c <parseCmd+0xb0>)
    1944:	4798      	blx	r3
			authenticate_client();
    1946:	4b11      	ldr	r3, [pc, #68]	; (198c <parseCmd+0xc0>)
    1948:	4798      	blx	r3
    194a:	e7eb      	b.n	1924 <parseCmd+0x58>
			printf("\r\n");
    194c:	480a      	ldr	r0, [pc, #40]	; (1978 <parseCmd+0xac>)
    194e:	4b0b      	ldr	r3, [pc, #44]	; (197c <parseCmd+0xb0>)
    1950:	4798      	blx	r3
			authenticate_client_consumtion_counting();
    1952:	4b0f      	ldr	r3, [pc, #60]	; (1990 <parseCmd+0xc4>)
    1954:	4798      	blx	r3
    1956:	e7e5      	b.n	1924 <parseCmd+0x58>
    1958:	00008a38 	.word	0x00008a38
    195c:	00006d71 	.word	0x00006d71
    1960:	00008a40 	.word	0x00008a40
    1964:	00008a50 	.word	0x00008a50
    1968:	00008a64 	.word	0x00008a64
    196c:	00008a78 	.word	0x00008a78
    1970:	00008a98 	.word	0x00008a98
    1974:	000069d5 	.word	0x000069d5
    1978:	0000888c 	.word	0x0000888c
    197c:	00006af1 	.word	0x00006af1
    1980:	00001889 	.word	0x00001889
    1984:	000011a5 	.word	0x000011a5
    1988:	00001441 	.word	0x00001441
    198c:	00000a85 	.word	0x00000a85
    1990:	00000d49 	.word	0x00000d49

00001994 <processCmd>:

	/** \brief processCmd empties a circular buffer of stored command characters
	* int a command string, then makes the call to parse and execute the command
	*/
	int processCmd(void)
	{
    1994:	b570      	push	{r4, r5, r6, lr}
		static char cmd[256];
		uint16_t i = 0;
		while( !CBUF_IsEmpty(cmdQ) && i < sizeof(cmd))
    1996:	4a14      	ldr	r2, [pc, #80]	; (19e8 <processCmd+0x54>)
    1998:	7853      	ldrb	r3, [r2, #1]
    199a:	7812      	ldrb	r2, [r2, #0]
    199c:	b2db      	uxtb	r3, r3
    199e:	4293      	cmp	r3, r2
    19a0:	d020      	beq.n	19e4 <processCmd+0x50>
    19a2:	4c12      	ldr	r4, [pc, #72]	; (19ec <processCmd+0x58>)
    19a4:	2200      	movs	r2, #0
		cmd[i++] = CBUF_Pop( cmdQ );
    19a6:	4910      	ldr	r1, [pc, #64]	; (19e8 <processCmd+0x54>)
		while( !CBUF_IsEmpty(cmdQ) && i < sizeof(cmd))
    19a8:	2580      	movs	r5, #128	; 0x80
    19aa:	006d      	lsls	r5, r5, #1
		cmd[i++] = CBUF_Pop( cmdQ );
    19ac:	3201      	adds	r2, #1
    19ae:	b292      	uxth	r2, r2
    19b0:	780b      	ldrb	r3, [r1, #0]
    19b2:	b2db      	uxtb	r3, r3
    19b4:	1c58      	adds	r0, r3, #1
    19b6:	b2c0      	uxtb	r0, r0
    19b8:	7008      	strb	r0, [r1, #0]
    19ba:	18cb      	adds	r3, r1, r3
    19bc:	789b      	ldrb	r3, [r3, #2]
    19be:	7023      	strb	r3, [r4, #0]
		while( !CBUF_IsEmpty(cmdQ) && i < sizeof(cmd))
    19c0:	784b      	ldrb	r3, [r1, #1]
    19c2:	7808      	ldrb	r0, [r1, #0]
    19c4:	b2db      	uxtb	r3, r3
    19c6:	4283      	cmp	r3, r0
    19c8:	d002      	beq.n	19d0 <processCmd+0x3c>
    19ca:	3401      	adds	r4, #1
    19cc:	42aa      	cmp	r2, r5
    19ce:	d1ed      	bne.n	19ac <processCmd+0x18>
		cmd[i] = '\0';
    19d0:	4806      	ldr	r0, [pc, #24]	; (19ec <processCmd+0x58>)
    19d2:	2300      	movs	r3, #0
    19d4:	5483      	strb	r3, [r0, r2]
		//printf("\r\n%s\r\n", command );
		parseCmd(cmd);
    19d6:	4b06      	ldr	r3, [pc, #24]	; (19f0 <processCmd+0x5c>)
    19d8:	4798      	blx	r3
		printf("$ ");
    19da:	4806      	ldr	r0, [pc, #24]	; (19f4 <processCmd+0x60>)
    19dc:	4b06      	ldr	r3, [pc, #24]	; (19f8 <processCmd+0x64>)
    19de:	4798      	blx	r3
		
		return ATCA_SUCCESS;
	}
    19e0:	2000      	movs	r0, #0
    19e2:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t i = 0;
    19e4:	2200      	movs	r2, #0
    19e6:	e7f3      	b.n	19d0 <processCmd+0x3c>
    19e8:	20000ae0 	.word	0x20000ae0
    19ec:	200008d4 	.word	0x200008d4
    19f0:	000018cd 	.word	0x000018cd
    19f4:	00008ab8 	.word	0x00008ab8
    19f8:	000069d5 	.word	0x000069d5

000019fc <deleteATCACommand>:
/** \brief ATCACommand destructor
 * \param[in] cacmd instance of a command object
 */

void deleteATCACommand( ATCACommand *cacmd )  // destructor
{
    19fc:	b510      	push	{r4, lr}
    19fe:	0004      	movs	r4, r0
	if ( *cacmd )
    1a00:	6800      	ldr	r0, [r0, #0]
    1a02:	2800      	cmp	r0, #0
    1a04:	d001      	beq.n	1a0a <deleteATCACommand+0xe>
		free((void*)*cacmd);
    1a06:	4b02      	ldr	r3, [pc, #8]	; (1a10 <deleteATCACommand+0x14>)
    1a08:	4798      	blx	r3

	*cacmd = NULL;
    1a0a:	2300      	movs	r3, #0
    1a0c:	6023      	str	r3, [r4, #0]
}
    1a0e:	bd10      	pop	{r4, pc}
    1a10:	0000680d 	.word	0x0000680d

00001a14 <atInitExecTimes>:
 * \return ATCA_STATUS
 */

ATCA_STATUS atInitExecTimes(ATCACommand cacmd, ATCADeviceType device_type)
{
	switch ( device_type ) {
    1a14:	2900      	cmp	r1, #0
    1a16:	d007      	beq.n	1a28 <atInitExecTimes+0x14>
		break;
	case ATSHA204A:
		cacmd->execution_times = exectimes_204a;
		break;
	default:
		return ATCA_BAD_PARAM;
    1a18:	23e2      	movs	r3, #226	; 0xe2
	switch ( device_type ) {
    1a1a:	2902      	cmp	r1, #2
    1a1c:	d802      	bhi.n	1a24 <atInitExecTimes+0x10>
		cacmd->execution_times = exectimes_x08a;
    1a1e:	4b04      	ldr	r3, [pc, #16]	; (1a30 <atInitExecTimes+0x1c>)
    1a20:	6043      	str	r3, [r0, #4]
		break;
	}

	return ATCA_SUCCESS;
    1a22:	2300      	movs	r3, #0
}
    1a24:	0018      	movs	r0, r3
    1a26:	4770      	bx	lr
		cacmd->execution_times = exectimes_204a;
    1a28:	4b02      	ldr	r3, [pc, #8]	; (1a34 <atInitExecTimes+0x20>)
    1a2a:	6043      	str	r3, [r0, #4]
	return ATCA_SUCCESS;
    1a2c:	2300      	movs	r3, #0
		break;
    1a2e:	e7f9      	b.n	1a24 <atInitExecTimes+0x10>
    1a30:	200003dc 	.word	0x200003dc
    1a34:	200003b0 	.word	0x200003b0

00001a38 <newATCACommand>:
{
    1a38:	b570      	push	{r4, r5, r6, lr}
    1a3a:	0005      	movs	r5, r0
	ATCACommand cacmd = (ATCACommand)malloc(sizeof(struct atca_command));
    1a3c:	2008      	movs	r0, #8
    1a3e:	4b08      	ldr	r3, [pc, #32]	; (1a60 <newATCACommand+0x28>)
    1a40:	4798      	blx	r3
    1a42:	0004      	movs	r4, r0
	cacmd->dt = device_type;
    1a44:	7005      	strb	r5, [r0, #0]
	status = atInitExecTimes(cacmd, device_type);  // setup typical execution times for this device type
    1a46:	0029      	movs	r1, r5
    1a48:	4b06      	ldr	r3, [pc, #24]	; (1a64 <newATCACommand+0x2c>)
    1a4a:	4798      	blx	r3
	if (status != ATCA_SUCCESS) {
    1a4c:	2800      	cmp	r0, #0
    1a4e:	d101      	bne.n	1a54 <newATCACommand+0x1c>
}
    1a50:	0020      	movs	r0, r4
    1a52:	bd70      	pop	{r4, r5, r6, pc}
		free(cacmd);
    1a54:	0020      	movs	r0, r4
    1a56:	4b04      	ldr	r3, [pc, #16]	; (1a68 <newATCACommand+0x30>)
    1a58:	4798      	blx	r3
		cacmd = NULL;
    1a5a:	2400      	movs	r4, #0
	return cacmd;
    1a5c:	e7f8      	b.n	1a50 <newATCACommand+0x18>
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	000067f9 	.word	0x000067f9
    1a64:	00001a15 	.word	0x00001a15
    1a68:	0000680d 	.word	0x0000680d

00001a6c <atGetExecTime>:
 * \return typical execution time in milleseconds for the given command
 */

uint16_t atGetExecTime( ATCACommand cacmd, ATCA_CmdMap cmd )
{
	return cacmd->execution_times[cmd];
    1a6c:	6843      	ldr	r3, [r0, #4]
    1a6e:	0049      	lsls	r1, r1, #1
    1a70:	5a58      	ldrh	r0, [r3, r1]
}
    1a72:	4770      	bx	lr

00001a74 <atCRC>:
 * \param[in]  data    Pointer to the data over which to compute the CRC
 * \param[out] crc     Pointer to the place where the two-bytes of CRC will be
 *                     returned in little-endian byte order.
 */
void atCRC( size_t length, const uint8_t *data, uint8_t *crc_le )
{
    1a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a76:	46d6      	mov	lr, sl
    1a78:	464f      	mov	r7, r9
    1a7a:	4646      	mov	r6, r8
    1a7c:	b5c0      	push	{r6, r7, lr}
    1a7e:	4694      	mov	ip, r2
	uint16_t crc_register = 0;
	uint16_t polynom = 0x8005;
	uint8_t shift_register;
	uint8_t data_bit, crc_bit;

	for (counter = 0; counter < length; counter++) {
    1a80:	2800      	cmp	r0, #0
    1a82:	d021      	beq.n	1ac8 <atCRC+0x54>
    1a84:	4689      	mov	r9, r1
    1a86:	4688      	mov	r8, r1
    1a88:	4480      	add	r8, r0
    1a8a:	2300      	movs	r3, #0
		for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1) {
			data_bit = (data[counter] & shift_register) ? 1 : 0;
			crc_bit = crc_register >> 15;
			crc_register <<= 1;
			if (data_bit != crc_bit)
				crc_register ^= polynom;
    1a8c:	4813      	ldr	r0, [pc, #76]	; (1adc <atCRC+0x68>)
    1a8e:	e016      	b.n	1abe <atCRC+0x4a>
		for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1) {
    1a90:	006d      	lsls	r5, r5, #1
    1a92:	b2ed      	uxtb	r5, r5
    1a94:	3e01      	subs	r6, #1
    1a96:	2e00      	cmp	r6, #0
    1a98:	d00c      	beq.n	1ab4 <atCRC+0x40>
			crc_bit = crc_register >> 15;
    1a9a:	0bdf      	lsrs	r7, r3, #15
			crc_register <<= 1;
    1a9c:	005b      	lsls	r3, r3, #1
    1a9e:	b29b      	uxth	r3, r3
			data_bit = (data[counter] & shift_register) ? 1 : 0;
    1aa0:	002c      	movs	r4, r5
    1aa2:	400c      	ands	r4, r1
    1aa4:	1e62      	subs	r2, r4, #1
    1aa6:	4194      	sbcs	r4, r2
			if (data_bit != crc_bit)
    1aa8:	b2e4      	uxtb	r4, r4
    1aaa:	42bc      	cmp	r4, r7
    1aac:	d0f0      	beq.n	1a90 <atCRC+0x1c>
				crc_register ^= polynom;
    1aae:	4043      	eors	r3, r0
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	e7ed      	b.n	1a90 <atCRC+0x1c>
    1ab4:	2201      	movs	r2, #1
    1ab6:	4692      	mov	sl, r2
    1ab8:	44d1      	add	r9, sl
	for (counter = 0; counter < length; counter++) {
    1aba:	45c1      	cmp	r9, r8
    1abc:	d005      	beq.n	1aca <atCRC+0x56>
			data_bit = (data[counter] & shift_register) ? 1 : 0;
    1abe:	464a      	mov	r2, r9
    1ac0:	7811      	ldrb	r1, [r2, #0]
    1ac2:	2608      	movs	r6, #8
    1ac4:	2501      	movs	r5, #1
    1ac6:	e7e8      	b.n	1a9a <atCRC+0x26>
	uint16_t crc_register = 0;
    1ac8:	2300      	movs	r3, #0
		}
	}
	crc_le[0] = (uint8_t)(crc_register & 0x00FF);
    1aca:	4662      	mov	r2, ip
    1acc:	7013      	strb	r3, [r2, #0]
	crc_le[1] = (uint8_t)(crc_register >> 8);
    1ace:	0a1b      	lsrs	r3, r3, #8
    1ad0:	7053      	strb	r3, [r2, #1]
}
    1ad2:	bc1c      	pop	{r2, r3, r4}
    1ad4:	4690      	mov	r8, r2
    1ad6:	4699      	mov	r9, r3
    1ad8:	46a2      	mov	sl, r4
    1ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1adc:	ffff8005 	.word	0xffff8005

00001ae0 <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc( ATCAPacket *packet )
{
    1ae0:	b510      	push	{r4, lr}
	uint8_t length, *crc;

	length = packet->txsize - ATCA_CRC_SIZE;
	// computer pointer to CRC in the packet
	crc = &(packet->txsize) + length;
    1ae2:	1c41      	adds	r1, r0, #1
	length = packet->txsize - ATCA_CRC_SIZE;
    1ae4:	7840      	ldrb	r0, [r0, #1]
    1ae6:	3802      	subs	r0, #2
	crc = &(packet->txsize) + length;
    1ae8:	b2c0      	uxtb	r0, r0
    1aea:	180a      	adds	r2, r1, r0

	// stuff CRC into packet
	atCRC(length, &(packet->txsize), crc);
    1aec:	4b01      	ldr	r3, [pc, #4]	; (1af4 <atCalcCrc+0x14>)
    1aee:	4798      	blx	r3
}
    1af0:	bd10      	pop	{r4, pc}
    1af2:	46c0      	nop			; (mov r8, r8)
    1af4:	00001a75 	.word	0x00001a75

00001af8 <atCheckMAC>:
{
    1af8:	b510      	push	{r4, lr}
	packet->opcode = ATCA_CHECKMAC;
    1afa:	2328      	movs	r3, #40	; 0x28
    1afc:	708b      	strb	r3, [r1, #2]
	packet->txsize = CHECKMAC_COUNT;
    1afe:	332c      	adds	r3, #44	; 0x2c
    1b00:	704b      	strb	r3, [r1, #1]
	packet->rxsize = CHECKMAC_RSP_SIZE;
    1b02:	2204      	movs	r2, #4
    1b04:	3336      	adds	r3, #54	; 0x36
    1b06:	52ca      	strh	r2, [r1, r3]
	atCalcCrc( packet );
    1b08:	0008      	movs	r0, r1
    1b0a:	4b02      	ldr	r3, [pc, #8]	; (1b14 <atCheckMAC+0x1c>)
    1b0c:	4798      	blx	r3
}
    1b0e:	2000      	movs	r0, #0
    1b10:	bd10      	pop	{r4, pc}
    1b12:	46c0      	nop			; (mov r8, r8)
    1b14:	00001ae1 	.word	0x00001ae1

00001b18 <atDeriveKey>:
{
    1b18:	b510      	push	{r4, lr}
	packet->opcode = ATCA_DERIVE_KEY;
    1b1a:	231c      	movs	r3, #28
    1b1c:	708b      	strb	r3, [r1, #2]
	switch ( hasMAC ) {
    1b1e:	2a01      	cmp	r2, #1
    1b20:	d009      	beq.n	1b36 <atDeriveKey+0x1e>
		packet->txsize = DERIVE_KEY_COUNT_SMALL;
    1b22:	2307      	movs	r3, #7
    1b24:	704b      	strb	r3, [r1, #1]
	packet->rxsize = DERIVE_KEY_RSP_SIZE;
    1b26:	2204      	movs	r2, #4
    1b28:	238a      	movs	r3, #138	; 0x8a
    1b2a:	52ca      	strh	r2, [r1, r3]
	atCalcCrc( packet );
    1b2c:	0008      	movs	r0, r1
    1b2e:	4b03      	ldr	r3, [pc, #12]	; (1b3c <atDeriveKey+0x24>)
    1b30:	4798      	blx	r3
}
    1b32:	2000      	movs	r0, #0
    1b34:	bd10      	pop	{r4, pc}
		packet->txsize = DERIVE_KEY_COUNT_LARGE;
    1b36:	330b      	adds	r3, #11
    1b38:	704b      	strb	r3, [r1, #1]
		break;
    1b3a:	e7f4      	b.n	1b26 <atDeriveKey+0xe>
    1b3c:	00001ae1 	.word	0x00001ae1

00001b40 <atGenDig>:
{
    1b40:	b510      	push	{r4, lr}
	packet->opcode = ATCA_GENDIG;
    1b42:	2315      	movs	r3, #21
    1b44:	708b      	strb	r3, [r1, #2]
	if (packet->param1 == GENDIG_ZONE_SHARED_NONCE) // shared nonce mode
    1b46:	78cb      	ldrb	r3, [r1, #3]
    1b48:	2b03      	cmp	r3, #3
    1b4a:	d00b      	beq.n	1b64 <atGenDig+0x24>
	else if ( hasMACKey == true )
    1b4c:	2a00      	cmp	r2, #0
    1b4e:	d10c      	bne.n	1b6a <atGenDig+0x2a>
		packet->txsize = GENDIG_COUNT;
    1b50:	2307      	movs	r3, #7
    1b52:	704b      	strb	r3, [r1, #1]
	packet->rxsize = GENDIG_RSP_SIZE;
    1b54:	2204      	movs	r2, #4
    1b56:	238a      	movs	r3, #138	; 0x8a
    1b58:	52ca      	strh	r2, [r1, r3]
	atCalcCrc( packet );
    1b5a:	0008      	movs	r0, r1
    1b5c:	4b04      	ldr	r3, [pc, #16]	; (1b70 <atGenDig+0x30>)
    1b5e:	4798      	blx	r3
}
    1b60:	2000      	movs	r0, #0
    1b62:	bd10      	pop	{r4, pc}
		packet->txsize = GENDIG_COUNT + 32;
    1b64:	3324      	adds	r3, #36	; 0x24
    1b66:	704b      	strb	r3, [r1, #1]
    1b68:	e7f4      	b.n	1b54 <atGenDig+0x14>
		packet->txsize = GENDIG_COUNT + 4;
    1b6a:	230b      	movs	r3, #11
    1b6c:	704b      	strb	r3, [r1, #1]
    1b6e:	e7f1      	b.n	1b54 <atGenDig+0x14>
    1b70:	00001ae1 	.word	0x00001ae1

00001b74 <atInfo>:
{
    1b74:	b510      	push	{r4, lr}
	packet->opcode = ATCA_INFO;
    1b76:	2330      	movs	r3, #48	; 0x30
    1b78:	708b      	strb	r3, [r1, #2]
	packet->txsize = INFO_COUNT;
    1b7a:	3b29      	subs	r3, #41	; 0x29
    1b7c:	704b      	strb	r3, [r1, #1]
	packet->rxsize = INFO_RSP_SIZE;
    1b7e:	228a      	movs	r2, #138	; 0x8a
    1b80:	528b      	strh	r3, [r1, r2]
	atCalcCrc( packet );
    1b82:	0008      	movs	r0, r1
    1b84:	4b01      	ldr	r3, [pc, #4]	; (1b8c <atInfo+0x18>)
    1b86:	4798      	blx	r3
}
    1b88:	2000      	movs	r0, #0
    1b8a:	bd10      	pop	{r4, pc}
    1b8c:	00001ae1 	.word	0x00001ae1

00001b90 <atLock>:
{
    1b90:	b510      	push	{r4, lr}
	packet->opcode = ATCA_LOCK;
    1b92:	2317      	movs	r3, #23
    1b94:	708b      	strb	r3, [r1, #2]
	packet->txsize = LOCK_COUNT;
    1b96:	3b10      	subs	r3, #16
    1b98:	704b      	strb	r3, [r1, #1]
	packet->rxsize = LOCK_RSP_SIZE;
    1b9a:	2204      	movs	r2, #4
    1b9c:	3383      	adds	r3, #131	; 0x83
    1b9e:	52ca      	strh	r2, [r1, r3]
	atCalcCrc( packet );
    1ba0:	0008      	movs	r0, r1
    1ba2:	4b02      	ldr	r3, [pc, #8]	; (1bac <atLock+0x1c>)
    1ba4:	4798      	blx	r3
}
    1ba6:	2000      	movs	r0, #0
    1ba8:	bd10      	pop	{r4, pc}
    1baa:	46c0      	nop			; (mov r8, r8)
    1bac:	00001ae1 	.word	0x00001ae1

00001bb0 <atMAC>:
{
    1bb0:	b510      	push	{r4, lr}
	packet->opcode = ATCA_MAC;
    1bb2:	2308      	movs	r3, #8
    1bb4:	708b      	strb	r3, [r1, #2]
	if (!(packet->param1 & MAC_MODE_BLOCK2_TEMPKEY))
    1bb6:	78cb      	ldrb	r3, [r1, #3]
    1bb8:	07db      	lsls	r3, r3, #31
    1bba:	d509      	bpl.n	1bd0 <atMAC+0x20>
		packet->txsize = MAC_COUNT_SHORT;
    1bbc:	2307      	movs	r3, #7
    1bbe:	704b      	strb	r3, [r1, #1]
	packet->rxsize = MAC_RSP_SIZE;
    1bc0:	2223      	movs	r2, #35	; 0x23
    1bc2:	238a      	movs	r3, #138	; 0x8a
    1bc4:	52ca      	strh	r2, [r1, r3]
	atCalcCrc( packet );
    1bc6:	0008      	movs	r0, r1
    1bc8:	4b03      	ldr	r3, [pc, #12]	; (1bd8 <atMAC+0x28>)
    1bca:	4798      	blx	r3
}
    1bcc:	2000      	movs	r0, #0
    1bce:	bd10      	pop	{r4, pc}
		packet->txsize = MAC_COUNT_LONG;
    1bd0:	2327      	movs	r3, #39	; 0x27
    1bd2:	704b      	strb	r3, [r1, #1]
    1bd4:	e7f4      	b.n	1bc0 <atMAC+0x10>
    1bd6:	46c0      	nop			; (mov r8, r8)
    1bd8:	00001ae1 	.word	0x00001ae1

00001bdc <atNonce>:
{
    1bdc:	b510      	push	{r4, lr}
    1bde:	78ca      	ldrb	r2, [r1, #3]
    1be0:	2303      	movs	r3, #3
    1be2:	4013      	ands	r3, r2
	packet->opcode = ATCA_NONCE;
    1be4:	2216      	movs	r2, #22
    1be6:	708a      	strb	r2, [r1, #2]
	if ( (mode == 0 || mode == 1) ) {       // mode[0:1] == 0 | 1 then NumIn is 20 bytes
    1be8:	2b01      	cmp	r3, #1
    1bea:	d903      	bls.n	1bf4 <atNonce+0x18>
		return ATCA_BAD_PARAM;
    1bec:	20e2      	movs	r0, #226	; 0xe2
	} else if ( mode == 0x03 ) {            // NumIn is 32 bytes
    1bee:	2b03      	cmp	r3, #3
    1bf0:	d00a      	beq.n	1c08 <atNonce+0x2c>
}
    1bf2:	bd10      	pop	{r4, pc}
		packet->txsize = NONCE_COUNT_SHORT; // 20 byte challenge
    1bf4:	231b      	movs	r3, #27
    1bf6:	704b      	strb	r3, [r1, #1]
		packet->rxsize = NONCE_RSP_SIZE_LONG;
    1bf8:	320d      	adds	r2, #13
    1bfa:	336f      	adds	r3, #111	; 0x6f
    1bfc:	52ca      	strh	r2, [r1, r3]
	atCalcCrc( packet );
    1bfe:	0008      	movs	r0, r1
    1c00:	4b04      	ldr	r3, [pc, #16]	; (1c14 <atNonce+0x38>)
    1c02:	4798      	blx	r3
	return ATCA_SUCCESS;
    1c04:	2000      	movs	r0, #0
    1c06:	e7f4      	b.n	1bf2 <atNonce+0x16>
		packet->txsize = NONCE_COUNT_LONG;  // 32 byte challenge
    1c08:	3324      	adds	r3, #36	; 0x24
    1c0a:	704b      	strb	r3, [r1, #1]
		packet->rxsize = NONCE_RSP_SIZE_SHORT;
    1c0c:	2204      	movs	r2, #4
    1c0e:	3363      	adds	r3, #99	; 0x63
    1c10:	52ca      	strh	r2, [r1, r3]
    1c12:	e7f4      	b.n	1bfe <atNonce+0x22>
    1c14:	00001ae1 	.word	0x00001ae1

00001c18 <atRandom>:
{
    1c18:	b510      	push	{r4, lr}
	packet->opcode = ATCA_RANDOM;
    1c1a:	231b      	movs	r3, #27
    1c1c:	708b      	strb	r3, [r1, #2]
	packet->txsize = RANDOM_COUNT;
    1c1e:	3b14      	subs	r3, #20
    1c20:	704b      	strb	r3, [r1, #1]
	packet->rxsize = RANDOM_RSP_SIZE;
    1c22:	2223      	movs	r2, #35	; 0x23
    1c24:	3383      	adds	r3, #131	; 0x83
    1c26:	52ca      	strh	r2, [r1, r3]
	atCalcCrc( packet );
    1c28:	0008      	movs	r0, r1
    1c2a:	4b02      	ldr	r3, [pc, #8]	; (1c34 <atRandom+0x1c>)
    1c2c:	4798      	blx	r3
}
    1c2e:	2000      	movs	r0, #0
    1c30:	bd10      	pop	{r4, pc}
    1c32:	46c0      	nop			; (mov r8, r8)
    1c34:	00001ae1 	.word	0x00001ae1

00001c38 <atRead>:
{
    1c38:	b510      	push	{r4, lr}
	packet->opcode = ATCA_READ;
    1c3a:	2302      	movs	r3, #2
    1c3c:	708b      	strb	r3, [r1, #2]
	packet->txsize = READ_COUNT;
    1c3e:	3305      	adds	r3, #5
    1c40:	704b      	strb	r3, [r1, #1]
	if ((packet->param1 & 0x80) == 0 )
    1c42:	78cb      	ldrb	r3, [r1, #3]
    1c44:	2b7f      	cmp	r3, #127	; 0x7f
    1c46:	d807      	bhi.n	1c58 <atRead+0x20>
		packet->rxsize = READ_4_RSP_SIZE;
    1c48:	2207      	movs	r2, #7
    1c4a:	238a      	movs	r3, #138	; 0x8a
    1c4c:	52ca      	strh	r2, [r1, r3]
	atCalcCrc( packet );
    1c4e:	0008      	movs	r0, r1
    1c50:	4b03      	ldr	r3, [pc, #12]	; (1c60 <atRead+0x28>)
    1c52:	4798      	blx	r3
}
    1c54:	2000      	movs	r0, #0
    1c56:	bd10      	pop	{r4, pc}
		packet->rxsize = READ_32_RSP_SIZE;
    1c58:	2223      	movs	r2, #35	; 0x23
    1c5a:	238a      	movs	r3, #138	; 0x8a
    1c5c:	52ca      	strh	r2, [r1, r3]
    1c5e:	e7f6      	b.n	1c4e <atRead+0x16>
    1c60:	00001ae1 	.word	0x00001ae1

00001c64 <atUpdateExtra>:
{
    1c64:	b510      	push	{r4, lr}
	packet->opcode = ATCA_UPDATE_EXTRA;
    1c66:	2320      	movs	r3, #32
    1c68:	708b      	strb	r3, [r1, #2]
	packet->txsize = UPDATE_COUNT;
    1c6a:	3b19      	subs	r3, #25
    1c6c:	704b      	strb	r3, [r1, #1]
	packet->rxsize = UPDATE_RSP_SIZE;
    1c6e:	2204      	movs	r2, #4
    1c70:	3383      	adds	r3, #131	; 0x83
    1c72:	52ca      	strh	r2, [r1, r3]
	atCalcCrc( packet );
    1c74:	0008      	movs	r0, r1
    1c76:	4b02      	ldr	r3, [pc, #8]	; (1c80 <atUpdateExtra+0x1c>)
    1c78:	4798      	blx	r3
}
    1c7a:	2000      	movs	r0, #0
    1c7c:	bd10      	pop	{r4, pc}
    1c7e:	46c0      	nop			; (mov r8, r8)
    1c80:	00001ae1 	.word	0x00001ae1

00001c84 <atWrite>:
{
    1c84:	b510      	push	{r4, lr}
	packet->opcode = ATCA_WRITE;
    1c86:	2312      	movs	r3, #18
    1c88:	708b      	strb	r3, [r1, #2]
    packet->txsize = 7;
    1c8a:	3b0b      	subs	r3, #11
    1c8c:	704b      	strb	r3, [r1, #1]
    if (packet->param1 & ATCA_ZONE_READWRITE_32)
    1c8e:	78cb      	ldrb	r3, [r1, #3]
    1c90:	2b7f      	cmp	r3, #127	; 0x7f
    1c92:	d80e      	bhi.n	1cb2 <atWrite+0x2e>
        packet->txsize += ATCA_WORD_SIZE;
    1c94:	230b      	movs	r3, #11
    1c96:	704b      	strb	r3, [r1, #1]
    if (hasMAC)
    1c98:	2a00      	cmp	r2, #0
    1c9a:	d002      	beq.n	1ca2 <atWrite+0x1e>
        packet->txsize += WRITE_MAC_SIZE;
    1c9c:	784b      	ldrb	r3, [r1, #1]
    1c9e:	3320      	adds	r3, #32
    1ca0:	704b      	strb	r3, [r1, #1]
	packet->rxsize = WRITE_RSP_SIZE;
    1ca2:	2204      	movs	r2, #4
    1ca4:	238a      	movs	r3, #138	; 0x8a
    1ca6:	52ca      	strh	r2, [r1, r3]
	atCalcCrc( packet );
    1ca8:	0008      	movs	r0, r1
    1caa:	4b03      	ldr	r3, [pc, #12]	; (1cb8 <atWrite+0x34>)
    1cac:	4798      	blx	r3
}
    1cae:	2000      	movs	r0, #0
    1cb0:	bd10      	pop	{r4, pc}
        packet->txsize += ATCA_BLOCK_SIZE;
    1cb2:	2327      	movs	r3, #39	; 0x27
    1cb4:	704b      	strb	r3, [r1, #1]
    1cb6:	e7ef      	b.n	1c98 <atWrite+0x14>
    1cb8:	00001ae1 	.word	0x00001ae1

00001cbc <isATCAError>:
 * \param[in] data pointer to received data - expected to be in the form of a CA device response frame
 * \return ATCA_STATUS indicating type of error or no error
 */

ATCA_STATUS isATCAError( uint8_t *data )
{
    1cbc:	b510      	push	{r4, lr}
    1cbe:	b082      	sub	sp, #8
    1cc0:	0004      	movs	r4, r0
	uint8_t good[4] = { 0x04, 0x00, 0x03, 0x40 };
    1cc2:	4b14      	ldr	r3, [pc, #80]	; (1d14 <isATCAError+0x58>)
    1cc4:	681b      	ldr	r3, [r3, #0]
    1cc6:	9301      	str	r3, [sp, #4]

	if ( memcmp( data, good, 4 ) == 0 )
    1cc8:	2204      	movs	r2, #4
    1cca:	a901      	add	r1, sp, #4
    1ccc:	4b12      	ldr	r3, [pc, #72]	; (1d18 <isATCAError+0x5c>)
    1cce:	4798      	blx	r3
		return ATCA_SUCCESS;
    1cd0:	2300      	movs	r3, #0
	if ( memcmp( data, good, 4 ) == 0 )
    1cd2:	2800      	cmp	r0, #0
    1cd4:	d002      	beq.n	1cdc <isATCAError+0x20>

	if ( data[0] == 0x04 ) {    // error packets are always 4 bytes long
    1cd6:	7822      	ldrb	r2, [r4, #0]
    1cd8:	2a04      	cmp	r2, #4
    1cda:	d002      	beq.n	1ce2 <isATCAError+0x26>
			return ATCA_GEN_FAIL;
			break;
		}
	} else
		return ATCA_SUCCESS;
}
    1cdc:	0018      	movs	r0, r3
    1cde:	b002      	add	sp, #8
    1ce0:	bd10      	pop	{r4, pc}
		switch ( data[1] ) {
    1ce2:	7862      	ldrb	r2, [r4, #1]
    1ce4:	2a0f      	cmp	r2, #15
    1ce6:	d012      	beq.n	1d0e <isATCAError+0x52>
    1ce8:	b2d3      	uxtb	r3, r2
    1cea:	2b0f      	cmp	r3, #15
    1cec:	d807      	bhi.n	1cfe <isATCAError+0x42>
			return ATCA_CHECKMAC_VERIFY_FAILED;
    1cee:	23d1      	movs	r3, #209	; 0xd1
		switch ( data[1] ) {
    1cf0:	2a01      	cmp	r2, #1
    1cf2:	d0f3      	beq.n	1cdc <isATCAError+0x20>
			return ATCA_BAD_OPCODE;
    1cf4:	3321      	adds	r3, #33	; 0x21
		switch ( data[1] ) {
    1cf6:	2a03      	cmp	r2, #3
    1cf8:	d0f0      	beq.n	1cdc <isATCAError+0x20>
			return ATCA_GEN_FAIL;
    1cfa:	23e1      	movs	r3, #225	; 0xe1
    1cfc:	e7ee      	b.n	1cdc <isATCAError+0x20>
			return ATCA_WAKE_SUCCESS;
    1cfe:	23f3      	movs	r3, #243	; 0xf3
		switch ( data[1] ) {
    1d00:	2a11      	cmp	r2, #17
    1d02:	d0eb      	beq.n	1cdc <isATCAError+0x20>
    1d04:	b2d2      	uxtb	r2, r2
			return ATCA_STATUS_CRC;
    1d06:	3b1f      	subs	r3, #31
		switch ( data[1] ) {
    1d08:	2aff      	cmp	r2, #255	; 0xff
    1d0a:	d0e7      	beq.n	1cdc <isATCAError+0x20>
    1d0c:	e7f5      	b.n	1cfa <isATCAError+0x3e>
			return ATCA_EXECUTION_ERROR;
    1d0e:	23f4      	movs	r3, #244	; 0xf4
    1d10:	e7e4      	b.n	1cdc <isATCAError+0x20>
    1d12:	46c0      	nop			; (mov r8, r8)
    1d14:	00008abc 	.word	0x00008abc
    1d18:	00006821 	.word	0x00006821

00001d1c <newATCADevice>:
 * \param[in] cfg  pointer to an interface configuration object
 * \return reference to a new ATCADevice
 */

ATCADevice newATCADevice(ATCAIfaceCfg *cfg )
{
    1d1c:	b570      	push	{r4, r5, r6, lr}
    1d1e:	1e05      	subs	r5, r0, #0
	ATCADevice cadev = NULL;

	if (cfg == NULL)
    1d20:	d017      	beq.n	1d52 <newATCADevice+0x36>
		return NULL;

	cadev = (ATCADevice)malloc(sizeof(struct atca_device));
    1d22:	2008      	movs	r0, #8
    1d24:	4b0c      	ldr	r3, [pc, #48]	; (1d58 <newATCADevice+0x3c>)
    1d26:	4798      	blx	r3
    1d28:	0004      	movs	r4, r0
	cadev->mCommands = (ATCACommand)newATCACommand(cfg->devtype);
    1d2a:	7868      	ldrb	r0, [r5, #1]
    1d2c:	4b0b      	ldr	r3, [pc, #44]	; (1d5c <newATCADevice+0x40>)
    1d2e:	4798      	blx	r3
    1d30:	6020      	str	r0, [r4, #0]
	cadev->mIface    = (ATCAIface)newATCAIface(cfg);
    1d32:	0028      	movs	r0, r5
    1d34:	4b0a      	ldr	r3, [pc, #40]	; (1d60 <newATCADevice+0x44>)
    1d36:	4798      	blx	r3
    1d38:	6060      	str	r0, [r4, #4]

	if (cadev->mCommands == NULL || cadev->mIface == NULL) {
    1d3a:	6823      	ldr	r3, [r4, #0]
    1d3c:	2b00      	cmp	r3, #0
    1d3e:	d003      	beq.n	1d48 <newATCADevice+0x2c>
    1d40:	2800      	cmp	r0, #0
    1d42:	d001      	beq.n	1d48 <newATCADevice+0x2c>
		free(cadev);
		cadev = NULL;
	}

	return cadev;
}
    1d44:	0020      	movs	r0, r4
    1d46:	bd70      	pop	{r4, r5, r6, pc}
		free(cadev);
    1d48:	0020      	movs	r0, r4
    1d4a:	4b06      	ldr	r3, [pc, #24]	; (1d64 <newATCADevice+0x48>)
    1d4c:	4798      	blx	r3
		cadev = NULL;
    1d4e:	2400      	movs	r4, #0
    1d50:	e7f8      	b.n	1d44 <newATCADevice+0x28>
		return NULL;
    1d52:	2400      	movs	r4, #0
    1d54:	e7f6      	b.n	1d44 <newATCADevice+0x28>
    1d56:	46c0      	nop			; (mov r8, r8)
    1d58:	000067f9 	.word	0x000067f9
    1d5c:	00001a39 	.word	0x00001a39
    1d60:	00001e75 	.word	0x00001e75
    1d64:	0000680d 	.word	0x0000680d

00001d68 <atGetCommands>:
 * \param[in] dev  reference to a device
 * \return reference to the ATCACommand object for the device
 */
ATCACommand atGetCommands( ATCADevice dev )
{
	return dev->mCommands;
    1d68:	6800      	ldr	r0, [r0, #0]
}
    1d6a:	4770      	bx	lr

00001d6c <atGetIFace>:
 * \return reference to the ATCAIface object for the device
 */

ATCAIface atGetIFace( ATCADevice dev )
{
	return dev->mIface;
    1d6c:	6840      	ldr	r0, [r0, #4]
}
    1d6e:	4770      	bx	lr

00001d70 <deleteATCADevice>:
 * \param[in] cadev  pointer to a reference to a device
 *
 */

void deleteATCADevice( ATCADevice *cadev ) // destructor
{
    1d70:	b570      	push	{r4, r5, r6, lr}
    1d72:	0005      	movs	r5, r0
	struct atca_device *dev = *cadev;
    1d74:	6804      	ldr	r4, [r0, #0]

	if ( *cadev ) {
    1d76:	2c00      	cmp	r4, #0
    1d78:	d008      	beq.n	1d8c <deleteATCADevice+0x1c>
		deleteATCACommand( (ATCACommand*)&(dev->mCommands));
    1d7a:	0020      	movs	r0, r4
    1d7c:	4b05      	ldr	r3, [pc, #20]	; (1d94 <deleteATCADevice+0x24>)
    1d7e:	4798      	blx	r3
		deleteATCAIface((ATCAIface*)&(dev->mIface));
    1d80:	1d20      	adds	r0, r4, #4
    1d82:	4b05      	ldr	r3, [pc, #20]	; (1d98 <deleteATCADevice+0x28>)
    1d84:	4798      	blx	r3
		free((void*)*cadev);
    1d86:	6828      	ldr	r0, [r5, #0]
    1d88:	4b04      	ldr	r3, [pc, #16]	; (1d9c <deleteATCADevice+0x2c>)
    1d8a:	4798      	blx	r3
	}

	*cadev = NULL;
    1d8c:	2300      	movs	r3, #0
    1d8e:	602b      	str	r3, [r5, #0]
}
    1d90:	bd70      	pop	{r4, r5, r6, pc}
    1d92:	46c0      	nop			; (mov r8, r8)
    1d94:	000019fd 	.word	0x000019fd
    1d98:	00001ded 	.word	0x00001ded
    1d9c:	0000680d 	.word	0x0000680d

00001da0 <atsend>:

	return status;
}

ATCA_STATUS atsend(ATCAIface caiface, uint8_t *txdata, int txlength)
{
    1da0:	b510      	push	{r4, lr}
	return caiface->atsend(caiface, txdata, txlength);
    1da2:	6903      	ldr	r3, [r0, #16]
    1da4:	4798      	blx	r3
}
    1da6:	bd10      	pop	{r4, pc}

00001da8 <atreceive>:

ATCA_STATUS atreceive( ATCAIface caiface, uint8_t *rxdata, uint16_t *rxlength)
{
    1da8:	b510      	push	{r4, lr}
	return caiface->atreceive(caiface, rxdata, rxlength);
    1daa:	6943      	ldr	r3, [r0, #20]
    1dac:	4798      	blx	r3
}
    1dae:	bd10      	pop	{r4, pc}

00001db0 <atwake>:

ATCA_STATUS atwake(ATCAIface caiface)
{
    1db0:	b510      	push	{r4, lr}
	return caiface->atwake(caiface);
    1db2:	6983      	ldr	r3, [r0, #24]
    1db4:	4798      	blx	r3
}
    1db6:	bd10      	pop	{r4, pc}

00001db8 <atidle>:

ATCA_STATUS atidle(ATCAIface caiface)
{
    1db8:	b510      	push	{r4, lr}
    1dba:	0004      	movs	r4, r0
	atca_delay_ms(1);
    1dbc:	2001      	movs	r0, #1
    1dbe:	4b03      	ldr	r3, [pc, #12]	; (1dcc <atidle+0x14>)
    1dc0:	4798      	blx	r3
	return caiface->atidle(caiface);
    1dc2:	69e3      	ldr	r3, [r4, #28]
    1dc4:	0020      	movs	r0, r4
    1dc6:	4798      	blx	r3
}
    1dc8:	bd10      	pop	{r4, pc}
    1dca:	46c0      	nop			; (mov r8, r8)
    1dcc:	00003789 	.word	0x00003789

00001dd0 <atsleep>:

ATCA_STATUS atsleep(ATCAIface caiface)
{
    1dd0:	b510      	push	{r4, lr}
    1dd2:	0004      	movs	r4, r0
	atca_delay_ms(1);
    1dd4:	2001      	movs	r0, #1
    1dd6:	4b03      	ldr	r3, [pc, #12]	; (1de4 <atsleep+0x14>)
    1dd8:	4798      	blx	r3
	return caiface->atsleep(caiface);
    1dda:	6a23      	ldr	r3, [r4, #32]
    1ddc:	0020      	movs	r0, r4
    1dde:	4798      	blx	r3
}
    1de0:	bd10      	pop	{r4, pc}
    1de2:	46c0      	nop			; (mov r8, r8)
    1de4:	00003789 	.word	0x00003789

00001de8 <atgetifacecfg>:

ATCAIfaceCfg * atgetifacecfg(ATCAIface caiface)
{
	return caiface->mIfaceCFG;
    1de8:	6840      	ldr	r0, [r0, #4]
}
    1dea:	4770      	bx	lr

00001dec <deleteATCAIface>:
{
	return caiface->hal_data;
}

void deleteATCAIface(ATCAIface *caiface) // destructor
{
    1dec:	b510      	push	{r4, lr}
    1dee:	0004      	movs	r4, r0
	if ( *caiface ) {
    1df0:	6803      	ldr	r3, [r0, #0]
    1df2:	2b00      	cmp	r3, #0
    1df4:	d006      	beq.n	1e04 <deleteATCAIface+0x18>
		hal_iface_release( (*caiface)->mType, (*caiface)->hal_data);  // let HAL clean up and disable physical level interface if ref count is 0
    1df6:	6a59      	ldr	r1, [r3, #36]	; 0x24
    1df8:	7818      	ldrb	r0, [r3, #0]
    1dfa:	4b04      	ldr	r3, [pc, #16]	; (1e0c <deleteATCAIface+0x20>)
    1dfc:	4798      	blx	r3
		free((void*)*caiface);
    1dfe:	6820      	ldr	r0, [r4, #0]
    1e00:	4b03      	ldr	r3, [pc, #12]	; (1e10 <deleteATCAIface+0x24>)
    1e02:	4798      	blx	r3
	}

	*caiface = NULL;
    1e04:	2300      	movs	r3, #0
    1e06:	6023      	str	r3, [r4, #0]
}
    1e08:	bd10      	pop	{r4, pc}
    1e0a:	46c0      	nop			; (mov r8, r8)
    1e0c:	0000320d 	.word	0x0000320d
    1e10:	0000680d 	.word	0x0000680d

00001e14 <_atinit>:

ATCA_STATUS _atinit(ATCAIface caiface, ATCAHAL_t *hal)
{
    1e14:	b570      	push	{r4, r5, r6, lr}
    1e16:	0004      	movs	r4, r0
    1e18:	000d      	movs	r5, r1
	// get method mapping to HAL methods for this interface
	hal_iface_init( caiface->mIfaceCFG, hal );
    1e1a:	6840      	ldr	r0, [r0, #4]
    1e1c:	4b09      	ldr	r3, [pc, #36]	; (1e44 <_atinit+0x30>)
    1e1e:	4798      	blx	r3
	caiface->atinit     = hal->halinit;
    1e20:	682b      	ldr	r3, [r5, #0]
    1e22:	60a3      	str	r3, [r4, #8]
	caiface->atpostinit = hal->halpostinit;
    1e24:	686b      	ldr	r3, [r5, #4]
    1e26:	60e3      	str	r3, [r4, #12]
	caiface->atsend     = hal->halsend;
    1e28:	68ab      	ldr	r3, [r5, #8]
    1e2a:	6123      	str	r3, [r4, #16]
	caiface->atreceive  = hal->halreceive;
    1e2c:	68eb      	ldr	r3, [r5, #12]
    1e2e:	6163      	str	r3, [r4, #20]
	caiface->atwake     = hal->halwake;
    1e30:	692b      	ldr	r3, [r5, #16]
    1e32:	61a3      	str	r3, [r4, #24]
	caiface->atsleep    = hal->halsleep;
    1e34:	69ab      	ldr	r3, [r5, #24]
    1e36:	6223      	str	r3, [r4, #32]
	caiface->atidle     = hal->halidle;
    1e38:	696b      	ldr	r3, [r5, #20]
    1e3a:	61e3      	str	r3, [r4, #28]
	caiface->hal_data   = hal->hal_data;
    1e3c:	6a2b      	ldr	r3, [r5, #32]
    1e3e:	6263      	str	r3, [r4, #36]	; 0x24

	return ATCA_SUCCESS;
}
    1e40:	2000      	movs	r0, #0
    1e42:	bd70      	pop	{r4, r5, r6, pc}
    1e44:	000031b9 	.word	0x000031b9

00001e48 <atinit>:
{
    1e48:	b510      	push	{r4, lr}
    1e4a:	b08a      	sub	sp, #40	; 0x28
    1e4c:	0004      	movs	r4, r0
	_atinit( caiface, &hal );
    1e4e:	a901      	add	r1, sp, #4
    1e50:	4b07      	ldr	r3, [pc, #28]	; (1e70 <atinit+0x28>)
    1e52:	4798      	blx	r3
	status = caiface->atinit( &hal, caiface->mIfaceCFG );
    1e54:	6861      	ldr	r1, [r4, #4]
    1e56:	a801      	add	r0, sp, #4
    1e58:	68a3      	ldr	r3, [r4, #8]
    1e5a:	4798      	blx	r3
	if (status == ATCA_SUCCESS) {
    1e5c:	2800      	cmp	r0, #0
    1e5e:	d001      	beq.n	1e64 <atinit+0x1c>
}
    1e60:	b00a      	add	sp, #40	; 0x28
    1e62:	bd10      	pop	{r4, pc}
		caiface->hal_data = hal.hal_data;
    1e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1e66:	6263      	str	r3, [r4, #36]	; 0x24
		status = caiface->atpostinit( caiface );
    1e68:	68e3      	ldr	r3, [r4, #12]
    1e6a:	0020      	movs	r0, r4
    1e6c:	4798      	blx	r3
    1e6e:	e7f7      	b.n	1e60 <atinit+0x18>
    1e70:	00001e15 	.word	0x00001e15

00001e74 <newATCAIface>:
{
    1e74:	b570      	push	{r4, r5, r6, lr}
    1e76:	0005      	movs	r5, r0
	ATCAIface caiface = (ATCAIface)malloc(sizeof(struct atca_iface));
    1e78:	2028      	movs	r0, #40	; 0x28
    1e7a:	4b08      	ldr	r3, [pc, #32]	; (1e9c <newATCAIface+0x28>)
    1e7c:	4798      	blx	r3
    1e7e:	0004      	movs	r4, r0
	caiface->mType = cfg->iface_type;
    1e80:	782b      	ldrb	r3, [r5, #0]
    1e82:	7003      	strb	r3, [r0, #0]
	caiface->mIfaceCFG = cfg;
    1e84:	6045      	str	r5, [r0, #4]
	if (atinit(caiface) != ATCA_SUCCESS) {
    1e86:	4b06      	ldr	r3, [pc, #24]	; (1ea0 <newATCAIface+0x2c>)
    1e88:	4798      	blx	r3
    1e8a:	2800      	cmp	r0, #0
    1e8c:	d101      	bne.n	1e92 <newATCAIface+0x1e>
}
    1e8e:	0020      	movs	r0, r4
    1e90:	bd70      	pop	{r4, r5, r6, pc}
		free(caiface);
    1e92:	0020      	movs	r0, r4
    1e94:	4b03      	ldr	r3, [pc, #12]	; (1ea4 <newATCAIface+0x30>)
    1e96:	4798      	blx	r3
		caiface = NULL;
    1e98:	2400      	movs	r4, #0
	return caiface;
    1e9a:	e7f8      	b.n	1e8e <newATCAIface+0x1a>
    1e9c:	000067f9 	.word	0x000067f9
    1ea0:	00001e49 	.word	0x00001e49
    1ea4:	0000680d 	.word	0x0000680d

00001ea8 <atcab_release>:
/** \brief release (free) the global ATCADevice instance.
 *  This must be called in order to release or free up the interface.
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_release( void )
{
    1ea8:	b510      	push	{r4, lr}
	deleteATCADevice(&_gDevice);
    1eaa:	4802      	ldr	r0, [pc, #8]	; (1eb4 <atcab_release+0xc>)
    1eac:	4b02      	ldr	r3, [pc, #8]	; (1eb8 <atcab_release+0x10>)
    1eae:	4798      	blx	r3
	return ATCA_SUCCESS;
}
    1eb0:	2000      	movs	r0, #0
    1eb2:	bd10      	pop	{r4, pc}
    1eb4:	200009d8 	.word	0x200009d8
    1eb8:	00001d71 	.word	0x00001d71

00001ebc <atcab_init>:
{
    1ebc:	b510      	push	{r4, lr}
    1ebe:	0004      	movs	r4, r0
	if ( _gDevice )     // if there's already a device created, release it
    1ec0:	4b11      	ldr	r3, [pc, #68]	; (1f08 <atcab_init+0x4c>)
    1ec2:	681b      	ldr	r3, [r3, #0]
    1ec4:	2b00      	cmp	r3, #0
    1ec6:	d001      	beq.n	1ecc <atcab_init+0x10>
		atcab_release();
    1ec8:	4b10      	ldr	r3, [pc, #64]	; (1f0c <atcab_init+0x50>)
    1eca:	4798      	blx	r3
	_gDevice = newATCADevice( cfg );
    1ecc:	0020      	movs	r0, r4
    1ece:	4b10      	ldr	r3, [pc, #64]	; (1f10 <atcab_init+0x54>)
    1ed0:	4798      	blx	r3
    1ed2:	4b0d      	ldr	r3, [pc, #52]	; (1f08 <atcab_init+0x4c>)
    1ed4:	6018      	str	r0, [r3, #0]
		return ATCA_GEN_FAIL; // Device creation failed
    1ed6:	23e1      	movs	r3, #225	; 0xe1
	if ( _gDevice == NULL )
    1ed8:	2800      	cmp	r0, #0
    1eda:	d00f      	beq.n	1efc <atcab_init+0x40>
	_gCommandObj = atGetCommands( _gDevice );
    1edc:	4b0d      	ldr	r3, [pc, #52]	; (1f14 <atcab_init+0x58>)
    1ede:	4798      	blx	r3
    1ee0:	4c0d      	ldr	r4, [pc, #52]	; (1f18 <atcab_init+0x5c>)
    1ee2:	6020      	str	r0, [r4, #0]
	_gIface = atGetIFace( _gDevice );
    1ee4:	4b08      	ldr	r3, [pc, #32]	; (1f08 <atcab_init+0x4c>)
    1ee6:	6818      	ldr	r0, [r3, #0]
    1ee8:	4b0c      	ldr	r3, [pc, #48]	; (1f1c <atcab_init+0x60>)
    1eea:	4798      	blx	r3
    1eec:	4b0c      	ldr	r3, [pc, #48]	; (1f20 <atcab_init+0x64>)
    1eee:	6018      	str	r0, [r3, #0]
	if ( _gCommandObj == NULL || _gIface == NULL )
    1ef0:	6823      	ldr	r3, [r4, #0]
    1ef2:	2b00      	cmp	r3, #0
    1ef4:	d004      	beq.n	1f00 <atcab_init+0x44>
    1ef6:	2800      	cmp	r0, #0
    1ef8:	d004      	beq.n	1f04 <atcab_init+0x48>
	return ATCA_SUCCESS;
    1efa:	2300      	movs	r3, #0
}
    1efc:	0018      	movs	r0, r3
    1efe:	bd10      	pop	{r4, pc}
		return ATCA_GEN_FAIL; // More of an assert to make everything was constructed properly
    1f00:	23e1      	movs	r3, #225	; 0xe1
    1f02:	e7fb      	b.n	1efc <atcab_init+0x40>
    1f04:	23e1      	movs	r3, #225	; 0xe1
    1f06:	e7f9      	b.n	1efc <atcab_init+0x40>
    1f08:	200009d8 	.word	0x200009d8
    1f0c:	00001ea9 	.word	0x00001ea9
    1f10:	00001d1d 	.word	0x00001d1d
    1f14:	00001d69 	.word	0x00001d69
    1f18:	200009d4 	.word	0x200009d4
    1f1c:	00001d6d 	.word	0x00001d6d
    1f20:	200009dc 	.word	0x200009dc

00001f24 <atcab_wakeup>:

/** \brief wakeup the CryptoAuth device
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_wakeup(void)
{
    1f24:	b510      	push	{r4, lr}
	if ( _gDevice == NULL )
    1f26:	4b05      	ldr	r3, [pc, #20]	; (1f3c <atcab_wakeup+0x18>)
    1f28:	681b      	ldr	r3, [r3, #0]
		return ATCA_GEN_FAIL;
    1f2a:	20e1      	movs	r0, #225	; 0xe1
	if ( _gDevice == NULL )
    1f2c:	2b00      	cmp	r3, #0
    1f2e:	d003      	beq.n	1f38 <atcab_wakeup+0x14>

	return atwake(_gIface);
    1f30:	4b03      	ldr	r3, [pc, #12]	; (1f40 <atcab_wakeup+0x1c>)
    1f32:	6818      	ldr	r0, [r3, #0]
    1f34:	4b03      	ldr	r3, [pc, #12]	; (1f44 <atcab_wakeup+0x20>)
    1f36:	4798      	blx	r3
}
    1f38:	bd10      	pop	{r4, pc}
    1f3a:	46c0      	nop			; (mov r8, r8)
    1f3c:	200009d8 	.word	0x200009d8
    1f40:	200009dc 	.word	0x200009dc
    1f44:	00001db1 	.word	0x00001db1

00001f48 <atcab_idle>:

/** \brief idle the CryptoAuth device
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_idle(void)
{
    1f48:	b510      	push	{r4, lr}
	if ( _gDevice == NULL )
    1f4a:	4b05      	ldr	r3, [pc, #20]	; (1f60 <atcab_idle+0x18>)
    1f4c:	681b      	ldr	r3, [r3, #0]
		return ATCA_GEN_FAIL;
    1f4e:	20e1      	movs	r0, #225	; 0xe1
	if ( _gDevice == NULL )
    1f50:	2b00      	cmp	r3, #0
    1f52:	d003      	beq.n	1f5c <atcab_idle+0x14>

	return atidle(_gIface);
    1f54:	4b03      	ldr	r3, [pc, #12]	; (1f64 <atcab_idle+0x1c>)
    1f56:	6818      	ldr	r0, [r3, #0]
    1f58:	4b03      	ldr	r3, [pc, #12]	; (1f68 <atcab_idle+0x20>)
    1f5a:	4798      	blx	r3
}
    1f5c:	bd10      	pop	{r4, pc}
    1f5e:	46c0      	nop			; (mov r8, r8)
    1f60:	200009d8 	.word	0x200009d8
    1f64:	200009dc 	.word	0x200009dc
    1f68:	00001db9 	.word	0x00001db9

00001f6c <_atcab_exit>:

/** \brief common cleanup code which idles the device after any operation
 *  \return ATCA_STATUS
 */
static ATCA_STATUS _atcab_exit(void)
{
    1f6c:	b510      	push	{r4, lr}
	return atcab_idle();
    1f6e:	4b01      	ldr	r3, [pc, #4]	; (1f74 <_atcab_exit+0x8>)
    1f70:	4798      	blx	r3
}
    1f72:	bd10      	pop	{r4, pc}
    1f74:	00001f49 	.word	0x00001f49

00001f78 <atcab_sleep>:
{
    1f78:	b510      	push	{r4, lr}
	if ( _gDevice == NULL )
    1f7a:	4b05      	ldr	r3, [pc, #20]	; (1f90 <atcab_sleep+0x18>)
    1f7c:	681b      	ldr	r3, [r3, #0]
		return ATCA_GEN_FAIL;
    1f7e:	20e1      	movs	r0, #225	; 0xe1
	if ( _gDevice == NULL )
    1f80:	2b00      	cmp	r3, #0
    1f82:	d003      	beq.n	1f8c <atcab_sleep+0x14>
	return atsleep(_gIface);
    1f84:	4b03      	ldr	r3, [pc, #12]	; (1f94 <atcab_sleep+0x1c>)
    1f86:	6818      	ldr	r0, [r3, #0]
    1f88:	4b03      	ldr	r3, [pc, #12]	; (1f98 <atcab_sleep+0x20>)
    1f8a:	4798      	blx	r3
}
    1f8c:	bd10      	pop	{r4, pc}
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	200009d8 	.word	0x200009d8
    1f94:	200009dc 	.word	0x200009dc
    1f98:	00001dd1 	.word	0x00001dd1

00001f9c <atcab_info>:
 *  \param[out] revision - 4-byte storage for receiving the revision number from the device
 *  \return ATCA_STATUS
 */

ATCA_STATUS atcab_info(uint8_t *revision )
{
    1f9c:	b570      	push	{r4, r5, r6, lr}
    1f9e:	b0a4      	sub	sp, #144	; 0x90
    1fa0:	0005      	movs	r5, r0
	ATCAPacket packet;
	ATCA_STATUS status = ATCA_GEN_FAIL;
	uint32_t execution_time;

	if ( !_gDevice )
    1fa2:	4b39      	ldr	r3, [pc, #228]	; (2088 <STACK_SIZE+0x88>)
    1fa4:	681b      	ldr	r3, [r3, #0]
    1fa6:	2b00      	cmp	r3, #0
    1fa8:	d100      	bne.n	1fac <atcab_info+0x10>
    1faa:	e06a      	b.n	2082 <STACK_SIZE+0x82>
		return ATCA_GEN_FAIL;

	// build an info command
	packet.param1 = INFO_MODE_REVISION;
    1fac:	ab01      	add	r3, sp, #4
    1fae:	2200      	movs	r2, #0
    1fb0:	70da      	strb	r2, [r3, #3]
	packet.param2 = 0;
    1fb2:	809a      	strh	r2, [r3, #4]

	do {
		// Check the inputs
		if (revision == NULL)
    1fb4:	2800      	cmp	r0, #0
    1fb6:	d011      	beq.n	1fdc <atcab_info+0x40>
		{
			status = ATCA_BAD_PARAM;
			BREAK(status, "atcab_info: Null inputs");
		}
		if ( (status = atInfo( _gCommandObj, &packet )) != ATCA_SUCCESS )
    1fb8:	4b34      	ldr	r3, [pc, #208]	; (208c <STACK_SIZE+0x8c>)
    1fba:	6818      	ldr	r0, [r3, #0]
    1fbc:	a901      	add	r1, sp, #4
    1fbe:	4b34      	ldr	r3, [pc, #208]	; (2090 <STACK_SIZE+0x90>)
    1fc0:	4798      	blx	r3
    1fc2:	1e04      	subs	r4, r0, #0
    1fc4:	d010      	beq.n	1fe8 <atcab_info+0x4c>
			BREAK(status, "Failed to construct Info command");
    1fc6:	0001      	movs	r1, r0
    1fc8:	4832      	ldr	r0, [pc, #200]	; (2094 <STACK_SIZE+0x94>)
    1fca:	4b33      	ldr	r3, [pc, #204]	; (2098 <STACK_SIZE+0x98>)
    1fcc:	4798      	blx	r3
			BREAK(status, "Failed to construct Info command");

		memcpy( revision, &packet.info[1], 4 );  // don't include the receive length, only payload
	} while (0);

	if ( status != ATCA_COMM_FAIL )   // don't keep shoving more stuff at the chip if there's something wrong with comm
    1fce:	2cf0      	cmp	r4, #240	; 0xf0
    1fd0:	d001      	beq.n	1fd6 <atcab_info+0x3a>
		_atcab_exit();
    1fd2:	4b32      	ldr	r3, [pc, #200]	; (209c <STACK_SIZE+0x9c>)
    1fd4:	4798      	blx	r3

	return status;
}
    1fd6:	0020      	movs	r0, r4
    1fd8:	b024      	add	sp, #144	; 0x90
    1fda:	bd70      	pop	{r4, r5, r6, pc}
			BREAK(status, "atcab_info: Null inputs");
    1fdc:	21e2      	movs	r1, #226	; 0xe2
    1fde:	4830      	ldr	r0, [pc, #192]	; (20a0 <STACK_SIZE+0xa0>)
    1fe0:	4b2d      	ldr	r3, [pc, #180]	; (2098 <STACK_SIZE+0x98>)
    1fe2:	4798      	blx	r3
			status = ATCA_BAD_PARAM;
    1fe4:	24e2      	movs	r4, #226	; 0xe2
			BREAK(status, "atcab_info: Null inputs");
    1fe6:	e7f4      	b.n	1fd2 <atcab_info+0x36>
		execution_time = atGetExecTime( _gCommandObj, CMD_INFO);
    1fe8:	4b28      	ldr	r3, [pc, #160]	; (208c <STACK_SIZE+0x8c>)
    1fea:	6818      	ldr	r0, [r3, #0]
    1fec:	2108      	movs	r1, #8
    1fee:	4b2d      	ldr	r3, [pc, #180]	; (20a4 <STACK_SIZE+0xa4>)
    1ff0:	4798      	blx	r3
    1ff2:	0006      	movs	r6, r0
		if ( (status = atcab_wakeup()) != ATCA_SUCCESS )
    1ff4:	4b2c      	ldr	r3, [pc, #176]	; (20a8 <STACK_SIZE+0xa8>)
    1ff6:	4798      	blx	r3
    1ff8:	1e04      	subs	r4, r0, #0
    1ffa:	d004      	beq.n	2006 <STACK_SIZE+0x6>
			BREAK(status, "Failed to wakeup");
    1ffc:	0001      	movs	r1, r0
    1ffe:	482b      	ldr	r0, [pc, #172]	; (20ac <STACK_SIZE+0xac>)
    2000:	4b25      	ldr	r3, [pc, #148]	; (2098 <STACK_SIZE+0x98>)
    2002:	4798      	blx	r3
    2004:	e7e3      	b.n	1fce <atcab_info+0x32>
		if ( (status = atsend( _gIface, (uint8_t*)&packet, packet.txsize )) != ATCA_SUCCESS )
    2006:	a901      	add	r1, sp, #4
    2008:	784a      	ldrb	r2, [r1, #1]
    200a:	4b29      	ldr	r3, [pc, #164]	; (20b0 <STACK_SIZE+0xb0>)
    200c:	6818      	ldr	r0, [r3, #0]
    200e:	4b29      	ldr	r3, [pc, #164]	; (20b4 <STACK_SIZE+0xb4>)
    2010:	4798      	blx	r3
    2012:	1e04      	subs	r4, r0, #0
    2014:	d004      	beq.n	2020 <STACK_SIZE+0x20>
			BREAK(status, "Failed to send Info command");
    2016:	0001      	movs	r1, r0
    2018:	4827      	ldr	r0, [pc, #156]	; (20b8 <STACK_SIZE+0xb8>)
    201a:	4b1f      	ldr	r3, [pc, #124]	; (2098 <STACK_SIZE+0x98>)
    201c:	4798      	blx	r3
    201e:	e7d6      	b.n	1fce <atcab_info+0x32>
		atca_delay_ms(execution_time);
    2020:	0030      	movs	r0, r6
    2022:	4b26      	ldr	r3, [pc, #152]	; (20bc <STACK_SIZE+0xbc>)
    2024:	4798      	blx	r3
		if ( (status = atreceive( _gIface, &(packet.info[0]), &(packet.rxsize) )) != ATCA_SUCCESS )
    2026:	4b22      	ldr	r3, [pc, #136]	; (20b0 <STACK_SIZE+0xb0>)
    2028:	6818      	ldr	r0, [r3, #0]
    202a:	228e      	movs	r2, #142	; 0x8e
    202c:	446a      	add	r2, sp
    202e:	210a      	movs	r1, #10
    2030:	4469      	add	r1, sp
    2032:	4b23      	ldr	r3, [pc, #140]	; (20c0 <STACK_SIZE+0xc0>)
    2034:	4798      	blx	r3
    2036:	1e04      	subs	r4, r0, #0
    2038:	d10c      	bne.n	2054 <STACK_SIZE+0x54>
		if (packet.rxsize < 4) {
    203a:	238a      	movs	r3, #138	; 0x8a
    203c:	aa01      	add	r2, sp, #4
    203e:	5ad4      	ldrh	r4, [r2, r3]
    2040:	2c03      	cmp	r4, #3
    2042:	d80c      	bhi.n	205e <STACK_SIZE+0x5e>
				status = ATCA_RX_NO_RESPONSE;
    2044:	4263      	negs	r3, r4
    2046:	415c      	adcs	r4, r3
    2048:	34e6      	adds	r4, #230	; 0xe6
			BREAK(status, "Info command returned error code or no resonse");
    204a:	0021      	movs	r1, r4
    204c:	481d      	ldr	r0, [pc, #116]	; (20c4 <STACK_SIZE+0xc4>)
    204e:	4b12      	ldr	r3, [pc, #72]	; (2098 <STACK_SIZE+0x98>)
    2050:	4798      	blx	r3
    2052:	e7bc      	b.n	1fce <atcab_info+0x32>
			BREAK(status, "Failed to receive Info command");
    2054:	0001      	movs	r1, r0
    2056:	481c      	ldr	r0, [pc, #112]	; (20c8 <STACK_SIZE+0xc8>)
    2058:	4b0f      	ldr	r3, [pc, #60]	; (2098 <STACK_SIZE+0x98>)
    205a:	4798      	blx	r3
    205c:	e7b7      	b.n	1fce <atcab_info+0x32>
		if ( (status = isATCAError(packet.info)) != ATCA_SUCCESS )
    205e:	200a      	movs	r0, #10
    2060:	4468      	add	r0, sp
    2062:	4b1a      	ldr	r3, [pc, #104]	; (20cc <STACK_SIZE+0xcc>)
    2064:	4798      	blx	r3
    2066:	1e04      	subs	r4, r0, #0
    2068:	d004      	beq.n	2074 <STACK_SIZE+0x74>
			BREAK(status, "Failed to construct Info command");
    206a:	0001      	movs	r1, r0
    206c:	4809      	ldr	r0, [pc, #36]	; (2094 <STACK_SIZE+0x94>)
    206e:	4b0a      	ldr	r3, [pc, #40]	; (2098 <STACK_SIZE+0x98>)
    2070:	4798      	blx	r3
    2072:	e7ac      	b.n	1fce <atcab_info+0x32>
		memcpy( revision, &packet.info[1], 4 );  // don't include the receive length, only payload
    2074:	2204      	movs	r2, #4
    2076:	210b      	movs	r1, #11
    2078:	4469      	add	r1, sp
    207a:	0028      	movs	r0, r5
    207c:	4b14      	ldr	r3, [pc, #80]	; (20d0 <STACK_SIZE+0xd0>)
    207e:	4798      	blx	r3
    2080:	e7a7      	b.n	1fd2 <atcab_info+0x36>
		return ATCA_GEN_FAIL;
    2082:	24e1      	movs	r4, #225	; 0xe1
    2084:	e7a7      	b.n	1fd6 <atcab_info+0x3a>
    2086:	46c0      	nop			; (mov r8, r8)
    2088:	200009d8 	.word	0x200009d8
    208c:	200009d4 	.word	0x200009d4
    2090:	00001b75 	.word	0x00001b75
    2094:	00008aec 	.word	0x00008aec
    2098:	000069d5 	.word	0x000069d5
    209c:	00001f6d 	.word	0x00001f6d
    20a0:	00008ac0 	.word	0x00008ac0
    20a4:	00001a6d 	.word	0x00001a6d
    20a8:	00001f25 	.word	0x00001f25
    20ac:	00008b24 	.word	0x00008b24
    20b0:	200009dc 	.word	0x200009dc
    20b4:	00001da1 	.word	0x00001da1
    20b8:	00008b4c 	.word	0x00008b4c
    20bc:	00003789 	.word	0x00003789
    20c0:	00001da9 	.word	0x00001da9
    20c4:	00008bb0 	.word	0x00008bb0
    20c8:	00008b7c 	.word	0x00008b7c
    20cc:	00001cbd 	.word	0x00001cbd
    20d0:	0000683f 	.word	0x0000683f

000020d4 <atcab_random>:
/** \brief Get a 32 byte random number from the CryptoAuth device
 *	\param[out] rand_out ptr to 32 bytes of storage for random number
 *	\return status of the operation
 */
ATCA_STATUS atcab_random(uint8_t *rand_out)
{
    20d4:	b570      	push	{r4, r5, r6, lr}
    20d6:	b0a4      	sub	sp, #144	; 0x90
    20d8:	0005      	movs	r5, r0
	ATCA_STATUS status = ATCA_GEN_FAIL;
	ATCAPacket packet;
	uint16_t execution_time = 0;

	if ( !_gDevice )
    20da:	4b2c      	ldr	r3, [pc, #176]	; (218c <atcab_random+0xb8>)
    20dc:	681b      	ldr	r3, [r3, #0]
		return ATCA_GEN_FAIL;
    20de:	24e1      	movs	r4, #225	; 0xe1
	if ( !_gDevice )
    20e0:	2b00      	cmp	r3, #0
    20e2:	d00b      	beq.n	20fc <atcab_random+0x28>
    
	do {
        // build an random command
        packet.param1 = RANDOM_SEED_UPDATE;
    20e4:	a901      	add	r1, sp, #4
    20e6:	2300      	movs	r3, #0
    20e8:	70cb      	strb	r3, [r1, #3]
        packet.param2 = 0x0000;
    20ea:	808b      	strh	r3, [r1, #4]
        if ( (status = atRandom( _gCommandObj, &packet )) != ATCA_SUCCESS )
    20ec:	4b28      	ldr	r3, [pc, #160]	; (2190 <atcab_random+0xbc>)
    20ee:	6818      	ldr	r0, [r3, #0]
    20f0:	4b28      	ldr	r3, [pc, #160]	; (2194 <atcab_random+0xc0>)
    20f2:	4798      	blx	r3
    20f4:	1e04      	subs	r4, r0, #0
    20f6:	d004      	beq.n	2102 <atcab_random+0x2e>
        
        if (rand_out)
		    memcpy( rand_out, &packet.info[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE );
	} while (0);

	_atcab_exit();
    20f8:	4b27      	ldr	r3, [pc, #156]	; (2198 <atcab_random+0xc4>)
    20fa:	4798      	blx	r3
	return status;
}
    20fc:	0020      	movs	r0, r4
    20fe:	b024      	add	sp, #144	; 0x90
    2100:	bd70      	pop	{r4, r5, r6, pc}
        execution_time = atGetExecTime( _gCommandObj, CMD_RANDOM);
    2102:	4b23      	ldr	r3, [pc, #140]	; (2190 <atcab_random+0xbc>)
    2104:	6818      	ldr	r0, [r3, #0]
    2106:	210e      	movs	r1, #14
    2108:	4b24      	ldr	r3, [pc, #144]	; (219c <atcab_random+0xc8>)
    210a:	4798      	blx	r3
    210c:	0006      	movs	r6, r0
		if ( (status = atcab_wakeup()) != ATCA_SUCCESS )
    210e:	4b24      	ldr	r3, [pc, #144]	; (21a0 <atcab_random+0xcc>)
    2110:	4798      	blx	r3
    2112:	1e04      	subs	r4, r0, #0
    2114:	d1f0      	bne.n	20f8 <atcab_random+0x24>
		if ( (status = atsend( _gIface, (uint8_t*)&packet, packet.txsize )) != ATCA_SUCCESS)
    2116:	a901      	add	r1, sp, #4
    2118:	784a      	ldrb	r2, [r1, #1]
    211a:	4b22      	ldr	r3, [pc, #136]	; (21a4 <atcab_random+0xd0>)
    211c:	6818      	ldr	r0, [r3, #0]
    211e:	4b22      	ldr	r3, [pc, #136]	; (21a8 <atcab_random+0xd4>)
    2120:	4798      	blx	r3
    2122:	1e04      	subs	r4, r0, #0
    2124:	d1e8      	bne.n	20f8 <atcab_random+0x24>
		atca_delay_ms(execution_time);
    2126:	0030      	movs	r0, r6
    2128:	4b20      	ldr	r3, [pc, #128]	; (21ac <atcab_random+0xd8>)
    212a:	4798      	blx	r3
		if ( (status = atreceive( _gIface, packet.info, &packet.rxsize)) != ATCA_SUCCESS)
    212c:	4b1d      	ldr	r3, [pc, #116]	; (21a4 <atcab_random+0xd0>)
    212e:	6818      	ldr	r0, [r3, #0]
    2130:	228e      	movs	r2, #142	; 0x8e
    2132:	446a      	add	r2, sp
    2134:	210a      	movs	r1, #10
    2136:	4469      	add	r1, sp
    2138:	4b1d      	ldr	r3, [pc, #116]	; (21b0 <atcab_random+0xdc>)
    213a:	4798      	blx	r3
    213c:	1e04      	subs	r4, r0, #0
    213e:	d1db      	bne.n	20f8 <atcab_random+0x24>
		if (packet.rxsize < 4) {
    2140:	238a      	movs	r3, #138	; 0x8a
    2142:	aa01      	add	r2, sp, #4
    2144:	5ad4      	ldrh	r4, [r2, r3]
    2146:	2c03      	cmp	r4, #3
    2148:	d804      	bhi.n	2154 <atcab_random+0x80>
				status = ATCA_RX_NO_RESPONSE;
    214a:	4260      	negs	r0, r4
    214c:	4160      	adcs	r0, r4
    214e:	30e6      	adds	r0, #230	; 0xe6
    2150:	0004      	movs	r4, r0
    2152:	e7d1      	b.n	20f8 <atcab_random+0x24>
		if ( (status = isATCAError(packet.info)) != ATCA_SUCCESS )
    2154:	200a      	movs	r0, #10
    2156:	4468      	add	r0, sp
    2158:	4b16      	ldr	r3, [pc, #88]	; (21b4 <atcab_random+0xe0>)
    215a:	4798      	blx	r3
    215c:	1e04      	subs	r4, r0, #0
    215e:	d1cb      	bne.n	20f8 <atcab_random+0x24>
        if (packet.rxsize < packet.info[ATCA_COUNT_IDX] || packet.info[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
    2160:	aa01      	add	r2, sp, #4
    2162:	7993      	ldrb	r3, [r2, #6]
    2164:	218a      	movs	r1, #138	; 0x8a
    2166:	5a52      	ldrh	r2, [r2, r1]
    2168:	429a      	cmp	r2, r3
    216a:	d30c      	bcc.n	2186 <atcab_random+0xb2>
    216c:	2b23      	cmp	r3, #35	; 0x23
    216e:	d001      	beq.n	2174 <atcab_random+0xa0>
            status = ATCA_RX_FAIL;
    2170:	24e6      	movs	r4, #230	; 0xe6
    2172:	e7c1      	b.n	20f8 <atcab_random+0x24>
        if (rand_out)
    2174:	2d00      	cmp	r5, #0
    2176:	d0bf      	beq.n	20f8 <atcab_random+0x24>
		    memcpy( rand_out, &packet.info[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE );
    2178:	2220      	movs	r2, #32
    217a:	397f      	subs	r1, #127	; 0x7f
    217c:	4469      	add	r1, sp
    217e:	0028      	movs	r0, r5
    2180:	4b0d      	ldr	r3, [pc, #52]	; (21b8 <atcab_random+0xe4>)
    2182:	4798      	blx	r3
    2184:	e7b8      	b.n	20f8 <atcab_random+0x24>
            status = ATCA_RX_FAIL;
    2186:	24e6      	movs	r4, #230	; 0xe6
    2188:	e7b6      	b.n	20f8 <atcab_random+0x24>
    218a:	46c0      	nop			; (mov r8, r8)
    218c:	200009d8 	.word	0x200009d8
    2190:	200009d4 	.word	0x200009d4
    2194:	00001c19 	.word	0x00001c19
    2198:	00001f6d 	.word	0x00001f6d
    219c:	00001a6d 	.word	0x00001a6d
    21a0:	00001f25 	.word	0x00001f25
    21a4:	200009dc 	.word	0x200009dc
    21a8:	00001da1 	.word	0x00001da1
    21ac:	00003789 	.word	0x00003789
    21b0:	00001da9 	.word	0x00001da9
    21b4:	00001cbd 	.word	0x00001cbd
    21b8:	0000683f 	.word	0x0000683f

000021bc <atcab_challenge>:
/** \brief send a challenge to the device (a pass-through nonce)
 *  \param[in] challenge - pointer to 32 bytes of data which will be sent as the challenge
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_challenge(const uint8_t *challenge)
{
    21bc:	b530      	push	{r4, r5, lr}
    21be:	b0a5      	sub	sp, #148	; 0x94
	uint16_t execution_time = 0;

	do {
		// Verify the inputs
		if (challenge == NULL) {
			status = ATCA_BAD_PARAM;
    21c0:	24e2      	movs	r4, #226	; 0xe2
		if (challenge == NULL) {
    21c2:	2800      	cmp	r0, #0
    21c4:	d011      	beq.n	21ea <atcab_challenge+0x2e>
			break;
		}

		// build a nonce command (pass through mode)
		packet.param1 = NONCE_MODE_PASSTHROUGH;
    21c6:	ac01      	add	r4, sp, #4
    21c8:	2303      	movs	r3, #3
    21ca:	70e3      	strb	r3, [r4, #3]
		packet.param2 = 0x0000;
    21cc:	2300      	movs	r3, #0
    21ce:	80a3      	strh	r3, [r4, #4]
		memcpy( packet.info, challenge, 32 );
    21d0:	2220      	movs	r2, #32
    21d2:	0001      	movs	r1, r0
    21d4:	200a      	movs	r0, #10
    21d6:	4468      	add	r0, sp
    21d8:	4b1e      	ldr	r3, [pc, #120]	; (2254 <atcab_challenge+0x98>)
    21da:	4798      	blx	r3

		if ((status = atNonce( _gCommandObj, &packet )) != ATCA_SUCCESS )
    21dc:	4b1e      	ldr	r3, [pc, #120]	; (2258 <atcab_challenge+0x9c>)
    21de:	6818      	ldr	r0, [r3, #0]
    21e0:	0021      	movs	r1, r4
    21e2:	4b1e      	ldr	r3, [pc, #120]	; (225c <atcab_challenge+0xa0>)
    21e4:	4798      	blx	r3
    21e6:	1e04      	subs	r4, r0, #0
    21e8:	d004      	beq.n	21f4 <atcab_challenge+0x38>
		if ( (status = isATCAError(packet.info)) != ATCA_SUCCESS )
			break;

	} while (0);

	_atcab_exit();
    21ea:	4b1d      	ldr	r3, [pc, #116]	; (2260 <atcab_challenge+0xa4>)
    21ec:	4798      	blx	r3
	return status;
}
    21ee:	0020      	movs	r0, r4
    21f0:	b025      	add	sp, #148	; 0x94
    21f2:	bd30      	pop	{r4, r5, pc}
		execution_time = atGetExecTime( _gCommandObj, CMD_NONCE);
    21f4:	4b18      	ldr	r3, [pc, #96]	; (2258 <atcab_challenge+0x9c>)
    21f6:	6818      	ldr	r0, [r3, #0]
    21f8:	210b      	movs	r1, #11
    21fa:	4b1a      	ldr	r3, [pc, #104]	; (2264 <atcab_challenge+0xa8>)
    21fc:	4798      	blx	r3
    21fe:	0005      	movs	r5, r0
		if ((status = atcab_wakeup()) != ATCA_SUCCESS )
    2200:	4b19      	ldr	r3, [pc, #100]	; (2268 <atcab_challenge+0xac>)
    2202:	4798      	blx	r3
    2204:	1e04      	subs	r4, r0, #0
    2206:	d1f0      	bne.n	21ea <atcab_challenge+0x2e>
		if ((status = atsend( _gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS )
    2208:	a901      	add	r1, sp, #4
    220a:	784a      	ldrb	r2, [r1, #1]
    220c:	4b17      	ldr	r3, [pc, #92]	; (226c <atcab_challenge+0xb0>)
    220e:	6818      	ldr	r0, [r3, #0]
    2210:	4b17      	ldr	r3, [pc, #92]	; (2270 <atcab_challenge+0xb4>)
    2212:	4798      	blx	r3
    2214:	1e04      	subs	r4, r0, #0
    2216:	d1e8      	bne.n	21ea <atcab_challenge+0x2e>
		atca_delay_ms(execution_time);
    2218:	0028      	movs	r0, r5
    221a:	4b16      	ldr	r3, [pc, #88]	; (2274 <atcab_challenge+0xb8>)
    221c:	4798      	blx	r3
		if ((status = atreceive( _gIface, packet.info, &(packet.rxsize))) != ATCA_SUCCESS )
    221e:	4b13      	ldr	r3, [pc, #76]	; (226c <atcab_challenge+0xb0>)
    2220:	6818      	ldr	r0, [r3, #0]
    2222:	228e      	movs	r2, #142	; 0x8e
    2224:	446a      	add	r2, sp
    2226:	210a      	movs	r1, #10
    2228:	4469      	add	r1, sp
    222a:	4b13      	ldr	r3, [pc, #76]	; (2278 <atcab_challenge+0xbc>)
    222c:	4798      	blx	r3
    222e:	1e04      	subs	r4, r0, #0
    2230:	d1db      	bne.n	21ea <atcab_challenge+0x2e>
		if (packet.rxsize < 4) {
    2232:	238a      	movs	r3, #138	; 0x8a
    2234:	aa01      	add	r2, sp, #4
    2236:	5ad4      	ldrh	r4, [r2, r3]
    2238:	2c03      	cmp	r4, #3
    223a:	d804      	bhi.n	2246 <atcab_challenge+0x8a>
				status = ATCA_RX_NO_RESPONSE;
    223c:	4260      	negs	r0, r4
    223e:	4160      	adcs	r0, r4
    2240:	30e6      	adds	r0, #230	; 0xe6
    2242:	0004      	movs	r4, r0
    2244:	e7d1      	b.n	21ea <atcab_challenge+0x2e>
		if ( (status = isATCAError(packet.info)) != ATCA_SUCCESS )
    2246:	200a      	movs	r0, #10
    2248:	4468      	add	r0, sp
    224a:	4b0c      	ldr	r3, [pc, #48]	; (227c <atcab_challenge+0xc0>)
    224c:	4798      	blx	r3
    224e:	0004      	movs	r4, r0
    2250:	e7cb      	b.n	21ea <atcab_challenge+0x2e>
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	0000683f 	.word	0x0000683f
    2258:	200009d4 	.word	0x200009d4
    225c:	00001bdd 	.word	0x00001bdd
    2260:	00001f6d 	.word	0x00001f6d
    2264:	00001a6d 	.word	0x00001a6d
    2268:	00001f25 	.word	0x00001f25
    226c:	200009dc 	.word	0x200009dc
    2270:	00001da1 	.word	0x00001da1
    2274:	00003789 	.word	0x00003789
    2278:	00001da9 	.word	0x00001da9
    227c:	00001cbd 	.word	0x00001cbd

00002280 <atcab_nonce>:
{
    2280:	b510      	push	{r4, lr}
	return atcab_challenge(tempkey);
    2282:	4b01      	ldr	r3, [pc, #4]	; (2288 <atcab_nonce+0x8>)
    2284:	4798      	blx	r3
}
    2286:	bd10      	pop	{r4, pc}
    2288:	000021bd 	.word	0x000021bd

0000228c <atcab_get_addr>:
 *  \param[in] offset
 *  \param[in] addr
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
    228c:	b510      	push	{r4, lr}
	ATCA_STATUS status = ATCA_SUCCESS;
	uint8_t memzone = zone & 0x03;

	if (addr == NULL)
    228e:	9c02      	ldr	r4, [sp, #8]
    2290:	2c00      	cmp	r4, #0
    2292:	d008      	beq.n	22a6 <atcab_get_addr+0x1a>
	uint8_t memzone = zone & 0x03;
    2294:	2403      	movs	r4, #3
    2296:	4020      	ands	r0, r4
		return ATCA_BAD_PARAM;
	if ((memzone != ATCA_ZONE_CONFIG) && (memzone != ATCA_ZONE_DATA) && (memzone != ATCA_ZONE_OTP))
    2298:	d007      	beq.n	22aa <atcab_get_addr+0x1e>
    229a:	2802      	cmp	r0, #2
    229c:	d00d      	beq.n	22ba <atcab_get_addr+0x2e>
    229e:	2801      	cmp	r0, #1
    22a0:	d003      	beq.n	22aa <atcab_get_addr+0x1e>
		return ATCA_BAD_PARAM;
    22a2:	20e2      	movs	r0, #226	; 0xe2
    22a4:	e012      	b.n	22cc <atcab_get_addr+0x40>
		return ATCA_BAD_PARAM;
    22a6:	20e2      	movs	r0, #226	; 0xe2
    22a8:	e010      	b.n	22cc <atcab_get_addr+0x40>
		// Initialize the addr to 00
		*addr = 0;
		// Mask the offset
		offset = offset & (uint8_t)0x07;
		if ((memzone == ATCA_ZONE_CONFIG) || (memzone == ATCA_ZONE_OTP)) {
			*addr = block << 3;
    22aa:	00d2      	lsls	r2, r2, #3
			*addr |= offset;
    22ac:	2007      	movs	r0, #7
    22ae:	4003      	ands	r3, r0
    22b0:	431a      	orrs	r2, r3
    22b2:	9b02      	ldr	r3, [sp, #8]
    22b4:	801a      	strh	r2, [r3, #0]
			*addr  |= offset;
			*addr |= block << 8;
		}
	} while (0);

	return status;
    22b6:	2000      	movs	r0, #0
    22b8:	e008      	b.n	22cc <atcab_get_addr+0x40>
			*addr = slot << 3;
    22ba:	00c9      	lsls	r1, r1, #3
			*addr  |= offset;
    22bc:	2007      	movs	r0, #7
    22be:	4003      	ands	r3, r0
    22c0:	430b      	orrs	r3, r1
			*addr |= block << 8;
    22c2:	0212      	lsls	r2, r2, #8
    22c4:	431a      	orrs	r2, r3
    22c6:	9b02      	ldr	r3, [sp, #8]
    22c8:	801a      	strh	r2, [r3, #0]
	return status;
    22ca:	2000      	movs	r0, #0
}
    22cc:	bd10      	pop	{r4, pc}
	...

000022d0 <atcab_get_zone_size>:
 * \param[out] size  Zone size is returned here.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_get_zone_size(uint8_t zone, uint16_t slot, size_t* size)
{
    22d0:	b570      	push	{r4, r5, r6, lr}
    22d2:	0005      	movs	r5, r0
    22d4:	000e      	movs	r6, r1
    22d6:	0014      	movs	r4, r2
    ATCA_STATUS status = ATCA_SUCCESS;
    
    if (size == NULL)
        return ATCA_BAD_PARAM;
    22d8:	20e2      	movs	r0, #226	; 0xe2
    if (size == NULL)
    22da:	2a00      	cmp	r2, #0
    22dc:	d011      	beq.n	2302 <atcab_get_zone_size+0x32>
    
    if (atgetifacecfg(_gIface)->devtype == ATSHA204A)
    22de:	4b1f      	ldr	r3, [pc, #124]	; (235c <atcab_get_zone_size+0x8c>)
    22e0:	6818      	ldr	r0, [r3, #0]
    22e2:	4b1f      	ldr	r3, [pc, #124]	; (2360 <atcab_get_zone_size+0x90>)
    22e4:	4798      	blx	r3
    22e6:	7843      	ldrb	r3, [r0, #1]
    22e8:	2b00      	cmp	r3, #0
    22ea:	d113      	bne.n	2314 <atcab_get_zone_size+0x44>
    {
        switch (zone)
    22ec:	2d01      	cmp	r5, #1
    22ee:	d009      	beq.n	2304 <atcab_get_zone_size+0x34>
    22f0:	2d00      	cmp	r5, #0
    22f2:	d003      	beq.n	22fc <atcab_get_zone_size+0x2c>
    22f4:	2d02      	cmp	r5, #2
    22f6:	d009      	beq.n	230c <atcab_get_zone_size+0x3c>
        {
        case ATCA_ZONE_CONFIG: *size = 88; break;
        case ATCA_ZONE_OTP:    *size = 64; break;
        case ATCA_ZONE_DATA:   *size = 32; break;
        default: status = ATCA_BAD_PARAM; break;
    22f8:	20e2      	movs	r0, #226	; 0xe2
    22fa:	e002      	b.n	2302 <atcab_get_zone_size+0x32>
        case ATCA_ZONE_CONFIG: *size = 88; break;
    22fc:	2358      	movs	r3, #88	; 0x58
    22fe:	6023      	str	r3, [r4, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    2300:	2000      	movs	r0, #0
            default: status = ATCA_BAD_PARAM; break;
        }
    }
    
    return status;
}
    2302:	bd70      	pop	{r4, r5, r6, pc}
        case ATCA_ZONE_OTP:    *size = 64; break;
    2304:	2340      	movs	r3, #64	; 0x40
    2306:	6023      	str	r3, [r4, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    2308:	2000      	movs	r0, #0
        case ATCA_ZONE_OTP:    *size = 64; break;
    230a:	e7fa      	b.n	2302 <atcab_get_zone_size+0x32>
        case ATCA_ZONE_DATA:   *size = 32; break;
    230c:	2320      	movs	r3, #32
    230e:	6023      	str	r3, [r4, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    2310:	2000      	movs	r0, #0
        case ATCA_ZONE_DATA:   *size = 32; break;
    2312:	e7f6      	b.n	2302 <atcab_get_zone_size+0x32>
        switch (zone)
    2314:	2d01      	cmp	r5, #1
    2316:	d009      	beq.n	232c <atcab_get_zone_size+0x5c>
    2318:	2d00      	cmp	r5, #0
    231a:	d003      	beq.n	2324 <atcab_get_zone_size+0x54>
    231c:	2d02      	cmp	r5, #2
    231e:	d009      	beq.n	2334 <atcab_get_zone_size+0x64>
            default: status = ATCA_BAD_PARAM; break;
    2320:	20e2      	movs	r0, #226	; 0xe2
    2322:	e7ee      	b.n	2302 <atcab_get_zone_size+0x32>
            case ATCA_ZONE_CONFIG: *size = 128; break;
    2324:	2380      	movs	r3, #128	; 0x80
    2326:	6023      	str	r3, [r4, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    2328:	2000      	movs	r0, #0
            case ATCA_ZONE_CONFIG: *size = 128; break;
    232a:	e7ea      	b.n	2302 <atcab_get_zone_size+0x32>
            case ATCA_ZONE_OTP:    *size = 64; break;
    232c:	2340      	movs	r3, #64	; 0x40
    232e:	6023      	str	r3, [r4, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    2330:	2000      	movs	r0, #0
            case ATCA_ZONE_OTP:    *size = 64; break;
    2332:	e7e6      	b.n	2302 <atcab_get_zone_size+0x32>
                if (slot < 8)
    2334:	2e07      	cmp	r6, #7
    2336:	d908      	bls.n	234a <atcab_get_zone_size+0x7a>
                else if (slot == 8)
    2338:	2e08      	cmp	r6, #8
    233a:	d00a      	beq.n	2352 <atcab_get_zone_size+0x82>
                    status = ATCA_BAD_PARAM;
    233c:	20e2      	movs	r0, #226	; 0xe2
                else if (slot < 16)
    233e:	2e0f      	cmp	r6, #15
    2340:	d8df      	bhi.n	2302 <atcab_get_zone_size+0x32>
                    *size = 72;
    2342:	2348      	movs	r3, #72	; 0x48
    2344:	6023      	str	r3, [r4, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    2346:	2000      	movs	r0, #0
    2348:	e7db      	b.n	2302 <atcab_get_zone_size+0x32>
                    *size = 36;
    234a:	2324      	movs	r3, #36	; 0x24
    234c:	6023      	str	r3, [r4, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    234e:	2000      	movs	r0, #0
    2350:	e7d7      	b.n	2302 <atcab_get_zone_size+0x32>
                    *size = 416;
    2352:	23d0      	movs	r3, #208	; 0xd0
    2354:	005b      	lsls	r3, r3, #1
    2356:	6023      	str	r3, [r4, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    2358:	2000      	movs	r0, #0
    235a:	e7d2      	b.n	2302 <atcab_get_zone_size+0x32>
    235c:	200009dc 	.word	0x200009dc
    2360:	00001de9 	.word	0x00001de9

00002364 <atcab_write>:
 * \param[in] mac      MAC required for encrypted writes (32 bytes). Set to NULL if not required.
 *
 *  \return ATCA_SUCCESS
 */
ATCA_STATUS atcab_write(uint8_t zone, uint16_t address, const uint8_t *value, const uint8_t *mac)
{
    2364:	b530      	push	{r4, r5, lr}
    2366:	b0a5      	sub	sp, #148	; 0x94
    2368:	0014      	movs	r4, r2
    236a:	001d      	movs	r5, r3
	ATCA_STATUS status = ATCA_GEN_FAIL;
	ATCAPacket packet;
	uint16_t execution_time = 0;

	if (value == NULL)
    236c:	2a00      	cmp	r2, #0
    236e:	d059      	beq.n	2424 <atcab_write+0xc0>
		return ATCA_BAD_PARAM;

	do {
		// Build the write command
		packet.param1 = zone;
    2370:	ab01      	add	r3, sp, #4
    2372:	70d8      	strb	r0, [r3, #3]
		packet.param2 = address;
    2374:	8099      	strh	r1, [r3, #4]
		if (zone & ATCA_ZONE_READWRITE_32)
    2376:	b240      	sxtb	r0, r0
    2378:	2800      	cmp	r0, #0
    237a:	db12      	blt.n	23a2 <atcab_write+0x3e>
				memcpy(&packet.info[32], mac, 32);
		}
		else
		{
			// 4-byte write
			memcpy(packet.info, value, 4);
    237c:	2204      	movs	r2, #4
    237e:	0021      	movs	r1, r4
    2380:	200a      	movs	r0, #10
    2382:	4468      	add	r0, sp
    2384:	4b2a      	ldr	r3, [pc, #168]	; (2430 <atcab_write+0xcc>)
    2386:	4798      	blx	r3
		}
        if ((status = atWrite(_gCommandObj, &packet, mac && (zone & ATCA_ZONE_READWRITE_32))) != ATCA_SUCCESS)
    2388:	4b2a      	ldr	r3, [pc, #168]	; (2434 <atcab_write+0xd0>)
    238a:	6818      	ldr	r0, [r3, #0]
    238c:	2200      	movs	r2, #0
    238e:	a901      	add	r1, sp, #4
    2390:	4b29      	ldr	r3, [pc, #164]	; (2438 <atcab_write+0xd4>)
    2392:	4798      	blx	r3
    2394:	1e04      	subs	r4, r0, #0
    2396:	d016      	beq.n	23c6 <atcab_write+0x62>

		status = isATCAError(packet.info);

	} while (0);

	_atcab_exit();
    2398:	4b28      	ldr	r3, [pc, #160]	; (243c <atcab_write+0xd8>)
    239a:	4798      	blx	r3
	return status;
}
    239c:	0020      	movs	r0, r4
    239e:	b025      	add	sp, #148	; 0x94
    23a0:	bd30      	pop	{r4, r5, pc}
			memcpy(packet.info, value, 32);
    23a2:	2220      	movs	r2, #32
    23a4:	0021      	movs	r1, r4
    23a6:	200a      	movs	r0, #10
    23a8:	4468      	add	r0, sp
    23aa:	4b21      	ldr	r3, [pc, #132]	; (2430 <atcab_write+0xcc>)
    23ac:	4798      	blx	r3
			if (mac)
    23ae:	2d00      	cmp	r5, #0
    23b0:	d03a      	beq.n	2428 <atcab_write+0xc4>
				memcpy(&packet.info[32], mac, 32);
    23b2:	2220      	movs	r2, #32
    23b4:	0029      	movs	r1, r5
    23b6:	202a      	movs	r0, #42	; 0x2a
    23b8:	4468      	add	r0, sp
    23ba:	4b1d      	ldr	r3, [pc, #116]	; (2430 <atcab_write+0xcc>)
    23bc:	4798      	blx	r3
        if ((status = atWrite(_gCommandObj, &packet, mac && (zone & ATCA_ZONE_READWRITE_32))) != ATCA_SUCCESS)
    23be:	4b1d      	ldr	r3, [pc, #116]	; (2434 <atcab_write+0xd0>)
    23c0:	6818      	ldr	r0, [r3, #0]
    23c2:	2201      	movs	r2, #1
    23c4:	e7e3      	b.n	238e <atcab_write+0x2a>
		execution_time = atGetExecTime(_gCommandObj, CMD_WRITEMEM);
    23c6:	4b1b      	ldr	r3, [pc, #108]	; (2434 <atcab_write+0xd0>)
    23c8:	6818      	ldr	r0, [r3, #0]
    23ca:	2114      	movs	r1, #20
    23cc:	4b1c      	ldr	r3, [pc, #112]	; (2440 <atcab_write+0xdc>)
    23ce:	4798      	blx	r3
    23d0:	0005      	movs	r5, r0
		if ((status = atcab_wakeup()) != ATCA_SUCCESS)
    23d2:	4b1c      	ldr	r3, [pc, #112]	; (2444 <atcab_write+0xe0>)
    23d4:	4798      	blx	r3
    23d6:	1e04      	subs	r4, r0, #0
    23d8:	d1de      	bne.n	2398 <atcab_write+0x34>
		if ((status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    23da:	a901      	add	r1, sp, #4
    23dc:	784a      	ldrb	r2, [r1, #1]
    23de:	4b1a      	ldr	r3, [pc, #104]	; (2448 <atcab_write+0xe4>)
    23e0:	6818      	ldr	r0, [r3, #0]
    23e2:	4b1a      	ldr	r3, [pc, #104]	; (244c <atcab_write+0xe8>)
    23e4:	4798      	blx	r3
    23e6:	1e04      	subs	r4, r0, #0
    23e8:	d1d6      	bne.n	2398 <atcab_write+0x34>
		atca_delay_ms(execution_time);
    23ea:	0028      	movs	r0, r5
    23ec:	4b18      	ldr	r3, [pc, #96]	; (2450 <atcab_write+0xec>)
    23ee:	4798      	blx	r3
		if ((status = atreceive(_gIface, packet.info, &(packet.rxsize))) != ATCA_SUCCESS)
    23f0:	4b15      	ldr	r3, [pc, #84]	; (2448 <atcab_write+0xe4>)
    23f2:	6818      	ldr	r0, [r3, #0]
    23f4:	228e      	movs	r2, #142	; 0x8e
    23f6:	446a      	add	r2, sp
    23f8:	210a      	movs	r1, #10
    23fa:	4469      	add	r1, sp
    23fc:	4b15      	ldr	r3, [pc, #84]	; (2454 <atcab_write+0xf0>)
    23fe:	4798      	blx	r3
    2400:	1e04      	subs	r4, r0, #0
    2402:	d1c9      	bne.n	2398 <atcab_write+0x34>
		if (packet.rxsize < 4) {
    2404:	238a      	movs	r3, #138	; 0x8a
    2406:	aa01      	add	r2, sp, #4
    2408:	5ad4      	ldrh	r4, [r2, r3]
    240a:	2c03      	cmp	r4, #3
    240c:	d804      	bhi.n	2418 <atcab_write+0xb4>
				status = ATCA_RX_NO_RESPONSE;
    240e:	4260      	negs	r0, r4
    2410:	4160      	adcs	r0, r4
    2412:	30e6      	adds	r0, #230	; 0xe6
    2414:	0004      	movs	r4, r0
    2416:	e7bf      	b.n	2398 <atcab_write+0x34>
		status = isATCAError(packet.info);
    2418:	200a      	movs	r0, #10
    241a:	4468      	add	r0, sp
    241c:	4b0e      	ldr	r3, [pc, #56]	; (2458 <atcab_write+0xf4>)
    241e:	4798      	blx	r3
    2420:	0004      	movs	r4, r0
    2422:	e7b9      	b.n	2398 <atcab_write+0x34>
		return ATCA_BAD_PARAM;
    2424:	24e2      	movs	r4, #226	; 0xe2
    2426:	e7b9      	b.n	239c <atcab_write+0x38>
        if ((status = atWrite(_gCommandObj, &packet, mac && (zone & ATCA_ZONE_READWRITE_32))) != ATCA_SUCCESS)
    2428:	4b02      	ldr	r3, [pc, #8]	; (2434 <atcab_write+0xd0>)
    242a:	6818      	ldr	r0, [r3, #0]
    242c:	2200      	movs	r2, #0
    242e:	e7ae      	b.n	238e <atcab_write+0x2a>
    2430:	0000683f 	.word	0x0000683f
    2434:	200009d4 	.word	0x200009d4
    2438:	00001c85 	.word	0x00001c85
    243c:	00001f6d 	.word	0x00001f6d
    2440:	00001a6d 	.word	0x00001a6d
    2444:	00001f25 	.word	0x00001f25
    2448:	200009dc 	.word	0x200009dc
    244c:	00001da1 	.word	0x00001da1
    2450:	00003789 	.word	0x00003789
    2454:	00001da9 	.word	0x00001da9
    2458:	00001cbd 	.word	0x00001cbd

0000245c <atcab_write_zone>:
 *  \param[in] data    Data to be written.
 *  \param[in] len     Number of bytes to be written. Must be either 4 or 32.
 *  \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_write_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, const uint8_t *data, uint8_t len)
{
    245c:	b570      	push	{r4, r5, r6, lr}
    245e:	b084      	sub	sp, #16
    2460:	0004      	movs	r4, r0
    2462:	a808      	add	r0, sp, #32
    2464:	c840      	ldmia	r0!, {r6}
    2466:	7805      	ldrb	r5, [r0, #0]
	ATCA_STATUS status = ATCA_GEN_FAIL;
	uint16_t addr;

	// Check the input parameters
	if (data == NULL)
    2468:	2e00      	cmp	r6, #0
    246a:	d006      	beq.n	247a <atcab_write_zone+0x1e>
		return ATCA_BAD_PARAM;

	if ( len != 4 && len != 32 )
    246c:	2d04      	cmp	r5, #4
    246e:	d011      	beq.n	2494 <atcab_write_zone+0x38>
		return ATCA_BAD_PARAM;
    2470:	20e2      	movs	r0, #226	; 0xe2
	if ( len != 4 && len != 32 )
    2472:	2d20      	cmp	r5, #32
    2474:	d003      	beq.n	247e <atcab_write_zone+0x22>
		status = atcab_write(zone, addr, data, NULL);

	} while (0);
    
	return status;
}
    2476:	b004      	add	sp, #16
    2478:	bd70      	pop	{r4, r5, r6, pc}
		return ATCA_BAD_PARAM;
    247a:	20e2      	movs	r0, #226	; 0xe2
    247c:	e7fb      	b.n	2476 <atcab_write_zone+0x1a>
		if ( (status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS )
    247e:	200e      	movs	r0, #14
    2480:	4468      	add	r0, sp
    2482:	9000      	str	r0, [sp, #0]
    2484:	0020      	movs	r0, r4
    2486:	4d0c      	ldr	r5, [pc, #48]	; (24b8 <atcab_write_zone+0x5c>)
    2488:	47a8      	blx	r5
    248a:	2800      	cmp	r0, #0
    248c:	d1f3      	bne.n	2476 <atcab_write_zone+0x1a>
			zone = zone | ATCA_ZONE_READWRITE_32;
    248e:	2380      	movs	r3, #128	; 0x80
    2490:	431c      	orrs	r4, r3
    2492:	e007      	b.n	24a4 <atcab_write_zone+0x48>
		if ( (status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS )
    2494:	200e      	movs	r0, #14
    2496:	4468      	add	r0, sp
    2498:	9000      	str	r0, [sp, #0]
    249a:	0020      	movs	r0, r4
    249c:	4d06      	ldr	r5, [pc, #24]	; (24b8 <atcab_write_zone+0x5c>)
    249e:	47a8      	blx	r5
    24a0:	2800      	cmp	r0, #0
    24a2:	d1e8      	bne.n	2476 <atcab_write_zone+0x1a>
		status = atcab_write(zone, addr, data, NULL);
    24a4:	230e      	movs	r3, #14
    24a6:	446b      	add	r3, sp
    24a8:	8819      	ldrh	r1, [r3, #0]
    24aa:	2300      	movs	r3, #0
    24ac:	0032      	movs	r2, r6
    24ae:	0020      	movs	r0, r4
    24b0:	4c02      	ldr	r4, [pc, #8]	; (24bc <atcab_write_zone+0x60>)
    24b2:	47a0      	blx	r4
    24b4:	e7df      	b.n	2476 <atcab_write_zone+0x1a>
    24b6:	46c0      	nop			; (mov r8, r8)
    24b8:	0000228d 	.word	0x0000228d
    24bc:	00002365 	.word	0x00002365

000024c0 <atcab_read_zone>:
 *  \param[in] data
 *  \param[in] len  Must be either 4 or 32
 *  returns ATCA_STATUS
 */
ATCA_STATUS atcab_read_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
    24c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    24c2:	b0a7      	sub	sp, #156	; 0x9c
    24c4:	0006      	movs	r6, r0
    24c6:	a82c      	add	r0, sp, #176	; 0xb0
    24c8:	c880      	ldmia	r0!, {r7}
    24ca:	7805      	ldrb	r5, [r0, #0]
	uint16_t addr;
	uint16_t execution_time = 0;

	do {
		// Check the input parameters
		if (data == NULL)
    24cc:	2f00      	cmp	r7, #0
    24ce:	d017      	beq.n	2500 <atcab_read_zone+0x40>
			return ATCA_BAD_PARAM;

		if ( len != 4 && len != 32 )
    24d0:	2d04      	cmp	r5, #4
    24d2:	d022      	beq.n	251a <atcab_read_zone+0x5a>
			return ATCA_BAD_PARAM;
    24d4:	24e2      	movs	r4, #226	; 0xe2
		if ( len != 4 && len != 32 )
    24d6:	2d20      	cmp	r5, #32
    24d8:	d014      	beq.n	2504 <atcab_read_zone+0x44>
		memcpy( data, &packet.info[1], len );
	} while (0);

	_atcab_exit();
	return status;
}
    24da:	0020      	movs	r0, r4
    24dc:	b027      	add	sp, #156	; 0x9c
    24de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			zone = zone | ATCA_ZONE_READWRITE_32;
    24e0:	2380      	movs	r3, #128	; 0x80
    24e2:	431e      	orrs	r6, r3
    24e4:	e021      	b.n	252a <atcab_read_zone+0x6a>
		if ( (status = isATCAError(packet.info)) != ATCA_SUCCESS )
    24e6:	2012      	movs	r0, #18
    24e8:	4468      	add	r0, sp
    24ea:	4b2a      	ldr	r3, [pc, #168]	; (2594 <atcab_read_zone+0xd4>)
    24ec:	4798      	blx	r3
    24ee:	1e04      	subs	r4, r0, #0
    24f0:	d110      	bne.n	2514 <atcab_read_zone+0x54>
		memcpy( data, &packet.info[1], len );
    24f2:	002a      	movs	r2, r5
    24f4:	2113      	movs	r1, #19
    24f6:	4469      	add	r1, sp
    24f8:	0038      	movs	r0, r7
    24fa:	4b27      	ldr	r3, [pc, #156]	; (2598 <atcab_read_zone+0xd8>)
    24fc:	4798      	blx	r3
    24fe:	e009      	b.n	2514 <atcab_read_zone+0x54>
			return ATCA_BAD_PARAM;
    2500:	24e2      	movs	r4, #226	; 0xe2
    2502:	e7ea      	b.n	24da <atcab_read_zone+0x1a>
		if ( (status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS )
    2504:	200a      	movs	r0, #10
    2506:	4468      	add	r0, sp
    2508:	9000      	str	r0, [sp, #0]
    250a:	0030      	movs	r0, r6
    250c:	4c23      	ldr	r4, [pc, #140]	; (259c <atcab_read_zone+0xdc>)
    250e:	47a0      	blx	r4
    2510:	1e04      	subs	r4, r0, #0
    2512:	d0e5      	beq.n	24e0 <atcab_read_zone+0x20>
	_atcab_exit();
    2514:	4b22      	ldr	r3, [pc, #136]	; (25a0 <atcab_read_zone+0xe0>)
    2516:	4798      	blx	r3
	return status;
    2518:	e7df      	b.n	24da <atcab_read_zone+0x1a>
		if ( (status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS )
    251a:	200a      	movs	r0, #10
    251c:	4468      	add	r0, sp
    251e:	9000      	str	r0, [sp, #0]
    2520:	0030      	movs	r0, r6
    2522:	4c1e      	ldr	r4, [pc, #120]	; (259c <atcab_read_zone+0xdc>)
    2524:	47a0      	blx	r4
    2526:	1e04      	subs	r4, r0, #0
    2528:	d1f4      	bne.n	2514 <atcab_read_zone+0x54>
		packet.param1 = zone;
    252a:	a903      	add	r1, sp, #12
    252c:	70ce      	strb	r6, [r1, #3]
		packet.param2 = addr;
    252e:	230a      	movs	r3, #10
    2530:	446b      	add	r3, sp
    2532:	881b      	ldrh	r3, [r3, #0]
    2534:	808b      	strh	r3, [r1, #4]
		if ( (status = atRead( _gCommandObj, &packet )) != ATCA_SUCCESS )
    2536:	4b1b      	ldr	r3, [pc, #108]	; (25a4 <atcab_read_zone+0xe4>)
    2538:	6818      	ldr	r0, [r3, #0]
    253a:	4b1b      	ldr	r3, [pc, #108]	; (25a8 <atcab_read_zone+0xe8>)
    253c:	4798      	blx	r3
    253e:	1e04      	subs	r4, r0, #0
    2540:	d1e8      	bne.n	2514 <atcab_read_zone+0x54>
		execution_time = atGetExecTime( _gCommandObj, CMD_READMEM);
    2542:	4b18      	ldr	r3, [pc, #96]	; (25a4 <atcab_read_zone+0xe4>)
    2544:	6818      	ldr	r0, [r3, #0]
    2546:	210f      	movs	r1, #15
    2548:	4b18      	ldr	r3, [pc, #96]	; (25ac <atcab_read_zone+0xec>)
    254a:	4798      	blx	r3
    254c:	0006      	movs	r6, r0
		if ( (status = atcab_wakeup()) != ATCA_SUCCESS ) break;
    254e:	4b18      	ldr	r3, [pc, #96]	; (25b0 <atcab_read_zone+0xf0>)
    2550:	4798      	blx	r3
    2552:	1e04      	subs	r4, r0, #0
    2554:	d1de      	bne.n	2514 <atcab_read_zone+0x54>
		if ( (status = atsend( _gIface, (uint8_t*)&packet, packet.txsize )) != ATCA_SUCCESS )
    2556:	a903      	add	r1, sp, #12
    2558:	784a      	ldrb	r2, [r1, #1]
    255a:	4b16      	ldr	r3, [pc, #88]	; (25b4 <atcab_read_zone+0xf4>)
    255c:	6818      	ldr	r0, [r3, #0]
    255e:	4b16      	ldr	r3, [pc, #88]	; (25b8 <atcab_read_zone+0xf8>)
    2560:	4798      	blx	r3
    2562:	1e04      	subs	r4, r0, #0
    2564:	d1d6      	bne.n	2514 <atcab_read_zone+0x54>
		atca_delay_ms(execution_time);
    2566:	0030      	movs	r0, r6
    2568:	4b14      	ldr	r3, [pc, #80]	; (25bc <atcab_read_zone+0xfc>)
    256a:	4798      	blx	r3
		if ( (status = atreceive( _gIface, packet.info, &(packet.rxsize) )) != ATCA_SUCCESS )
    256c:	4b11      	ldr	r3, [pc, #68]	; (25b4 <atcab_read_zone+0xf4>)
    256e:	6818      	ldr	r0, [r3, #0]
    2570:	2296      	movs	r2, #150	; 0x96
    2572:	446a      	add	r2, sp
    2574:	2112      	movs	r1, #18
    2576:	4469      	add	r1, sp
    2578:	4b11      	ldr	r3, [pc, #68]	; (25c0 <atcab_read_zone+0x100>)
    257a:	4798      	blx	r3
    257c:	1e04      	subs	r4, r0, #0
    257e:	d1c9      	bne.n	2514 <atcab_read_zone+0x54>
		if (packet.rxsize < 4) {
    2580:	238a      	movs	r3, #138	; 0x8a
    2582:	aa03      	add	r2, sp, #12
    2584:	5ad4      	ldrh	r4, [r2, r3]
    2586:	2c03      	cmp	r4, #3
    2588:	d8ad      	bhi.n	24e6 <atcab_read_zone+0x26>
				status = ATCA_RX_NO_RESPONSE;
    258a:	4263      	negs	r3, r4
    258c:	415c      	adcs	r4, r3
    258e:	34e6      	adds	r4, #230	; 0xe6
    2590:	e7c0      	b.n	2514 <atcab_read_zone+0x54>
    2592:	46c0      	nop			; (mov r8, r8)
    2594:	00001cbd 	.word	0x00001cbd
    2598:	0000683f 	.word	0x0000683f
    259c:	0000228d 	.word	0x0000228d
    25a0:	00001f6d 	.word	0x00001f6d
    25a4:	200009d4 	.word	0x200009d4
    25a8:	00001c39 	.word	0x00001c39
    25ac:	00001a6d 	.word	0x00001a6d
    25b0:	00001f25 	.word	0x00001f25
    25b4:	200009dc 	.word	0x200009dc
    25b8:	00001da1 	.word	0x00001da1
    25bc:	00003789 	.word	0x00003789
    25c0:	00001da9 	.word	0x00001da9

000025c4 <atcab_read_serial_number>:
{
    25c4:	b570      	push	{r4, r5, r6, lr}
    25c6:	b08a      	sub	sp, #40	; 0x28
    25c8:	0004      	movs	r4, r0
        return ATCA_BAD_PARAM;
    25ca:	20e2      	movs	r0, #226	; 0xe2
    if (!serial_number)
    25cc:	2c00      	cmp	r4, #0
    25ce:	d00b      	beq.n	25e8 <atcab_read_serial_number+0x24>
		if ( (status = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 0, 0, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS )
    25d0:	2320      	movs	r3, #32
    25d2:	9301      	str	r3, [sp, #4]
    25d4:	ab02      	add	r3, sp, #8
    25d6:	9300      	str	r3, [sp, #0]
    25d8:	2300      	movs	r3, #0
    25da:	2200      	movs	r2, #0
    25dc:	2100      	movs	r1, #0
    25de:	2000      	movs	r0, #0
    25e0:	4d08      	ldr	r5, [pc, #32]	; (2604 <atcab_read_serial_number+0x40>)
    25e2:	47a8      	blx	r5
    25e4:	1e05      	subs	r5, r0, #0
    25e6:	d001      	beq.n	25ec <atcab_read_serial_number+0x28>
}
    25e8:	b00a      	add	sp, #40	; 0x28
    25ea:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(&serial_number[0], &read_buf[0], 4);
    25ec:	2204      	movs	r2, #4
    25ee:	a902      	add	r1, sp, #8
    25f0:	0020      	movs	r0, r4
    25f2:	4e05      	ldr	r6, [pc, #20]	; (2608 <atcab_read_serial_number+0x44>)
    25f4:	47b0      	blx	r6
        memcpy(&serial_number[4], &read_buf[8], 5);
    25f6:	1d20      	adds	r0, r4, #4
    25f8:	2205      	movs	r2, #5
    25fa:	a904      	add	r1, sp, #16
    25fc:	47b0      	blx	r6
	return status;
    25fe:	0028      	movs	r0, r5
    2600:	e7f2      	b.n	25e8 <atcab_read_serial_number+0x24>
    2602:	46c0      	nop			; (mov r8, r8)
    2604:	000024c1 	.word	0x000024c1
    2608:	0000683f 	.word	0x0000683f

0000260c <atcab_is_locked>:
{
    260c:	b570      	push	{r4, r5, r6, lr}
    260e:	b084      	sub	sp, #16
    2610:	0004      	movs	r4, r0
    2612:	000d      	movs	r5, r1
		if ( (ret = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 2 /*block*/, 5 /*offset*/, word_data, ATCA_WORD_SIZE)) != ATCA_SUCCESS )
    2614:	2304      	movs	r3, #4
    2616:	9301      	str	r3, [sp, #4]
    2618:	ab03      	add	r3, sp, #12
    261a:	9300      	str	r3, [sp, #0]
    261c:	2305      	movs	r3, #5
    261e:	2202      	movs	r2, #2
    2620:	2100      	movs	r1, #0
    2622:	2000      	movs	r0, #0
    2624:	4e08      	ldr	r6, [pc, #32]	; (2648 <atcab_is_locked+0x3c>)
    2626:	47b0      	blx	r6
    2628:	2800      	cmp	r0, #0
    262a:	d108      	bne.n	263e <atcab_is_locked+0x32>
		if (zone == LOCK_ZONE_CONFIG) zone_idx = 3;
    262c:	4263      	negs	r3, r4
    262e:	415c      	adcs	r4, r3
    2630:	3402      	adds	r4, #2
		if (word_data[zone_idx] == 0)
    2632:	ab03      	add	r3, sp, #12
    2634:	5d1b      	ldrb	r3, [r3, r4]
    2636:	2b00      	cmp	r3, #0
    2638:	d003      	beq.n	2642 <atcab_is_locked+0x36>
			*islocked = false;
    263a:	2300      	movs	r3, #0
    263c:	702b      	strb	r3, [r5, #0]
}
    263e:	b004      	add	sp, #16
    2640:	bd70      	pop	{r4, r5, r6, pc}
			*islocked = true;
    2642:	3301      	adds	r3, #1
    2644:	702b      	strb	r3, [r5, #0]
    2646:	e7fa      	b.n	263e <atcab_is_locked+0x32>
    2648:	000024c1 	.word	0x000024c1

0000264c <atcab_lock>:
 *                            if not required.
 *
 *  \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_lock(uint8_t mode, uint16_t summary, uint8_t* lock_response)
{
    264c:	b5f0      	push	{r4, r5, r6, r7, lr}
    264e:	b0a5      	sub	sp, #148	; 0x94
    2650:	0007      	movs	r7, r0
    2652:	000e      	movs	r6, r1
    2654:	0015      	movs	r5, r2
    ATCA_STATUS status = ATCA_GEN_FAIL;
    ATCAPacket packet;
    uint16_t execution_time = 0;

    // build command for lock zone and send
    memset(&packet, 0, sizeof(packet));
    2656:	ac01      	add	r4, sp, #4
    2658:	228c      	movs	r2, #140	; 0x8c
    265a:	2100      	movs	r1, #0
    265c:	0020      	movs	r0, r4
    265e:	4b22      	ldr	r3, [pc, #136]	; (26e8 <atcab_lock+0x9c>)
    2660:	4798      	blx	r3
    packet.param1 = mode;
    2662:	70e7      	strb	r7, [r4, #3]
    packet.param2 = summary;
    2664:	80a6      	strh	r6, [r4, #4]

    do {
        if ((status = atLock(_gCommandObj, &packet)) != ATCA_SUCCESS) break;
    2666:	4b21      	ldr	r3, [pc, #132]	; (26ec <atcab_lock+0xa0>)
    2668:	6818      	ldr	r0, [r3, #0]
    266a:	0021      	movs	r1, r4
    266c:	4b20      	ldr	r3, [pc, #128]	; (26f0 <atcab_lock+0xa4>)
    266e:	4798      	blx	r3
    2670:	1e04      	subs	r4, r0, #0
    2672:	d004      	beq.n	267e <atcab_lock+0x32>
        //check the response for error
        if ((status = isATCAError(packet.info)) != ATCA_SUCCESS)
            break;
    } while (0);

    _atcab_exit();
    2674:	4b1f      	ldr	r3, [pc, #124]	; (26f4 <atcab_lock+0xa8>)
    2676:	4798      	blx	r3
    return status;
}
    2678:	0020      	movs	r0, r4
    267a:	b025      	add	sp, #148	; 0x94
    267c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        execution_time = atGetExecTime(_gCommandObj, CMD_LOCK);
    267e:	4b1b      	ldr	r3, [pc, #108]	; (26ec <atcab_lock+0xa0>)
    2680:	6818      	ldr	r0, [r3, #0]
    2682:	2109      	movs	r1, #9
    2684:	4b1c      	ldr	r3, [pc, #112]	; (26f8 <atcab_lock+0xac>)
    2686:	4798      	blx	r3
    2688:	0006      	movs	r6, r0
        if ((status = atcab_wakeup()) != ATCA_SUCCESS) break;
    268a:	4b1c      	ldr	r3, [pc, #112]	; (26fc <atcab_lock+0xb0>)
    268c:	4798      	blx	r3
    268e:	1e04      	subs	r4, r0, #0
    2690:	d1f0      	bne.n	2674 <atcab_lock+0x28>
        if ((status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    2692:	a901      	add	r1, sp, #4
    2694:	784a      	ldrb	r2, [r1, #1]
    2696:	4b1a      	ldr	r3, [pc, #104]	; (2700 <atcab_lock+0xb4>)
    2698:	6818      	ldr	r0, [r3, #0]
    269a:	4b1a      	ldr	r3, [pc, #104]	; (2704 <atcab_lock+0xb8>)
    269c:	4798      	blx	r3
    269e:	1e04      	subs	r4, r0, #0
    26a0:	d1e8      	bne.n	2674 <atcab_lock+0x28>
        atca_delay_ms(execution_time);
    26a2:	0030      	movs	r0, r6
    26a4:	4b18      	ldr	r3, [pc, #96]	; (2708 <atcab_lock+0xbc>)
    26a6:	4798      	blx	r3
        if ((status = atreceive(_gIface, packet.info, &packet.rxsize)) != ATCA_SUCCESS)
    26a8:	4b15      	ldr	r3, [pc, #84]	; (2700 <atcab_lock+0xb4>)
    26aa:	6818      	ldr	r0, [r3, #0]
    26ac:	228e      	movs	r2, #142	; 0x8e
    26ae:	446a      	add	r2, sp
    26b0:	210a      	movs	r1, #10
    26b2:	4469      	add	r1, sp
    26b4:	4b15      	ldr	r3, [pc, #84]	; (270c <atcab_lock+0xc0>)
    26b6:	4798      	blx	r3
    26b8:	1e04      	subs	r4, r0, #0
    26ba:	d1db      	bne.n	2674 <atcab_lock+0x28>
        if (packet.rxsize < 4) {
    26bc:	238a      	movs	r3, #138	; 0x8a
    26be:	aa01      	add	r2, sp, #4
    26c0:	5ad4      	ldrh	r4, [r2, r3]
    26c2:	2c03      	cmp	r4, #3
    26c4:	d804      	bhi.n	26d0 <atcab_lock+0x84>
                status = ATCA_RX_NO_RESPONSE;
    26c6:	4260      	negs	r0, r4
    26c8:	4160      	adcs	r0, r4
    26ca:	30e6      	adds	r0, #230	; 0xe6
    26cc:	0004      	movs	r4, r0
    26ce:	e7d1      	b.n	2674 <atcab_lock+0x28>
        if (lock_response != NULL)
    26d0:	2d00      	cmp	r5, #0
    26d2:	d002      	beq.n	26da <atcab_lock+0x8e>
            *lock_response = packet.info[ATCA_RSP_DATA_IDX];
    26d4:	ab01      	add	r3, sp, #4
    26d6:	79db      	ldrb	r3, [r3, #7]
    26d8:	702b      	strb	r3, [r5, #0]
        if ((status = isATCAError(packet.info)) != ATCA_SUCCESS)
    26da:	200a      	movs	r0, #10
    26dc:	4468      	add	r0, sp
    26de:	4b0c      	ldr	r3, [pc, #48]	; (2710 <atcab_lock+0xc4>)
    26e0:	4798      	blx	r3
    26e2:	0004      	movs	r4, r0
    26e4:	e7c6      	b.n	2674 <atcab_lock+0x28>
    26e6:	46c0      	nop			; (mov r8, r8)
    26e8:	00006875 	.word	0x00006875
    26ec:	200009d4 	.word	0x200009d4
    26f0:	00001b91 	.word	0x00001b91
    26f4:	00001f6d 	.word	0x00001f6d
    26f8:	00001a6d 	.word	0x00001a6d
    26fc:	00001f25 	.word	0x00001f25
    2700:	200009dc 	.word	0x200009dc
    2704:	00001da1 	.word	0x00001da1
    2708:	00003789 	.word	0x00003789
    270c:	00001da9 	.word	0x00001da9
    2710:	00001cbd 	.word	0x00001cbd

00002714 <atcab_lock_config_zone>:
 *                             0 is successful lock.
 *
 *  \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_lock_config_zone(uint8_t* lock_response)
{
    2714:	b510      	push	{r4, lr}
    2716:	0002      	movs	r2, r0
    if (lock_response == NULL)
        return ATCA_BAD_PARAM;
    2718:	20e2      	movs	r0, #226	; 0xe2
    if (lock_response == NULL)
    271a:	2a00      	cmp	r2, #0
    271c:	d003      	beq.n	2726 <atcab_lock_config_zone+0x12>

    return atcab_lock(LOCK_ZONE_NO_CRC | LOCK_ZONE_CONFIG, 0, lock_response);
    271e:	2100      	movs	r1, #0
    2720:	3862      	subs	r0, #98	; 0x62
    2722:	4b01      	ldr	r3, [pc, #4]	; (2728 <atcab_lock_config_zone+0x14>)
    2724:	4798      	blx	r3
}
    2726:	bd10      	pop	{r4, pc}
    2728:	0000264d 	.word	0x0000264d

0000272c <atcab_lock_data_zone>:
 *                             0 is successful lock.
 *
 *  \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_lock_data_zone(uint8_t* lock_response)
{
    272c:	b510      	push	{r4, lr}
    272e:	0002      	movs	r2, r0
    if (lock_response == NULL)
        return ATCA_BAD_PARAM;
    2730:	20e2      	movs	r0, #226	; 0xe2
    if (lock_response == NULL)
    2732:	2a00      	cmp	r2, #0
    2734:	d003      	beq.n	273e <atcab_lock_data_zone+0x12>

    return atcab_lock(LOCK_ZONE_NO_CRC | LOCK_ZONE_DATA, 0, lock_response);
    2736:	2100      	movs	r1, #0
    2738:	3861      	subs	r0, #97	; 0x61
    273a:	4b01      	ldr	r3, [pc, #4]	; (2740 <atcab_lock_data_zone+0x14>)
    273c:	4798      	blx	r3
}
    273e:	bd10      	pop	{r4, pc}
    2740:	0000264d 	.word	0x0000264d

00002744 <atcab_gendig>:
 *                              "Shared Nonce" mode, otherwise ignored (can be NULL).
 *  \param[in] other_data_size  Size of other_data in bytes.
 *  \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_gendig(uint8_t zone, uint16_t key_id, const uint8_t *other_data, uint8_t other_data_size)
{
    2744:	b530      	push	{r4, r5, lr}
    2746:	b0a5      	sub	sp, #148	; 0x94
    2748:	0014      	movs	r4, r2
	ATCA_STATUS status = ATCA_GEN_FAIL;
	ATCAPacket packet;
	uint16_t execution_time = 0;
	bool hasMACKey = 0;

	if ( !_gDevice)
    274a:	4a35      	ldr	r2, [pc, #212]	; (2820 <atcab_gendig+0xdc>)
    274c:	6812      	ldr	r2, [r2, #0]
    274e:	2a00      	cmp	r2, #0
    2750:	d04e      	beq.n	27f0 <atcab_gendig+0xac>
		return ATCA_GEN_FAIL;
    if (other_data_size > 0 && other_data == NULL)
    2752:	2b00      	cmp	r3, #0
    2754:	d050      	beq.n	27f8 <atcab_gendig+0xb4>
    2756:	2c00      	cmp	r4, #0
    2758:	d04c      	beq.n	27f4 <atcab_gendig+0xb0>
        return ATCA_BAD_PARAM;

	do {

		// build gendig command
		packet.param1 = zone;
    275a:	aa01      	add	r2, sp, #4
    275c:	70d0      	strb	r0, [r2, #3]
		packet.param2 = key_id;
    275e:	8091      	strh	r1, [r2, #4]

		if ( packet.param1 == GENDIG_ZONE_SHARED_NONCE && other_data_size >= ATCA_BLOCK_SIZE)
    2760:	2803      	cmp	r0, #3
    2762:	d14e      	bne.n	2802 <atcab_gendig+0xbe>
    2764:	2b1f      	cmp	r3, #31
    2766:	d911      	bls.n	278c <atcab_gendig+0x48>
			memcpy(&packet.info[0], &other_data[0], ATCA_BLOCK_SIZE);
    2768:	2220      	movs	r2, #32
    276a:	0021      	movs	r1, r4
    276c:	3007      	adds	r0, #7
    276e:	4468      	add	r0, sp
    2770:	4b2c      	ldr	r3, [pc, #176]	; (2824 <atcab_gendig+0xe0>)
    2772:	4798      	blx	r3
	bool hasMACKey = 0;
    2774:	2200      	movs	r2, #0
			memcpy(&packet.info[0], &other_data[0], ATCA_BLOCK_SIZE);
    2776:	e047      	b.n	2808 <atcab_gendig+0xc4>
		else if ( packet.param1 == GENDIG_ZONE_DATA && other_data_size >= ATCA_WORD_SIZE) {
    2778:	2b03      	cmp	r3, #3
    277a:	d945      	bls.n	2808 <atcab_gendig+0xc4>
			memcpy(&packet.info[0], &other_data[0], ATCA_WORD_SIZE);
    277c:	3204      	adds	r2, #4
    277e:	0021      	movs	r1, r4
    2780:	3008      	adds	r0, #8
    2782:	4468      	add	r0, sp
    2784:	4b27      	ldr	r3, [pc, #156]	; (2824 <atcab_gendig+0xe0>)
    2786:	4798      	blx	r3
			hasMACKey = true;
    2788:	2201      	movs	r2, #1
    278a:	e03d      	b.n	2808 <atcab_gendig+0xc4>
	bool hasMACKey = 0;
    278c:	2200      	movs	r2, #0
    278e:	e03b      	b.n	2808 <atcab_gendig+0xc4>
    2790:	2200      	movs	r2, #0
    2792:	e039      	b.n	2808 <atcab_gendig+0xc4>
		}

		if ( (status = atGenDig( _gCommandObj, &packet, hasMACKey)) != ATCA_SUCCESS )
			break;

		execution_time = atGetExecTime( _gCommandObj, CMD_GENDIG);
    2794:	4b24      	ldr	r3, [pc, #144]	; (2828 <atcab_gendig+0xe4>)
    2796:	6818      	ldr	r0, [r3, #0]
    2798:	2105      	movs	r1, #5
    279a:	4b24      	ldr	r3, [pc, #144]	; (282c <atcab_gendig+0xe8>)
    279c:	4798      	blx	r3
    279e:	0005      	movs	r5, r0

		if ( (status != atcab_wakeup()) != ATCA_SUCCESS ) break;
    27a0:	4b23      	ldr	r3, [pc, #140]	; (2830 <atcab_gendig+0xec>)
    27a2:	4798      	blx	r3
    27a4:	2800      	cmp	r0, #0
    27a6:	d136      	bne.n	2816 <atcab_gendig+0xd2>

		// send the command
		if ( (status = atsend( _gIface, (uint8_t*)&packet, packet.txsize )) != ATCA_SUCCESS )
    27a8:	a901      	add	r1, sp, #4
    27aa:	784a      	ldrb	r2, [r1, #1]
    27ac:	4b21      	ldr	r3, [pc, #132]	; (2834 <atcab_gendig+0xf0>)
    27ae:	6818      	ldr	r0, [r3, #0]
    27b0:	4b21      	ldr	r3, [pc, #132]	; (2838 <atcab_gendig+0xf4>)
    27b2:	4798      	blx	r3
    27b4:	1e04      	subs	r4, r0, #0
    27b6:	d12e      	bne.n	2816 <atcab_gendig+0xd2>
			break;

		// delay the appropriate amount of time for command to execute
		atca_delay_ms(execution_time);
    27b8:	0028      	movs	r0, r5
    27ba:	4b20      	ldr	r3, [pc, #128]	; (283c <atcab_gendig+0xf8>)
    27bc:	4798      	blx	r3

		// receive the response
		if ( (status = atreceive( _gIface, packet.info, &(packet.rxsize))) != ATCA_SUCCESS )
    27be:	4b1d      	ldr	r3, [pc, #116]	; (2834 <atcab_gendig+0xf0>)
    27c0:	6818      	ldr	r0, [r3, #0]
    27c2:	228e      	movs	r2, #142	; 0x8e
    27c4:	446a      	add	r2, sp
    27c6:	210a      	movs	r1, #10
    27c8:	4469      	add	r1, sp
    27ca:	4b1d      	ldr	r3, [pc, #116]	; (2840 <atcab_gendig+0xfc>)
    27cc:	4798      	blx	r3
    27ce:	1e04      	subs	r4, r0, #0
    27d0:	d121      	bne.n	2816 <atcab_gendig+0xd2>
			break;

		// Check response size
		if (packet.rxsize < 4) {
    27d2:	238a      	movs	r3, #138	; 0x8a
    27d4:	aa01      	add	r2, sp, #4
    27d6:	5ad4      	ldrh	r4, [r2, r3]
    27d8:	2c03      	cmp	r4, #3
    27da:	d803      	bhi.n	27e4 <atcab_gendig+0xa0>
			if (packet.rxsize > 0)
				status = ATCA_RX_FAIL;
			else
				status = ATCA_RX_NO_RESPONSE;
    27dc:	4263      	negs	r3, r4
    27de:	415c      	adcs	r4, r3
    27e0:	34e6      	adds	r4, #230	; 0xe6
    27e2:	e018      	b.n	2816 <atcab_gendig+0xd2>
			break;
		}

		// check for response
		if ( (status = isATCAError(packet.info)) != ATCA_SUCCESS )
    27e4:	200a      	movs	r0, #10
    27e6:	4468      	add	r0, sp
    27e8:	4b16      	ldr	r3, [pc, #88]	; (2844 <atcab_gendig+0x100>)
    27ea:	4798      	blx	r3
    27ec:	0004      	movs	r4, r0
    27ee:	e012      	b.n	2816 <atcab_gendig+0xd2>
		return ATCA_GEN_FAIL;
    27f0:	24e1      	movs	r4, #225	; 0xe1
    27f2:	e012      	b.n	281a <atcab_gendig+0xd6>
        return ATCA_BAD_PARAM;
    27f4:	24e2      	movs	r4, #226	; 0xe2
    27f6:	e010      	b.n	281a <atcab_gendig+0xd6>
		packet.param1 = zone;
    27f8:	aa01      	add	r2, sp, #4
    27fa:	70d0      	strb	r0, [r2, #3]
		packet.param2 = key_id;
    27fc:	8091      	strh	r1, [r2, #4]
		if ( packet.param1 == GENDIG_ZONE_SHARED_NONCE && other_data_size >= ATCA_BLOCK_SIZE)
    27fe:	2803      	cmp	r0, #3
    2800:	d0c6      	beq.n	2790 <atcab_gendig+0x4c>
	bool hasMACKey = 0;
    2802:	2200      	movs	r2, #0
		else if ( packet.param1 == GENDIG_ZONE_DATA && other_data_size >= ATCA_WORD_SIZE) {
    2804:	2802      	cmp	r0, #2
    2806:	d0b7      	beq.n	2778 <atcab_gendig+0x34>
		if ( (status = atGenDig( _gCommandObj, &packet, hasMACKey)) != ATCA_SUCCESS )
    2808:	4b07      	ldr	r3, [pc, #28]	; (2828 <atcab_gendig+0xe4>)
    280a:	6818      	ldr	r0, [r3, #0]
    280c:	a901      	add	r1, sp, #4
    280e:	4b0e      	ldr	r3, [pc, #56]	; (2848 <atcab_gendig+0x104>)
    2810:	4798      	blx	r3
    2812:	1e04      	subs	r4, r0, #0
    2814:	d0be      	beq.n	2794 <atcab_gendig+0x50>
			break;

	} while (0);

	_atcab_exit();
    2816:	4b0d      	ldr	r3, [pc, #52]	; (284c <atcab_gendig+0x108>)
    2818:	4798      	blx	r3
	return status;
}
    281a:	0020      	movs	r0, r4
    281c:	b025      	add	sp, #148	; 0x94
    281e:	bd30      	pop	{r4, r5, pc}
    2820:	200009d8 	.word	0x200009d8
    2824:	0000683f 	.word	0x0000683f
    2828:	200009d4 	.word	0x200009d4
    282c:	00001a6d 	.word	0x00001a6d
    2830:	00001f25 	.word	0x00001f25
    2834:	200009dc 	.word	0x200009dc
    2838:	00001da1 	.word	0x00001da1
    283c:	00003789 	.word	0x00003789
    2840:	00001da9 	.word	0x00001da9
    2844:	00001cbd 	.word	0x00001cbd
    2848:	00001b41 	.word	0x00001b41
    284c:	00001f6d 	.word	0x00001f6d

00002850 <atcab_mac>:
 *	\param[in]  challenge  The 32 byte challenge number
 *	\param[out] digest     The response of the MAC command using the given challenge
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_mac( uint8_t mode, uint16_t key_id, const uint8_t* challenge, uint8_t* digest )
{
    2850:	b570      	push	{r4, r5, r6, lr}
    2852:	b0a4      	sub	sp, #144	; 0x90
    2854:	0015      	movs	r5, r2
    2856:	1e1e      	subs	r6, r3, #0
	uint16_t execution_time = 0;

	do {

		// Verify the inputs
		if (digest == NULL ) {
    2858:	d04e      	beq.n	28f8 <atcab_mac+0xa8>
			status = ATCA_BAD_PARAM;
			break;
		}

		// build mac command
		packet.param1 = mode;
    285a:	ab01      	add	r3, sp, #4
    285c:	70d8      	strb	r0, [r3, #3]
		packet.param2 = key_id;
    285e:	8099      	strh	r1, [r3, #4]
		if (!(mode & MAC_MODE_BLOCK2_TEMPKEY))
    2860:	07c3      	lsls	r3, r0, #31
    2862:	d408      	bmi.n	2876 <atcab_mac+0x26>
		{
			if (challenge == NULL)
				return ATCA_BAD_PARAM;
    2864:	24e2      	movs	r4, #226	; 0xe2
			if (challenge == NULL)
    2866:	2a00      	cmp	r2, #0
    2868:	d00e      	beq.n	2888 <atcab_mac+0x38>
			memcpy(&packet.info[0], challenge, 32);  // a 32-byte challenge
    286a:	2220      	movs	r2, #32
    286c:	0029      	movs	r1, r5
    286e:	200a      	movs	r0, #10
    2870:	4468      	add	r0, sp
    2872:	4b22      	ldr	r3, [pc, #136]	; (28fc <atcab_mac+0xac>)
    2874:	4798      	blx	r3
		}

		if ( (status = atMAC( _gCommandObj, &packet )) != ATCA_SUCCESS )
    2876:	4b22      	ldr	r3, [pc, #136]	; (2900 <atcab_mac+0xb0>)
    2878:	6818      	ldr	r0, [r3, #0]
    287a:	a901      	add	r1, sp, #4
    287c:	4b21      	ldr	r3, [pc, #132]	; (2904 <atcab_mac+0xb4>)
    287e:	4798      	blx	r3
    2880:	1e04      	subs	r4, r0, #0
    2882:	d004      	beq.n	288e <atcab_mac+0x3e>

		memcpy( digest, &packet.info[ATCA_RSP_DATA_IDX], MAC_SIZE );

	} while (0);

	_atcab_exit();
    2884:	4b20      	ldr	r3, [pc, #128]	; (2908 <atcab_mac+0xb8>)
    2886:	4798      	blx	r3
	return status;
}
    2888:	0020      	movs	r0, r4
    288a:	b024      	add	sp, #144	; 0x90
    288c:	bd70      	pop	{r4, r5, r6, pc}
		execution_time = atGetExecTime( _gCommandObj, CMD_MAC);
    288e:	4b1c      	ldr	r3, [pc, #112]	; (2900 <atcab_mac+0xb0>)
    2890:	6818      	ldr	r0, [r3, #0]
    2892:	210a      	movs	r1, #10
    2894:	4b1d      	ldr	r3, [pc, #116]	; (290c <atcab_mac+0xbc>)
    2896:	4798      	blx	r3
    2898:	0005      	movs	r5, r0
		if ( (status != atcab_wakeup()) != ATCA_SUCCESS ) break;
    289a:	4b1d      	ldr	r3, [pc, #116]	; (2910 <atcab_mac+0xc0>)
    289c:	4798      	blx	r3
    289e:	2800      	cmp	r0, #0
    28a0:	d1f0      	bne.n	2884 <atcab_mac+0x34>
		if ( (status = atsend( _gIface, (uint8_t*)&packet, packet.txsize )) != ATCA_SUCCESS )
    28a2:	a901      	add	r1, sp, #4
    28a4:	784a      	ldrb	r2, [r1, #1]
    28a6:	4b1b      	ldr	r3, [pc, #108]	; (2914 <atcab_mac+0xc4>)
    28a8:	6818      	ldr	r0, [r3, #0]
    28aa:	4b1b      	ldr	r3, [pc, #108]	; (2918 <atcab_mac+0xc8>)
    28ac:	4798      	blx	r3
    28ae:	1e04      	subs	r4, r0, #0
    28b0:	d1e8      	bne.n	2884 <atcab_mac+0x34>
		atca_delay_ms(execution_time);
    28b2:	0028      	movs	r0, r5
    28b4:	4b19      	ldr	r3, [pc, #100]	; (291c <atcab_mac+0xcc>)
    28b6:	4798      	blx	r3
		if ( (status = atreceive( _gIface, packet.info, &(packet.rxsize))) != ATCA_SUCCESS )
    28b8:	4b16      	ldr	r3, [pc, #88]	; (2914 <atcab_mac+0xc4>)
    28ba:	6818      	ldr	r0, [r3, #0]
    28bc:	228e      	movs	r2, #142	; 0x8e
    28be:	446a      	add	r2, sp
    28c0:	210a      	movs	r1, #10
    28c2:	4469      	add	r1, sp
    28c4:	4b16      	ldr	r3, [pc, #88]	; (2920 <atcab_mac+0xd0>)
    28c6:	4798      	blx	r3
    28c8:	1e04      	subs	r4, r0, #0
    28ca:	d1db      	bne.n	2884 <atcab_mac+0x34>
		if (packet.rxsize < 4) {
    28cc:	238a      	movs	r3, #138	; 0x8a
    28ce:	aa01      	add	r2, sp, #4
    28d0:	5ad4      	ldrh	r4, [r2, r3]
    28d2:	2c03      	cmp	r4, #3
    28d4:	d803      	bhi.n	28de <atcab_mac+0x8e>
				status = ATCA_RX_NO_RESPONSE;
    28d6:	4263      	negs	r3, r4
    28d8:	415c      	adcs	r4, r3
    28da:	34e6      	adds	r4, #230	; 0xe6
    28dc:	e7d2      	b.n	2884 <atcab_mac+0x34>
		if ( (status = isATCAError(packet.info)) != ATCA_SUCCESS )
    28de:	200a      	movs	r0, #10
    28e0:	4468      	add	r0, sp
    28e2:	4b10      	ldr	r3, [pc, #64]	; (2924 <atcab_mac+0xd4>)
    28e4:	4798      	blx	r3
    28e6:	1e04      	subs	r4, r0, #0
    28e8:	d1cc      	bne.n	2884 <atcab_mac+0x34>
		memcpy( digest, &packet.info[ATCA_RSP_DATA_IDX], MAC_SIZE );
    28ea:	2220      	movs	r2, #32
    28ec:	210b      	movs	r1, #11
    28ee:	4469      	add	r1, sp
    28f0:	0030      	movs	r0, r6
    28f2:	4b02      	ldr	r3, [pc, #8]	; (28fc <atcab_mac+0xac>)
    28f4:	4798      	blx	r3
    28f6:	e7c5      	b.n	2884 <atcab_mac+0x34>
			status = ATCA_BAD_PARAM;
    28f8:	24e2      	movs	r4, #226	; 0xe2
    28fa:	e7c3      	b.n	2884 <atcab_mac+0x34>
    28fc:	0000683f 	.word	0x0000683f
    2900:	200009d4 	.word	0x200009d4
    2904:	00001bb1 	.word	0x00001bb1
    2908:	00001f6d 	.word	0x00001f6d
    290c:	00001a6d 	.word	0x00001a6d
    2910:	00001f25 	.word	0x00001f25
    2914:	200009dc 	.word	0x200009dc
    2918:	00001da1 	.word	0x00001da1
    291c:	00003789 	.word	0x00003789
    2920:	00001da9 	.word	0x00001da9
    2924:	00001cbd 	.word	0x00001cbd

00002928 <atcab_checkmac>:
 *	\param[in] response The 32 byte mac response number
 *	\param[in] other_data The 13 byte other data number
 *  \return ATCA_STATUS
 */
ATCA_STATUS atcab_checkmac( uint8_t mode, uint16_t key_id, const uint8_t *challenge, const uint8_t *response, const uint8_t *other_data)
{
    2928:	b530      	push	{r4, r5, lr}
    292a:	b0a5      	sub	sp, #148	; 0x94
    292c:	0014      	movs	r4, r2
    292e:	1e1d      	subs	r5, r3, #0
	ATCA_STATUS status = ATCA_GEN_FAIL;
	ATCAPacket packet;
	uint16_t execution_time = 0;

    // Verify the inputs
    if (response == NULL || other_data == NULL)
    2930:	d061      	beq.n	29f6 <atcab_checkmac+0xce>
    2932:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2934:	2b00      	cmp	r3, #0
    2936:	d060      	beq.n	29fa <atcab_checkmac+0xd2>
        return ATCA_BAD_PARAM;
    if (!(mode & CHECKMAC_MODE_BLOCK2_TEMPKEY) && challenge == NULL)
    2938:	07c3      	lsls	r3, r0, #31
    293a:	d405      	bmi.n	2948 <atcab_checkmac+0x20>
    293c:	2a00      	cmp	r2, #0
    293e:	d05e      	beq.n	29fe <atcab_checkmac+0xd6>
        return ATCA_BAD_PARAM;

	do {
		// build checkmac command
		packet.param1 = mode;
    2940:	ab01      	add	r3, sp, #4
    2942:	70d8      	strb	r0, [r3, #3]
		packet.param2 = key_id;
    2944:	8099      	strh	r1, [r3, #4]
    2946:	e004      	b.n	2952 <atcab_checkmac+0x2a>
		packet.param1 = mode;
    2948:	ab01      	add	r3, sp, #4
    294a:	70d8      	strb	r0, [r3, #3]
		packet.param2 = key_id;
    294c:	8099      	strh	r1, [r3, #4]
        if (challenge != NULL)
    294e:	2a00      	cmp	r2, #0
    2950:	d01c      	beq.n	298c <atcab_checkmac+0x64>
            memcpy(&packet.info[0], challenge, CHECKMAC_CLIENT_CHALLENGE_SIZE);
    2952:	2220      	movs	r2, #32
    2954:	0021      	movs	r1, r4
    2956:	200a      	movs	r0, #10
    2958:	4468      	add	r0, sp
    295a:	4b2a      	ldr	r3, [pc, #168]	; (2a04 <atcab_checkmac+0xdc>)
    295c:	4798      	blx	r3
        else
            memset(&packet.info[0], 0, CHECKMAC_CLIENT_CHALLENGE_SIZE);
		memcpy( &packet.info[32], response, CHECKMAC_CLIENT_RESPONSE_SIZE );
    295e:	2220      	movs	r2, #32
    2960:	0029      	movs	r1, r5
    2962:	202a      	movs	r0, #42	; 0x2a
    2964:	4468      	add	r0, sp
    2966:	4c27      	ldr	r4, [pc, #156]	; (2a04 <atcab_checkmac+0xdc>)
    2968:	47a0      	blx	r4
		memcpy( &packet.info[64], other_data, CHECKMAC_OTHER_DATA_SIZE );
    296a:	220d      	movs	r2, #13
    296c:	9928      	ldr	r1, [sp, #160]	; 0xa0
    296e:	204a      	movs	r0, #74	; 0x4a
    2970:	4468      	add	r0, sp
    2972:	47a0      	blx	r4

		if ( (status = atCheckMAC( _gCommandObj, &packet )) != ATCA_SUCCESS )
    2974:	4b24      	ldr	r3, [pc, #144]	; (2a08 <atcab_checkmac+0xe0>)
    2976:	6818      	ldr	r0, [r3, #0]
    2978:	a901      	add	r1, sp, #4
    297a:	4b24      	ldr	r3, [pc, #144]	; (2a0c <atcab_checkmac+0xe4>)
    297c:	4798      	blx	r3
    297e:	1e04      	subs	r4, r0, #0
    2980:	d00b      	beq.n	299a <atcab_checkmac+0x72>
		// check for response
		if ( (status = isATCAError(packet.info)) != ATCA_SUCCESS )
			break;
	} while (0);

	_atcab_exit();
    2982:	4b23      	ldr	r3, [pc, #140]	; (2a10 <atcab_checkmac+0xe8>)
    2984:	4798      	blx	r3
	return status;
}
    2986:	0020      	movs	r0, r4
    2988:	b025      	add	sp, #148	; 0x94
    298a:	bd30      	pop	{r4, r5, pc}
            memset(&packet.info[0], 0, CHECKMAC_CLIENT_CHALLENGE_SIZE);
    298c:	2220      	movs	r2, #32
    298e:	2100      	movs	r1, #0
    2990:	200a      	movs	r0, #10
    2992:	4468      	add	r0, sp
    2994:	4b1f      	ldr	r3, [pc, #124]	; (2a14 <atcab_checkmac+0xec>)
    2996:	4798      	blx	r3
    2998:	e7e1      	b.n	295e <atcab_checkmac+0x36>
		execution_time = atGetExecTime( _gCommandObj, CMD_CHECKMAC);
    299a:	4b1b      	ldr	r3, [pc, #108]	; (2a08 <atcab_checkmac+0xe0>)
    299c:	6818      	ldr	r0, [r3, #0]
    299e:	2101      	movs	r1, #1
    29a0:	4b1d      	ldr	r3, [pc, #116]	; (2a18 <atcab_checkmac+0xf0>)
    29a2:	4798      	blx	r3
    29a4:	0005      	movs	r5, r0
		if ( (status != atcab_wakeup()) != ATCA_SUCCESS ) break;
    29a6:	4b1d      	ldr	r3, [pc, #116]	; (2a1c <atcab_checkmac+0xf4>)
    29a8:	4798      	blx	r3
    29aa:	2800      	cmp	r0, #0
    29ac:	d1e9      	bne.n	2982 <atcab_checkmac+0x5a>
		if ( (status = atsend( _gIface, (uint8_t*)&packet, packet.txsize )) != ATCA_SUCCESS )
    29ae:	a901      	add	r1, sp, #4
    29b0:	784a      	ldrb	r2, [r1, #1]
    29b2:	4b1b      	ldr	r3, [pc, #108]	; (2a20 <atcab_checkmac+0xf8>)
    29b4:	6818      	ldr	r0, [r3, #0]
    29b6:	4b1b      	ldr	r3, [pc, #108]	; (2a24 <atcab_checkmac+0xfc>)
    29b8:	4798      	blx	r3
    29ba:	1e04      	subs	r4, r0, #0
    29bc:	d1e1      	bne.n	2982 <atcab_checkmac+0x5a>
		atca_delay_ms( execution_time );
    29be:	0028      	movs	r0, r5
    29c0:	4b19      	ldr	r3, [pc, #100]	; (2a28 <atcab_checkmac+0x100>)
    29c2:	4798      	blx	r3
		if ( (status = atreceive( _gIface, packet.info, &(packet.rxsize))) != ATCA_SUCCESS )
    29c4:	4b16      	ldr	r3, [pc, #88]	; (2a20 <atcab_checkmac+0xf8>)
    29c6:	6818      	ldr	r0, [r3, #0]
    29c8:	228e      	movs	r2, #142	; 0x8e
    29ca:	446a      	add	r2, sp
    29cc:	210a      	movs	r1, #10
    29ce:	4469      	add	r1, sp
    29d0:	4b16      	ldr	r3, [pc, #88]	; (2a2c <atcab_checkmac+0x104>)
    29d2:	4798      	blx	r3
    29d4:	1e04      	subs	r4, r0, #0
    29d6:	d1d4      	bne.n	2982 <atcab_checkmac+0x5a>
		if (packet.rxsize < 4) {
    29d8:	238a      	movs	r3, #138	; 0x8a
    29da:	aa01      	add	r2, sp, #4
    29dc:	5ad4      	ldrh	r4, [r2, r3]
    29de:	2c03      	cmp	r4, #3
    29e0:	d803      	bhi.n	29ea <atcab_checkmac+0xc2>
				status = ATCA_RX_NO_RESPONSE;
    29e2:	4263      	negs	r3, r4
    29e4:	415c      	adcs	r4, r3
    29e6:	34e6      	adds	r4, #230	; 0xe6
    29e8:	e7cb      	b.n	2982 <atcab_checkmac+0x5a>
		if ( (status = isATCAError(packet.info)) != ATCA_SUCCESS )
    29ea:	200a      	movs	r0, #10
    29ec:	4468      	add	r0, sp
    29ee:	4b10      	ldr	r3, [pc, #64]	; (2a30 <atcab_checkmac+0x108>)
    29f0:	4798      	blx	r3
    29f2:	0004      	movs	r4, r0
    29f4:	e7c5      	b.n	2982 <atcab_checkmac+0x5a>
        return ATCA_BAD_PARAM;
    29f6:	24e2      	movs	r4, #226	; 0xe2
    29f8:	e7c5      	b.n	2986 <atcab_checkmac+0x5e>
    29fa:	24e2      	movs	r4, #226	; 0xe2
    29fc:	e7c3      	b.n	2986 <atcab_checkmac+0x5e>
        return ATCA_BAD_PARAM;
    29fe:	24e2      	movs	r4, #226	; 0xe2
    2a00:	e7c1      	b.n	2986 <atcab_checkmac+0x5e>
    2a02:	46c0      	nop			; (mov r8, r8)
    2a04:	0000683f 	.word	0x0000683f
    2a08:	200009d4 	.word	0x200009d4
    2a0c:	00001af9 	.word	0x00001af9
    2a10:	00001f6d 	.word	0x00001f6d
    2a14:	00006875 	.word	0x00006875
    2a18:	00001a6d 	.word	0x00001a6d
    2a1c:	00001f25 	.word	0x00001f25
    2a20:	200009dc 	.word	0x200009dc
    2a24:	00001da1 	.word	0x00001da1
    2a28:	00003789 	.word	0x00003789
    2a2c:	00001da9 	.word	0x00001da9
    2a30:	00001cbd 	.word	0x00001cbd

00002a34 <atcab_updateextra>:
 *                       limited use counter will be decremented.
 *
 * \return ATCA_SUCCESS on success
 */
ATCA_STATUS atcab_updateextra(uint8_t mode, uint16_t new_value)
{
    2a34:	b570      	push	{r4, r5, r6, lr}
    2a36:	b0a4      	sub	sp, #144	; 0x90
    2a38:	0006      	movs	r6, r0
    2a3a:	000d      	movs	r5, r1
    ATCAPacket packet;
    uint16_t execution_time = 0;

    do {
        // Build command
        memset(&packet, 0, sizeof(packet));
    2a3c:	ac01      	add	r4, sp, #4
    2a3e:	228c      	movs	r2, #140	; 0x8c
    2a40:	2100      	movs	r1, #0
    2a42:	0020      	movs	r0, r4
    2a44:	4b1f      	ldr	r3, [pc, #124]	; (2ac4 <atcab_updateextra+0x90>)
    2a46:	4798      	blx	r3
        packet.param1 = mode;
    2a48:	70e6      	strb	r6, [r4, #3]
        packet.param2 = new_value;
    2a4a:	80a5      	strh	r5, [r4, #4]

        if ((status = atUpdateExtra(_gCommandObj, &packet)) != ATCA_SUCCESS)
    2a4c:	4b1e      	ldr	r3, [pc, #120]	; (2ac8 <atcab_updateextra+0x94>)
    2a4e:	6818      	ldr	r0, [r3, #0]
    2a50:	0021      	movs	r1, r4
    2a52:	4b1e      	ldr	r3, [pc, #120]	; (2acc <atcab_updateextra+0x98>)
    2a54:	4798      	blx	r3
    2a56:	1e04      	subs	r4, r0, #0
    2a58:	d004      	beq.n	2a64 <atcab_updateextra+0x30>
        // check for response
        if ((status = isATCAError(packet.info)) != ATCA_SUCCESS)
            break;
    } while (0);

    _atcab_exit();
    2a5a:	4b1d      	ldr	r3, [pc, #116]	; (2ad0 <atcab_updateextra+0x9c>)
    2a5c:	4798      	blx	r3
    return status;
}
    2a5e:	0020      	movs	r0, r4
    2a60:	b024      	add	sp, #144	; 0x90
    2a62:	bd70      	pop	{r4, r5, r6, pc}
        execution_time = atGetExecTime(_gCommandObj, CMD_UPDATEEXTRA);
    2a64:	4b18      	ldr	r3, [pc, #96]	; (2ac8 <atcab_updateextra+0x94>)
    2a66:	6818      	ldr	r0, [r3, #0]
    2a68:	2112      	movs	r1, #18
    2a6a:	4b1a      	ldr	r3, [pc, #104]	; (2ad4 <atcab_updateextra+0xa0>)
    2a6c:	4798      	blx	r3
    2a6e:	0005      	movs	r5, r0
        if ((status != atcab_wakeup()) != ATCA_SUCCESS)
    2a70:	4b19      	ldr	r3, [pc, #100]	; (2ad8 <atcab_updateextra+0xa4>)
    2a72:	4798      	blx	r3
    2a74:	2800      	cmp	r0, #0
    2a76:	d1f0      	bne.n	2a5a <atcab_updateextra+0x26>
        if ((status = atsend(_gIface, (uint8_t*)&packet, packet.txsize)) != ATCA_SUCCESS)
    2a78:	a901      	add	r1, sp, #4
    2a7a:	784a      	ldrb	r2, [r1, #1]
    2a7c:	4b17      	ldr	r3, [pc, #92]	; (2adc <atcab_updateextra+0xa8>)
    2a7e:	6818      	ldr	r0, [r3, #0]
    2a80:	4b17      	ldr	r3, [pc, #92]	; (2ae0 <atcab_updateextra+0xac>)
    2a82:	4798      	blx	r3
    2a84:	1e04      	subs	r4, r0, #0
    2a86:	d1e8      	bne.n	2a5a <atcab_updateextra+0x26>
        atca_delay_ms(execution_time);
    2a88:	0028      	movs	r0, r5
    2a8a:	4b16      	ldr	r3, [pc, #88]	; (2ae4 <atcab_updateextra+0xb0>)
    2a8c:	4798      	blx	r3
        if ((status = atreceive(_gIface, packet.info, &(packet.rxsize))) != ATCA_SUCCESS)
    2a8e:	4b13      	ldr	r3, [pc, #76]	; (2adc <atcab_updateextra+0xa8>)
    2a90:	6818      	ldr	r0, [r3, #0]
    2a92:	228e      	movs	r2, #142	; 0x8e
    2a94:	446a      	add	r2, sp
    2a96:	210a      	movs	r1, #10
    2a98:	4469      	add	r1, sp
    2a9a:	4b13      	ldr	r3, [pc, #76]	; (2ae8 <atcab_updateextra+0xb4>)
    2a9c:	4798      	blx	r3
    2a9e:	1e04      	subs	r4, r0, #0
    2aa0:	d1db      	bne.n	2a5a <atcab_updateextra+0x26>
        if (packet.rxsize < 4) {
    2aa2:	238a      	movs	r3, #138	; 0x8a
    2aa4:	aa01      	add	r2, sp, #4
    2aa6:	5ad4      	ldrh	r4, [r2, r3]
    2aa8:	2c03      	cmp	r4, #3
    2aaa:	d804      	bhi.n	2ab6 <atcab_updateextra+0x82>
                status = ATCA_RX_NO_RESPONSE;
    2aac:	4260      	negs	r0, r4
    2aae:	4160      	adcs	r0, r4
    2ab0:	30e6      	adds	r0, #230	; 0xe6
    2ab2:	0004      	movs	r4, r0
    2ab4:	e7d1      	b.n	2a5a <atcab_updateextra+0x26>
        if ((status = isATCAError(packet.info)) != ATCA_SUCCESS)
    2ab6:	200a      	movs	r0, #10
    2ab8:	4468      	add	r0, sp
    2aba:	4b0c      	ldr	r3, [pc, #48]	; (2aec <atcab_updateextra+0xb8>)
    2abc:	4798      	blx	r3
    2abe:	0004      	movs	r4, r0
    2ac0:	e7cb      	b.n	2a5a <atcab_updateextra+0x26>
    2ac2:	46c0      	nop			; (mov r8, r8)
    2ac4:	00006875 	.word	0x00006875
    2ac8:	200009d4 	.word	0x200009d4
    2acc:	00001c65 	.word	0x00001c65
    2ad0:	00001f6d 	.word	0x00001f6d
    2ad4:	00001a6d 	.word	0x00001a6d
    2ad8:	00001f25 	.word	0x00001f25
    2adc:	200009dc 	.word	0x200009dc
    2ae0:	00001da1 	.word	0x00001da1
    2ae4:	00003789 	.word	0x00003789
    2ae8:	00001da9 	.word	0x00001da9
    2aec:	00001cbd 	.word	0x00001cbd

00002af0 <atcab_write_bytes_zone>:
{
    2af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2af2:	46de      	mov	lr, fp
    2af4:	4657      	mov	r7, sl
    2af6:	464e      	mov	r6, r9
    2af8:	b5c0      	push	{r6, r7, lr}
    2afa:	b088      	sub	sp, #32
    2afc:	0007      	movs	r7, r0
    2afe:	9103      	str	r1, [sp, #12]
    2b00:	0015      	movs	r5, r2
    2b02:	001e      	movs	r6, r3
    size_t zone_size = 0;
    2b04:	2300      	movs	r3, #0
    2b06:	9307      	str	r3, [sp, #28]
        return ATCA_BAD_PARAM;
    2b08:	24e2      	movs	r4, #226	; 0xe2
    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
    2b0a:	2802      	cmp	r0, #2
    2b0c:	d906      	bls.n	2b1c <atcab_write_bytes_zone+0x2c>
}
    2b0e:	0020      	movs	r0, r4
    2b10:	b008      	add	sp, #32
    2b12:	bc1c      	pop	{r2, r3, r4}
    2b14:	4691      	mov	r9, r2
    2b16:	469a      	mov	sl, r3
    2b18:	46a3      	mov	fp, r4
    2b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (zone == ATCA_ZONE_DATA && slot > 15)
    2b1c:	2802      	cmp	r0, #2
    2b1e:	d017      	beq.n	2b50 <atcab_write_bytes_zone+0x60>
        return ATCA_SUCCESS; // Always succeed writing 0 bytes
    2b20:	2400      	movs	r4, #0
    if (length == 0)
    2b22:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2b24:	2b00      	cmp	r3, #0
    2b26:	d0f2      	beq.n	2b0e <atcab_write_bytes_zone+0x1e>
    if (data == NULL)
    2b28:	2e00      	cmp	r6, #0
    2b2a:	d070      	beq.n	2c0e <atcab_write_bytes_zone+0x11e>
    if (offset_bytes % ATCA_WORD_SIZE != 0 || length % ATCA_WORD_SIZE != 0)
    2b2c:	432b      	orrs	r3, r5
        return ATCA_BAD_PARAM;
    2b2e:	34e2      	adds	r4, #226	; 0xe2
    if (offset_bytes % ATCA_WORD_SIZE != 0 || length % ATCA_WORD_SIZE != 0)
    2b30:	079b      	lsls	r3, r3, #30
    2b32:	d1ec      	bne.n	2b0e <atcab_write_bytes_zone+0x1e>
        status = atcab_get_zone_size(zone, slot, &zone_size);
    2b34:	aa07      	add	r2, sp, #28
    2b36:	9903      	ldr	r1, [sp, #12]
    2b38:	0038      	movs	r0, r7
    2b3a:	4b41      	ldr	r3, [pc, #260]	; (2c40 <atcab_write_bytes_zone+0x150>)
    2b3c:	4798      	blx	r3
    2b3e:	1e04      	subs	r4, r0, #0
        if (status != ATCA_SUCCESS)
    2b40:	d1e5      	bne.n	2b0e <atcab_write_bytes_zone+0x1e>
        if (offset_bytes + length > zone_size)
    2b42:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2b44:	195b      	adds	r3, r3, r5
    2b46:	9a07      	ldr	r2, [sp, #28]
    2b48:	4293      	cmp	r3, r2
    2b4a:	d904      	bls.n	2b56 <atcab_write_bytes_zone+0x66>
            return ATCA_BAD_PARAM;
    2b4c:	24e2      	movs	r4, #226	; 0xe2
    2b4e:	e7de      	b.n	2b0e <atcab_write_bytes_zone+0x1e>
    if (zone == ATCA_ZONE_DATA && slot > 15)
    2b50:	290f      	cmp	r1, #15
    2b52:	d8dc      	bhi.n	2b0e <atcab_write_bytes_zone+0x1e>
    2b54:	e7e4      	b.n	2b20 <atcab_write_bytes_zone+0x30>
        cur_block = offset_bytes / ATCA_BLOCK_SIZE;
    2b56:	096b      	lsrs	r3, r5, #5
    2b58:	469a      	mov	sl, r3
        cur_word = (offset_bytes % ATCA_BLOCK_SIZE) / ATCA_WORD_SIZE;
    2b5a:	06ed      	lsls	r5, r5, #27
    2b5c:	0f6d      	lsrs	r5, r5, #29
    2b5e:	2300      	movs	r3, #0
    2b60:	4699      	mov	r9, r3
                    status = atcab_write_zone(zone, slot, (uint8_t)cur_block, (uint8_t)cur_word, &data[data_idx], ATCA_WORD_SIZE);
    2b62:	4b38      	ldr	r3, [pc, #224]	; (2c44 <atcab_write_bytes_zone+0x154>)
    2b64:	469b      	mov	fp, r3
    2b66:	9005      	str	r0, [sp, #20]
    2b68:	464c      	mov	r4, r9
    2b6a:	46b9      	mov	r9, r7
    2b6c:	002f      	movs	r7, r5
    2b6e:	4655      	mov	r5, sl
    2b70:	9604      	str	r6, [sp, #16]
    2b72:	e017      	b.n	2ba4 <atcab_write_bytes_zone+0xb4>
                if (zone == ATCA_ZONE_CONFIG && cur_block == 2 && cur_word == 5)
    2b74:	464b      	mov	r3, r9
    2b76:	2b00      	cmp	r3, #0
    2b78:	d101      	bne.n	2b7e <atcab_write_bytes_zone+0x8e>
    2b7a:	2d02      	cmp	r5, #2
    2b7c:	d02d      	beq.n	2bda <atcab_write_bytes_zone+0xea>
                    status = atcab_write_zone(zone, slot, (uint8_t)cur_block, (uint8_t)cur_word, &data[data_idx], ATCA_WORD_SIZE);
    2b7e:	b2fb      	uxtb	r3, r7
    2b80:	b2ea      	uxtb	r2, r5
    2b82:	2104      	movs	r1, #4
    2b84:	9101      	str	r1, [sp, #4]
    2b86:	9904      	ldr	r1, [sp, #16]
    2b88:	1909      	adds	r1, r1, r4
    2b8a:	9100      	str	r1, [sp, #0]
    2b8c:	9903      	ldr	r1, [sp, #12]
    2b8e:	4648      	mov	r0, r9
    2b90:	47d8      	blx	fp
                    if (status != ATCA_SUCCESS)
    2b92:	2800      	cmp	r0, #0
    2b94:	d134      	bne.n	2c00 <atcab_write_bytes_zone+0x110>
                data_idx += ATCA_WORD_SIZE;
    2b96:	3404      	adds	r4, #4
                cur_word += 1;
    2b98:	3701      	adds	r7, #1
                if (cur_word == ATCA_BLOCK_SIZE/ATCA_WORD_SIZE)
    2b9a:	2f08      	cmp	r7, #8
    2b9c:	d032      	beq.n	2c04 <atcab_write_bytes_zone+0x114>
        while (data_idx < length)
    2b9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2ba0:	429c      	cmp	r4, r3
    2ba2:	d232      	bcs.n	2c0a <atcab_write_bytes_zone+0x11a>
            if (cur_word == 0 && length - data_idx >= ATCA_BLOCK_SIZE && !(zone == ATCA_ZONE_CONFIG && cur_block == 2))
    2ba4:	2f00      	cmp	r7, #0
    2ba6:	d1e5      	bne.n	2b74 <atcab_write_bytes_zone+0x84>
    2ba8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2baa:	1b1b      	subs	r3, r3, r4
    2bac:	2b1f      	cmp	r3, #31
    2bae:	d9e1      	bls.n	2b74 <atcab_write_bytes_zone+0x84>
    2bb0:	464b      	mov	r3, r9
    2bb2:	2b00      	cmp	r3, #0
    2bb4:	d101      	bne.n	2bba <atcab_write_bytes_zone+0xca>
    2bb6:	2d02      	cmp	r5, #2
    2bb8:	d031      	beq.n	2c1e <atcab_write_bytes_zone+0x12e>
                status = atcab_write_zone(zone, slot, (uint8_t)cur_block, 0, &data[data_idx], ATCA_BLOCK_SIZE);
    2bba:	b2ea      	uxtb	r2, r5
    2bbc:	2320      	movs	r3, #32
    2bbe:	9301      	str	r3, [sp, #4]
    2bc0:	9b04      	ldr	r3, [sp, #16]
    2bc2:	191b      	adds	r3, r3, r4
    2bc4:	9300      	str	r3, [sp, #0]
    2bc6:	2300      	movs	r3, #0
    2bc8:	9903      	ldr	r1, [sp, #12]
    2bca:	4648      	mov	r0, r9
    2bcc:	4e1d      	ldr	r6, [pc, #116]	; (2c44 <atcab_write_bytes_zone+0x154>)
    2bce:	47b0      	blx	r6
                if (status != ATCA_SUCCESS)
    2bd0:	2800      	cmp	r0, #0
    2bd2:	d11e      	bne.n	2c12 <atcab_write_bytes_zone+0x122>
                data_idx += ATCA_BLOCK_SIZE;
    2bd4:	3420      	adds	r4, #32
                cur_block += 1;
    2bd6:	3501      	adds	r5, #1
    2bd8:	e7e1      	b.n	2b9e <atcab_write_bytes_zone+0xae>
                if (zone == ATCA_ZONE_CONFIG && cur_block == 2 && cur_word == 5)
    2bda:	2f05      	cmp	r7, #5
    2bdc:	d1cf      	bne.n	2b7e <atcab_write_bytes_zone+0x8e>
                    status = atcab_updateextra(UPDATE_MODE_USER_EXTRA, data[data_idx]);
    2bde:	9e04      	ldr	r6, [sp, #16]
    2be0:	5d31      	ldrb	r1, [r6, r4]
    2be2:	2000      	movs	r0, #0
    2be4:	4b18      	ldr	r3, [pc, #96]	; (2c48 <atcab_write_bytes_zone+0x158>)
    2be6:	4798      	blx	r3
                    if (status != ATCA_SUCCESS)
    2be8:	2800      	cmp	r0, #0
    2bea:	d114      	bne.n	2c16 <atcab_write_bytes_zone+0x126>
                    status = atcab_updateextra(UPDATE_MODE_SELECTOR, data[data_idx + 1]);
    2bec:	1933      	adds	r3, r6, r4
    2bee:	7859      	ldrb	r1, [r3, #1]
    2bf0:	2001      	movs	r0, #1
    2bf2:	4b15      	ldr	r3, [pc, #84]	; (2c48 <atcab_write_bytes_zone+0x158>)
    2bf4:	4798      	blx	r3
                    if (status != ATCA_SUCCESS)
    2bf6:	2800      	cmp	r0, #0
    2bf8:	d10f      	bne.n	2c1a <atcab_write_bytes_zone+0x12a>
                data_idx += ATCA_WORD_SIZE;
    2bfa:	3404      	adds	r4, #4
                cur_word += 1;
    2bfc:	2706      	movs	r7, #6
    2bfe:	e7ce      	b.n	2b9e <atcab_write_bytes_zone+0xae>
                    status = atcab_updateextra(UPDATE_MODE_USER_EXTRA, data[data_idx]);
    2c00:	0004      	movs	r4, r0
    2c02:	e784      	b.n	2b0e <atcab_write_bytes_zone+0x1e>
                    cur_block += 1;
    2c04:	3501      	adds	r5, #1
                    cur_word = 0;
    2c06:	2700      	movs	r7, #0
    2c08:	e7c9      	b.n	2b9e <atcab_write_bytes_zone+0xae>
    2c0a:	9c05      	ldr	r4, [sp, #20]
    2c0c:	e77f      	b.n	2b0e <atcab_write_bytes_zone+0x1e>
        return ATCA_BAD_PARAM;
    2c0e:	24e2      	movs	r4, #226	; 0xe2
    2c10:	e77d      	b.n	2b0e <atcab_write_bytes_zone+0x1e>
                status = atcab_write_zone(zone, slot, (uint8_t)cur_block, 0, &data[data_idx], ATCA_BLOCK_SIZE);
    2c12:	0004      	movs	r4, r0
    2c14:	e77b      	b.n	2b0e <atcab_write_bytes_zone+0x1e>
                    status = atcab_updateextra(UPDATE_MODE_USER_EXTRA, data[data_idx]);
    2c16:	0004      	movs	r4, r0
    2c18:	e779      	b.n	2b0e <atcab_write_bytes_zone+0x1e>
                    status = atcab_updateextra(UPDATE_MODE_SELECTOR, data[data_idx + 1]);
    2c1a:	0004      	movs	r4, r0
    2c1c:	e777      	b.n	2b0e <atcab_write_bytes_zone+0x1e>
                    status = atcab_write_zone(zone, slot, (uint8_t)cur_block, (uint8_t)cur_word, &data[data_idx], ATCA_WORD_SIZE);
    2c1e:	b2fb      	uxtb	r3, r7
    2c20:	b2ea      	uxtb	r2, r5
    2c22:	2104      	movs	r1, #4
    2c24:	9101      	str	r1, [sp, #4]
    2c26:	9904      	ldr	r1, [sp, #16]
    2c28:	1909      	adds	r1, r1, r4
    2c2a:	9100      	str	r1, [sp, #0]
    2c2c:	9903      	ldr	r1, [sp, #12]
    2c2e:	4648      	mov	r0, r9
    2c30:	4e04      	ldr	r6, [pc, #16]	; (2c44 <atcab_write_bytes_zone+0x154>)
    2c32:	47b0      	blx	r6
                    if (status != ATCA_SUCCESS)
    2c34:	2800      	cmp	r0, #0
    2c36:	d1e3      	bne.n	2c00 <atcab_write_bytes_zone+0x110>
                data_idx += ATCA_WORD_SIZE;
    2c38:	3404      	adds	r4, #4
                cur_word += 1;
    2c3a:	3701      	adds	r7, #1
    2c3c:	e7af      	b.n	2b9e <atcab_write_bytes_zone+0xae>
    2c3e:	46c0      	nop			; (mov r8, r8)
    2c40:	000022d1 	.word	0x000022d1
    2c44:	0000245d 	.word	0x0000245d
    2c48:	00002a35 	.word	0x00002a35

00002c4c <atcab_write_sha_config_zone>:
{
    2c4c:	b510      	push	{r4, lr}
    2c4e:	b082      	sub	sp, #8
			status = ATCA_BAD_PARAM;
    2c50:	22e2      	movs	r2, #226	; 0xe2
		if ( config_data == NULL ) {
    2c52:	2800      	cmp	r0, #0
    2c54:	d009      	beq.n	2c6a <atcab_write_sha_config_zone+0x1e>
		status = atcab_write_bytes_zone(ATCA_ZONE_CONFIG, 0, 16, &config_data[16], ATCA_SHA_CONFIG_SIZE - 16);
    2c56:	0003      	movs	r3, r0
    2c58:	3310      	adds	r3, #16
    2c5a:	3a9a      	subs	r2, #154	; 0x9a
    2c5c:	9200      	str	r2, [sp, #0]
    2c5e:	3a38      	subs	r2, #56	; 0x38
    2c60:	2100      	movs	r1, #0
    2c62:	2000      	movs	r0, #0
    2c64:	4c02      	ldr	r4, [pc, #8]	; (2c70 <atcab_write_sha_config_zone+0x24>)
    2c66:	47a0      	blx	r4
    2c68:	0002      	movs	r2, r0
}
    2c6a:	0010      	movs	r0, r2
    2c6c:	b002      	add	sp, #8
    2c6e:	bd10      	pop	{r4, pc}
    2c70:	00002af1 	.word	0x00002af1

00002c74 <atcab_derive_key>:
    \return status of the operation
 *  returns ATCA_STATUS
 */

ATCA_STATUS atcab_derive_key(uint16_t key_slot, bool hasMAC, uint8_t * MAC)
{
    2c74:	b530      	push	{r4, r5, lr}
    2c76:	b0a5      	sub	sp, #148	; 0x94
    2c78:	000d      	movs	r5, r1
    2c7a:	0011      	movs	r1, r2
	ATCAPacket packet;
	ATCA_STATUS status = ATCA_GEN_FAIL;
	uint32_t execution_time;

	if ( !_gDevice )
    2c7c:	4b2e      	ldr	r3, [pc, #184]	; (2d38 <atcab_derive_key+0xc4>)
    2c7e:	681b      	ldr	r3, [r3, #0]
	return ATCA_GEN_FAIL;
    2c80:	24e1      	movs	r4, #225	; 0xe1
	if ( !_gDevice )
    2c82:	2b00      	cmp	r3, #0
    2c84:	d014      	beq.n	2cb0 <atcab_derive_key+0x3c>

	// build an info command
	packet.param1 = DERIVE_KEY_MODE;
    2c86:	ac01      	add	r4, sp, #4
    2c88:	2304      	movs	r3, #4
    2c8a:	70e3      	strb	r3, [r4, #3]
	packet.param2 = key_slot;
    2c8c:	80a0      	strh	r0, [r4, #4]
	memcpy(packet.info, MAC, DERIVE_KEY_MAC_SIZE);
    2c8e:	2220      	movs	r2, #32
    2c90:	200a      	movs	r0, #10
    2c92:	4468      	add	r0, sp
    2c94:	4b29      	ldr	r3, [pc, #164]	; (2d3c <atcab_derive_key+0xc8>)
    2c96:	4798      	blx	r3

	do {
		 if ( (status = atDeriveKey( _gCommandObj, &packet, hasMAC )) != ATCA_SUCCESS )
    2c98:	4b29      	ldr	r3, [pc, #164]	; (2d40 <atcab_derive_key+0xcc>)
    2c9a:	6818      	ldr	r0, [r3, #0]
    2c9c:	002a      	movs	r2, r5
    2c9e:	0021      	movs	r1, r4
    2ca0:	4b28      	ldr	r3, [pc, #160]	; (2d44 <atcab_derive_key+0xd0>)
    2ca2:	4798      	blx	r3
    2ca4:	1e04      	subs	r4, r0, #0
    2ca6:	d006      	beq.n	2cb6 <atcab_derive_key+0x42>
		
		if ( (status = isATCAError(packet.info)) != ATCA_SUCCESS )
		break;
	} while (0);

	if ( status != ATCA_COMM_FAIL )   // don't keep shoving more stuff at the chip if there's something wrong with comm
    2ca8:	2cf0      	cmp	r4, #240	; 0xf0
    2caa:	d001      	beq.n	2cb0 <atcab_derive_key+0x3c>
	_atcab_exit();
    2cac:	4b26      	ldr	r3, [pc, #152]	; (2d48 <atcab_derive_key+0xd4>)
    2cae:	4798      	blx	r3

	return status;
    2cb0:	0020      	movs	r0, r4
    2cb2:	b025      	add	sp, #148	; 0x94
    2cb4:	bd30      	pop	{r4, r5, pc}
		execution_time = atGetExecTime( _gCommandObj, CMD_DERIVEKEY);
    2cb6:	4b22      	ldr	r3, [pc, #136]	; (2d40 <atcab_derive_key+0xcc>)
    2cb8:	6818      	ldr	r0, [r3, #0]
    2cba:	2103      	movs	r1, #3
    2cbc:	4b23      	ldr	r3, [pc, #140]	; (2d4c <atcab_derive_key+0xd8>)
    2cbe:	4798      	blx	r3
    2cc0:	0005      	movs	r5, r0
		if ( (status = atcab_wakeup()) != ATCA_SUCCESS )
    2cc2:	4b23      	ldr	r3, [pc, #140]	; (2d50 <atcab_derive_key+0xdc>)
    2cc4:	4798      	blx	r3
    2cc6:	1e04      	subs	r4, r0, #0
    2cc8:	d004      	beq.n	2cd4 <atcab_derive_key+0x60>
		BREAK(status, "Failed to wakeup");
    2cca:	0001      	movs	r1, r0
    2ccc:	4821      	ldr	r0, [pc, #132]	; (2d54 <atcab_derive_key+0xe0>)
    2cce:	4b22      	ldr	r3, [pc, #136]	; (2d58 <atcab_derive_key+0xe4>)
    2cd0:	4798      	blx	r3
    2cd2:	e7e9      	b.n	2ca8 <atcab_derive_key+0x34>
		if ( (status = atsend( _gIface, (uint8_t*)&packet, packet.txsize )) != ATCA_SUCCESS )
    2cd4:	a901      	add	r1, sp, #4
    2cd6:	784a      	ldrb	r2, [r1, #1]
    2cd8:	4b20      	ldr	r3, [pc, #128]	; (2d5c <atcab_derive_key+0xe8>)
    2cda:	6818      	ldr	r0, [r3, #0]
    2cdc:	4b20      	ldr	r3, [pc, #128]	; (2d60 <atcab_derive_key+0xec>)
    2cde:	4798      	blx	r3
    2ce0:	1e04      	subs	r4, r0, #0
    2ce2:	d004      	beq.n	2cee <atcab_derive_key+0x7a>
		BREAK(status, "Failed to send Info command");
    2ce4:	0001      	movs	r1, r0
    2ce6:	481f      	ldr	r0, [pc, #124]	; (2d64 <atcab_derive_key+0xf0>)
    2ce8:	4b1b      	ldr	r3, [pc, #108]	; (2d58 <atcab_derive_key+0xe4>)
    2cea:	4798      	blx	r3
    2cec:	e7dc      	b.n	2ca8 <atcab_derive_key+0x34>
		atca_delay_ms(execution_time);
    2cee:	0028      	movs	r0, r5
    2cf0:	4b1d      	ldr	r3, [pc, #116]	; (2d68 <atcab_derive_key+0xf4>)
    2cf2:	4798      	blx	r3
		if ( (status = atreceive( _gIface, &(packet.info[0]), &(packet.rxsize) )) != ATCA_SUCCESS )
    2cf4:	4b19      	ldr	r3, [pc, #100]	; (2d5c <atcab_derive_key+0xe8>)
    2cf6:	6818      	ldr	r0, [r3, #0]
    2cf8:	228e      	movs	r2, #142	; 0x8e
    2cfa:	446a      	add	r2, sp
    2cfc:	210a      	movs	r1, #10
    2cfe:	4469      	add	r1, sp
    2d00:	4b1a      	ldr	r3, [pc, #104]	; (2d6c <atcab_derive_key+0xf8>)
    2d02:	4798      	blx	r3
    2d04:	1e04      	subs	r4, r0, #0
    2d06:	d10c      	bne.n	2d22 <atcab_derive_key+0xae>
		if (packet.rxsize < 4) {
    2d08:	238a      	movs	r3, #138	; 0x8a
    2d0a:	aa01      	add	r2, sp, #4
    2d0c:	5ad4      	ldrh	r4, [r2, r3]
    2d0e:	2c03      	cmp	r4, #3
    2d10:	d80c      	bhi.n	2d2c <atcab_derive_key+0xb8>
			status = ATCA_RX_NO_RESPONSE;
    2d12:	4263      	negs	r3, r4
    2d14:	415c      	adcs	r4, r3
    2d16:	34e6      	adds	r4, #230	; 0xe6
			BREAK(status, "Info command returned error code or no resonse");
    2d18:	0021      	movs	r1, r4
    2d1a:	4815      	ldr	r0, [pc, #84]	; (2d70 <atcab_derive_key+0xfc>)
    2d1c:	4b0e      	ldr	r3, [pc, #56]	; (2d58 <atcab_derive_key+0xe4>)
    2d1e:	4798      	blx	r3
    2d20:	e7c2      	b.n	2ca8 <atcab_derive_key+0x34>
		BREAK(status, "Failed to receive Info command");
    2d22:	0001      	movs	r1, r0
    2d24:	4813      	ldr	r0, [pc, #76]	; (2d74 <atcab_derive_key+0x100>)
    2d26:	4b0c      	ldr	r3, [pc, #48]	; (2d58 <atcab_derive_key+0xe4>)
    2d28:	4798      	blx	r3
    2d2a:	e7bd      	b.n	2ca8 <atcab_derive_key+0x34>
		if ( (status = isATCAError(packet.info)) != ATCA_SUCCESS )
    2d2c:	200a      	movs	r0, #10
    2d2e:	4468      	add	r0, sp
    2d30:	4b11      	ldr	r3, [pc, #68]	; (2d78 <atcab_derive_key+0x104>)
    2d32:	4798      	blx	r3
    2d34:	0004      	movs	r4, r0
    2d36:	e7b7      	b.n	2ca8 <atcab_derive_key+0x34>
    2d38:	200009d8 	.word	0x200009d8
    2d3c:	0000683f 	.word	0x0000683f
    2d40:	200009d4 	.word	0x200009d4
    2d44:	00001b19 	.word	0x00001b19
    2d48:	00001f6d 	.word	0x00001f6d
    2d4c:	00001a6d 	.word	0x00001a6d
    2d50:	00001f25 	.word	0x00001f25
    2d54:	00008b24 	.word	0x00008b24
    2d58:	000069d5 	.word	0x000069d5
    2d5c:	200009dc 	.word	0x200009dc
    2d60:	00001da1 	.word	0x00001da1
    2d64:	00008b4c 	.word	0x00008b4c
    2d68:	00003789 	.word	0x00003789
    2d6c:	00001da9 	.word	0x00001da9
    2d70:	00008bb0 	.word	0x00008bb0
    2d74:	00008b7c 	.word	0x00008b7c
    2d78:	00001cbd 	.word	0x00001cbd

00002d7c <atcab_bin2hex_>:
 *  \param[inout] asciihexlen the length of the asciihex buffer
 *  \param[inout] addspace indicates whether spaces and returns should be added for pretty printing
 * \return ATCA_STATUS
 */
ATCA_STATUS atcab_bin2hex_(const uint8_t* binary, int binLen, char* asciihex, int* asciihexlen, bool addspace)
{
    2d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d7e:	46de      	mov	lr, fp
    2d80:	4657      	mov	r7, sl
    2d82:	464e      	mov	r6, r9
    2d84:	4645      	mov	r5, r8
    2d86:	b5e0      	push	{r5, r6, r7, lr}
    2d88:	4681      	mov	r9, r0
    2d8a:	468a      	mov	sl, r1
    2d8c:	0017      	movs	r7, r2
    2d8e:	001e      	movs	r6, r3
    2d90:	ab0a      	add	r3, sp, #40	; 0x28
    2d92:	781b      	ldrb	r3, [r3, #0]
    2d94:	469b      	mov	fp, r3
	int i;
	int hexlen = 0;

	// Verify the inputs
	if ((binary == NULL) || (asciihex == NULL) || (asciihexlen == NULL))
    2d96:	2800      	cmp	r0, #0
    2d98:	d049      	beq.n	2e2e <atcab_bin2hex_+0xb2>
    2d9a:	2a00      	cmp	r2, #0
    2d9c:	d049      	beq.n	2e32 <atcab_bin2hex_+0xb6>
		return ATCA_BAD_PARAM;
    2d9e:	20e2      	movs	r0, #226	; 0xe2
	if ((binary == NULL) || (asciihex == NULL) || (asciihexlen == NULL))
    2da0:	2e00      	cmp	r6, #0
    2da2:	d03c      	beq.n	2e1e <atcab_bin2hex_+0xa2>

	// Initialize the return bytes to all 0s
	memset(asciihex, 0, *asciihexlen);
    2da4:	6832      	ldr	r2, [r6, #0]
    2da6:	2100      	movs	r1, #0
    2da8:	0038      	movs	r0, r7
    2daa:	4b23      	ldr	r3, [pc, #140]	; (2e38 <atcab_bin2hex_+0xbc>)
    2dac:	4798      	blx	r3

	// Convert one byte at a time
	for (i = 0; i < binLen; i++) {
    2dae:	4653      	mov	r3, sl
    2db0:	2b00      	cmp	r3, #0
    2db2:	dd2f      	ble.n	2e14 <atcab_bin2hex_+0x98>
		if (hexlen > *asciihexlen) break;
    2db4:	6833      	ldr	r3, [r6, #0]
    2db6:	2b00      	cmp	r3, #0
    2db8:	db2c      	blt.n	2e14 <atcab_bin2hex_+0x98>
    2dba:	2500      	movs	r5, #0
    2dbc:	2400      	movs	r4, #0
    2dbe:	46b0      	mov	r8, r6
    2dc0:	e017      	b.n	2df2 <atcab_bin2hex_+0x76>
		if ((i % 16 == 0 && i != 0) && addspace) {
			sprintf(&asciihex[hexlen], "\r\n");
    2dc2:	1978      	adds	r0, r7, r5
    2dc4:	2203      	movs	r2, #3
    2dc6:	491d      	ldr	r1, [pc, #116]	; (2e3c <atcab_bin2hex_+0xc0>)
    2dc8:	4b1d      	ldr	r3, [pc, #116]	; (2e40 <atcab_bin2hex_+0xc4>)
    2dca:	4798      	blx	r3
			hexlen += 2;
    2dcc:	3502      	adds	r5, #2
    2dce:	e002      	b.n	2dd6 <atcab_bin2hex_+0x5a>
		}
		if (addspace) {
    2dd0:	465b      	mov	r3, fp
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d015      	beq.n	2e02 <atcab_bin2hex_+0x86>
			sprintf(&asciihex[hexlen], "%02X ", *binary++);
    2dd6:	464b      	mov	r3, r9
    2dd8:	5d9a      	ldrb	r2, [r3, r6]
    2dda:	1978      	adds	r0, r7, r5
    2ddc:	4919      	ldr	r1, [pc, #100]	; (2e44 <atcab_bin2hex_+0xc8>)
    2dde:	4b1a      	ldr	r3, [pc, #104]	; (2e48 <atcab_bin2hex_+0xcc>)
    2de0:	4798      	blx	r3
			hexlen += 3;
    2de2:	3503      	adds	r5, #3
	for (i = 0; i < binLen; i++) {
    2de4:	3401      	adds	r4, #1
    2de6:	45a2      	cmp	sl, r4
    2de8:	d013      	beq.n	2e12 <atcab_bin2hex_+0x96>
		if (hexlen > *asciihexlen) break;
    2dea:	4643      	mov	r3, r8
    2dec:	681b      	ldr	r3, [r3, #0]
    2dee:	429d      	cmp	r5, r3
    2df0:	dc1b      	bgt.n	2e2a <atcab_bin2hex_+0xae>
		if ((i % 16 == 0 && i != 0) && addspace) {
    2df2:	0026      	movs	r6, r4
    2df4:	0723      	lsls	r3, r4, #28
    2df6:	d1eb      	bne.n	2dd0 <atcab_bin2hex_+0x54>
    2df8:	2c00      	cmp	r4, #0
    2dfa:	d0e9      	beq.n	2dd0 <atcab_bin2hex_+0x54>
    2dfc:	465b      	mov	r3, fp
    2dfe:	2b00      	cmp	r3, #0
    2e00:	d1df      	bne.n	2dc2 <atcab_bin2hex_+0x46>
		}else {
			sprintf(&asciihex[hexlen], "%02X", *binary++);
    2e02:	464b      	mov	r3, r9
    2e04:	5d9a      	ldrb	r2, [r3, r6]
    2e06:	1978      	adds	r0, r7, r5
    2e08:	4910      	ldr	r1, [pc, #64]	; (2e4c <atcab_bin2hex_+0xd0>)
    2e0a:	4b0f      	ldr	r3, [pc, #60]	; (2e48 <atcab_bin2hex_+0xcc>)
    2e0c:	4798      	blx	r3
			hexlen += 2;
    2e0e:	3502      	adds	r5, #2
    2e10:	e7e8      	b.n	2de4 <atcab_bin2hex_+0x68>
    2e12:	4646      	mov	r6, r8
		}
	}
	*asciihexlen = (int)strlen(asciihex);
    2e14:	0038      	movs	r0, r7
    2e16:	4b0e      	ldr	r3, [pc, #56]	; (2e50 <atcab_bin2hex_+0xd4>)
    2e18:	4798      	blx	r3
    2e1a:	6030      	str	r0, [r6, #0]

	return ATCA_SUCCESS;
    2e1c:	2000      	movs	r0, #0
}
    2e1e:	bc3c      	pop	{r2, r3, r4, r5}
    2e20:	4690      	mov	r8, r2
    2e22:	4699      	mov	r9, r3
    2e24:	46a2      	mov	sl, r4
    2e26:	46ab      	mov	fp, r5
    2e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e2a:	4646      	mov	r6, r8
    2e2c:	e7f2      	b.n	2e14 <atcab_bin2hex_+0x98>
		return ATCA_BAD_PARAM;
    2e2e:	20e2      	movs	r0, #226	; 0xe2
    2e30:	e7f5      	b.n	2e1e <atcab_bin2hex_+0xa2>
    2e32:	20e2      	movs	r0, #226	; 0xe2
    2e34:	e7f3      	b.n	2e1e <atcab_bin2hex_+0xa2>
    2e36:	46c0      	nop			; (mov r8, r8)
    2e38:	00006875 	.word	0x00006875
    2e3c:	00008bac 	.word	0x00008bac
    2e40:	0000683f 	.word	0x0000683f
    2e44:	00008bf4 	.word	0x00008bf4
    2e48:	00006c95 	.word	0x00006c95
    2e4c:	00008bfc 	.word	0x00008bfc
    2e50:	00006d85 	.word	0x00006d85

00002e54 <atcab_bin2hex>:
{
    2e54:	b510      	push	{r4, lr}
    2e56:	b082      	sub	sp, #8
	return atcab_bin2hex_(binary, binLen, asciihex, asciihexlen, true);
    2e58:	2401      	movs	r4, #1
    2e5a:	9400      	str	r4, [sp, #0]
    2e5c:	4c01      	ldr	r4, [pc, #4]	; (2e64 <atcab_bin2hex+0x10>)
    2e5e:	47a0      	blx	r4
}
    2e60:	b002      	add	sp, #8
    2e62:	bd10      	pop	{r4, pc}
    2e64:	00002d7d 	.word	0x00002d7d

00002e68 <atcac_sw_sha2_256_init>:
 * \param[in] ctx  ptr to context data structure
 * \return ATCA_STATUS value
 */

int atcac_sw_sha2_256_init(atcac_sha2_256_ctx* ctx)
{
    2e68:	b510      	push	{r4, lr}
	if (sizeof(sw_sha256_ctx) > sizeof(atcac_sha2_256_ctx))
		return ATCA_ASSERT_FAILURE; // atcac_sha1_ctx isn't large enough for this implementation
	sw_sha256_init((sw_sha256_ctx*)ctx);
    2e6a:	4b02      	ldr	r3, [pc, #8]	; (2e74 <atcac_sw_sha2_256_init+0xc>)
    2e6c:	4798      	blx	r3

	return ATCA_SUCCESS;
}
    2e6e:	2000      	movs	r0, #0
    2e70:	bd10      	pop	{r4, pc}
    2e72:	46c0      	nop			; (mov r8, r8)
    2e74:	00003045 	.word	0x00003045

00002e78 <atcac_sw_sha2_256_update>:
    \param[in] data_size  size amount of data to hash in the given block, in bytes
    \return ATCA_STATUS
 */

int atcac_sw_sha2_256_update(atcac_sha2_256_ctx* ctx, const uint8_t* data, size_t data_size)
{
    2e78:	b510      	push	{r4, lr}
	sw_sha256_update((sw_sha256_ctx*)ctx, data, (uint32_t)data_size);
    2e7a:	4b02      	ldr	r3, [pc, #8]	; (2e84 <atcac_sw_sha2_256_update+0xc>)
    2e7c:	4798      	blx	r3

	return ATCA_SUCCESS;
}
    2e7e:	2000      	movs	r0, #0
    2e80:	bd10      	pop	{r4, pc}
    2e82:	46c0      	nop			; (mov r8, r8)
    2e84:	000030a9 	.word	0x000030a9

00002e88 <atcac_sw_sha2_256_finish>:
 * \param[out] digest  receives the computed digest of the SHA 256 has
 * \return ATCA_STATUS
 */

int atcac_sw_sha2_256_finish(atcac_sha2_256_ctx* ctx, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
    2e88:	b510      	push	{r4, lr}
	sw_sha256_final((sw_sha256_ctx*)ctx, digest);
    2e8a:	4b02      	ldr	r3, [pc, #8]	; (2e94 <atcac_sw_sha2_256_finish+0xc>)
    2e8c:	4798      	blx	r3

	return ATCA_SUCCESS;
}
    2e8e:	2000      	movs	r0, #0
    2e90:	bd10      	pop	{r4, pc}
    2e92:	46c0      	nop			; (mov r8, r8)
    2e94:	00003135 	.word	0x00003135

00002e98 <sw_sha256_process>:
 * \param[in] ctx          SAH256 hash context
 * \param[in] blocks       Raw blocks to be processed
 * \param[in] block_count  Number of 64-byte blocks to process
 */
static void sw_sha256_process(sw_sha256_ctx* ctx, const uint8_t* blocks, uint32_t block_count)
{
    2e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e9a:	46de      	mov	lr, fp
    2e9c:	4657      	mov	r7, sl
    2e9e:	464e      	mov	r6, r9
    2ea0:	4645      	mov	r5, r8
    2ea2:	b5e0      	push	{r5, r6, r7, lr}
    2ea4:	b0d5      	sub	sp, #340	; 0x154
    2ea6:	900b      	str	r0, [sp, #44]	; 0x2c
		0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
		0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	};

	// Loop through all the blocks to process
	for (block = 0; block < block_count; block++) {
    2ea8:	2a00      	cmp	r2, #0
    2eaa:	d100      	bne.n	2eae <sw_sha256_process+0x16>
    2eac:	e0c0      	b.n	3030 <sw_sha256_process+0x198>
    2eae:	000b      	movs	r3, r1
    2eb0:	0192      	lsls	r2, r2, #6
    2eb2:	1889      	adds	r1, r1, r2
    2eb4:	910a      	str	r1, [sp, #40]	; 0x28
    2eb6:	0002      	movs	r2, r0
    2eb8:	32a8      	adds	r2, #168	; 0xa8
    2eba:	9209      	str	r2, [sp, #36]	; 0x24
			s1 = rotate_right(rotate_register[4], 6)
			     ^ rotate_right(rotate_register[4], 11)
			     ^ rotate_right(rotate_register[4], 25);
			ch = (rotate_register[4] & rotate_register[5])
			     ^ (~rotate_register[4] & rotate_register[6]);
			t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    2ebc:	4a60      	ldr	r2, [pc, #384]	; (3040 <sw_sha256_process+0x1a8>)
    2ebe:	4691      	mov	r9, r2
    2ec0:	e05c      	b.n	2f7c <sw_sha256_process+0xe4>

			rotate_register[7] = rotate_register[6];
			rotate_register[6] = rotate_register[5];
    2ec2:	9d02      	ldr	r5, [sp, #8]
    2ec4:	9501      	str	r5, [sp, #4]
			rotate_register[5] = rotate_register[4];
    2ec6:	9002      	str	r0, [sp, #8]
			rotate_register[4] = rotate_register[3] + t1;
    2ec8:	4658      	mov	r0, fp
			rotate_register[3] = rotate_register[2];
			rotate_register[2] = rotate_register[1];
    2eca:	46bc      	mov	ip, r7
			rotate_register[1] = rotate_register[0];
    2ecc:	0027      	movs	r7, r4
			rotate_register[0] = t1 + t2;
    2ece:	0014      	movs	r4, r2
			     ^ rotate_right(rotate_register[4], 11)
    2ed0:	0002      	movs	r2, r0
    2ed2:	250b      	movs	r5, #11
    2ed4:	41ea      	rors	r2, r5
    2ed6:	0005      	movs	r5, r0
    2ed8:	2606      	movs	r6, #6
    2eda:	41f5      	rors	r5, r6
    2edc:	4055      	eors	r5, r2
			     ^ rotate_right(rotate_register[4], 25);
    2ede:	0002      	movs	r2, r0
    2ee0:	3613      	adds	r6, #19
    2ee2:	41f2      	rors	r2, r6
			s1 = rotate_right(rotate_register[4], 6)
    2ee4:	4055      	eors	r5, r2
			t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    2ee6:	464a      	mov	r2, r9
    2ee8:	588a      	ldr	r2, [r1, r2]
    2eea:	9e04      	ldr	r6, [sp, #16]
    2eec:	598e      	ldr	r6, [r1, r6]
    2eee:	46b0      	mov	r8, r6
    2ef0:	4442      	add	r2, r8
    2ef2:	18ad      	adds	r5, r5, r2
			ch = (rotate_register[4] & rotate_register[5])
    2ef4:	9a02      	ldr	r2, [sp, #8]
    2ef6:	4002      	ands	r2, r0
    2ef8:	4690      	mov	r8, r2
    2efa:	9a01      	ldr	r2, [sp, #4]
    2efc:	4382      	bics	r2, r0
    2efe:	4646      	mov	r6, r8
    2f00:	4072      	eors	r2, r6
			t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    2f02:	18aa      	adds	r2, r5, r2
    2f04:	18d3      	adds	r3, r2, r3
			rotate_register[4] = rotate_register[3] + t1;
    2f06:	9d03      	ldr	r5, [sp, #12]
    2f08:	46ab      	mov	fp, r5
    2f0a:	449b      	add	fp, r3
			     ^ rotate_right(rotate_register[0], 13)
    2f0c:	0025      	movs	r5, r4
    2f0e:	260d      	movs	r6, #13
    2f10:	41f5      	rors	r5, r6
    2f12:	0022      	movs	r2, r4
    2f14:	3e0b      	subs	r6, #11
    2f16:	41f2      	rors	r2, r6
    2f18:	406a      	eors	r2, r5
			     ^ rotate_right(rotate_register[0], 22);
    2f1a:	0025      	movs	r5, r4
    2f1c:	4656      	mov	r6, sl
    2f1e:	41f5      	rors	r5, r6
			s0 = rotate_right(rotate_register[0], 2)
    2f20:	406a      	eors	r2, r5
			      ^ (rotate_register[0] & rotate_register[2])
    2f22:	4665      	mov	r5, ip
    2f24:	407d      	eors	r5, r7
    2f26:	4025      	ands	r5, r4
			      ^ (rotate_register[1] & rotate_register[2]);
    2f28:	4666      	mov	r6, ip
    2f2a:	403e      	ands	r6, r7
			maj = (rotate_register[0] & rotate_register[1])
    2f2c:	4075      	eors	r5, r6
			t2 = s0 + maj;
    2f2e:	1952      	adds	r2, r2, r5
			rotate_register[0] = t1 + t2;
    2f30:	18d2      	adds	r2, r2, r3
    2f32:	3104      	adds	r1, #4
			rotate_register[7] = rotate_register[6];
    2f34:	9b01      	ldr	r3, [sp, #4]
			rotate_register[3] = rotate_register[2];
    2f36:	4665      	mov	r5, ip
    2f38:	9503      	str	r5, [sp, #12]
		for (i = 0; i < SHA256_BLOCK_SIZE; i++) {
    2f3a:	2580      	movs	r5, #128	; 0x80
    2f3c:	006d      	lsls	r5, r5, #1
    2f3e:	42a9      	cmp	r1, r5
    2f40:	d1bf      	bne.n	2ec2 <sw_sha256_process+0x2a>
    2f42:	003d      	movs	r5, r7
    2f44:	4667      	mov	r7, ip
    2f46:	9b08      	ldr	r3, [sp, #32]
    2f48:	469c      	mov	ip, r3
    2f4a:	4659      	mov	r1, fp
    2f4c:	920c      	str	r2, [sp, #48]	; 0x30
    2f4e:	940d      	str	r4, [sp, #52]	; 0x34
    2f50:	950e      	str	r5, [sp, #56]	; 0x38
    2f52:	9110      	str	r1, [sp, #64]	; 0x40
    2f54:	9011      	str	r0, [sp, #68]	; 0x44
    2f56:	9b02      	ldr	r3, [sp, #8]
    2f58:	9312      	str	r3, [sp, #72]	; 0x48
    2f5a:	9b01      	ldr	r3, [sp, #4]
    2f5c:	9313      	str	r3, [sp, #76]	; 0x4c
    2f5e:	970f      	str	r7, [sp, #60]	; 0x3c
    2f60:	4663      	mov	r3, ip
    2f62:	9905      	ldr	r1, [sp, #20]
    2f64:	9807      	ldr	r0, [sp, #28]
		}

		// Add the hash of this block to current result.
		for (i = 0; i < 8; i++)
			ctx->hash[i] += rotate_register[i];
    2f66:	c904      	ldmia	r1!, {r2}
    2f68:	681c      	ldr	r4, [r3, #0]
    2f6a:	46a4      	mov	ip, r4
    2f6c:	4462      	add	r2, ip
    2f6e:	c304      	stmia	r3!, {r2}
		for (i = 0; i < 8; i++)
    2f70:	4283      	cmp	r3, r0
    2f72:	d1f8      	bne.n	2f66 <sw_sha256_process+0xce>
    2f74:	9b06      	ldr	r3, [sp, #24]
	for (block = 0; block < block_count; block++) {
    2f76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2f78:	429a      	cmp	r2, r3
    2f7a:	d059      	beq.n	3030 <sw_sha256_process+0x198>
    2f7c:	a814      	add	r0, sp, #80	; 0x50
    2f7e:	2240      	movs	r2, #64	; 0x40
    2f80:	4694      	mov	ip, r2
    2f82:	449c      	add	ip, r3
    2f84:	4662      	mov	r2, ip
    2f86:	4664      	mov	r4, ip
    2f88:	9206      	str	r2, [sp, #24]
{
    2f8a:	0002      	movs	r2, r0
			w_union.w_byte[i + 3] = cur_msg_block[i + 0];
    2f8c:	7819      	ldrb	r1, [r3, #0]
    2f8e:	70d1      	strb	r1, [r2, #3]
			w_union.w_byte[i + 2] = cur_msg_block[i + 1];
    2f90:	7859      	ldrb	r1, [r3, #1]
    2f92:	7091      	strb	r1, [r2, #2]
			w_union.w_byte[i + 1] = cur_msg_block[i + 2];
    2f94:	7899      	ldrb	r1, [r3, #2]
    2f96:	7051      	strb	r1, [r2, #1]
			w_union.w_byte[i + 0] = cur_msg_block[i + 3];
    2f98:	78d9      	ldrb	r1, [r3, #3]
    2f9a:	7011      	strb	r1, [r2, #0]
    2f9c:	3304      	adds	r3, #4
    2f9e:	3204      	adds	r2, #4
		for (i = 0; i < SHA256_BLOCK_SIZE; i += 4) {
    2fa0:	42a3      	cmp	r3, r4
    2fa2:	d1f3      	bne.n	2f8c <sw_sha256_process+0xf4>
			word_value = w_union.w_word[w_index - 15];
    2fa4:	6842      	ldr	r2, [r0, #4]
			word_value = w_union.w_word[w_index - 2];
    2fa6:	6b81      	ldr	r1, [r0, #56]	; 0x38
			s0 = rotate_right(word_value, 7) ^ rotate_right(word_value, 18) ^ (word_value >> 3);
    2fa8:	0013      	movs	r3, r2
    2faa:	2407      	movs	r4, #7
    2fac:	41e3      	rors	r3, r4
    2fae:	0014      	movs	r4, r2
    2fb0:	2512      	movs	r5, #18
    2fb2:	41ec      	rors	r4, r5
    2fb4:	4063      	eors	r3, r4
    2fb6:	08d2      	lsrs	r2, r2, #3
    2fb8:	4053      	eors	r3, r2
			w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
    2fba:	6802      	ldr	r2, [r0, #0]
    2fbc:	6a44      	ldr	r4, [r0, #36]	; 0x24
    2fbe:	46a4      	mov	ip, r4
    2fc0:	4462      	add	r2, ip
    2fc2:	189b      	adds	r3, r3, r2
			s1 = rotate_right(word_value, 17) ^ rotate_right(word_value, 19) ^ (word_value >> 10);
    2fc4:	000a      	movs	r2, r1
    2fc6:	2411      	movs	r4, #17
    2fc8:	41e2      	rors	r2, r4
    2fca:	000c      	movs	r4, r1
    2fcc:	3501      	adds	r5, #1
    2fce:	41ec      	rors	r4, r5
    2fd0:	4062      	eors	r2, r4
    2fd2:	0a89      	lsrs	r1, r1, #10
    2fd4:	404a      	eors	r2, r1
			w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
    2fd6:	189b      	adds	r3, r3, r2
    2fd8:	6403      	str	r3, [r0, #64]	; 0x40
    2fda:	3004      	adds	r0, #4
		while (w_index < SHA256_BLOCK_SIZE) {
    2fdc:	ab44      	add	r3, sp, #272	; 0x110
    2fde:	4298      	cmp	r0, r3
    2fe0:	d1e0      	bne.n	2fa4 <sw_sha256_process+0x10c>
    2fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2fe4:	2288      	movs	r2, #136	; 0x88
    2fe6:	4690      	mov	r8, r2
    2fe8:	4443      	add	r3, r8
    2fea:	469c      	mov	ip, r3
    2fec:	ab0c      	add	r3, sp, #48	; 0x30
    2fee:	9305      	str	r3, [sp, #20]
    2ff0:	4662      	mov	r2, ip
    2ff2:	9809      	ldr	r0, [sp, #36]	; 0x24
			rotate_register[i] = ctx->hash[i];
    2ff4:	ca02      	ldmia	r2!, {r1}
    2ff6:	c302      	stmia	r3!, {r1}
		for (i = 0; i < 8; i++)
    2ff8:	4282      	cmp	r2, r0
    2ffa:	d1fb      	bne.n	2ff4 <sw_sha256_process+0x15c>
    2ffc:	9207      	str	r2, [sp, #28]
    2ffe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3000:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3002:	9301      	str	r3, [sp, #4]
    3004:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3006:	9302      	str	r3, [sp, #8]
    3008:	9810      	ldr	r0, [sp, #64]	; 0x40
    300a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    300c:	4698      	mov	r8, r3
    300e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    3010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3012:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    3014:	2500      	movs	r5, #0
			t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    3016:	a914      	add	r1, sp, #80	; 0x50
    3018:	9104      	str	r1, [sp, #16]
			     ^ rotate_right(rotate_register[0], 22);
    301a:	2116      	movs	r1, #22
    301c:	468a      	mov	sl, r1
    301e:	4661      	mov	r1, ip
    3020:	9108      	str	r1, [sp, #32]
    3022:	46bc      	mov	ip, r7
    3024:	001f      	movs	r7, r3
    3026:	0013      	movs	r3, r2
    3028:	0029      	movs	r1, r5
    302a:	4642      	mov	r2, r8
    302c:	9203      	str	r2, [sp, #12]
    302e:	e74f      	b.n	2ed0 <sw_sha256_process+0x38>
	}
}
    3030:	b055      	add	sp, #340	; 0x154
    3032:	bc3c      	pop	{r2, r3, r4, r5}
    3034:	4690      	mov	r8, r2
    3036:	4699      	mov	r9, r3
    3038:	46a2      	mov	sl, r4
    303a:	46ab      	mov	fp, r5
    303c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    303e:	46c0      	nop			; (mov r8, r8)
    3040:	00008c04 	.word	0x00008c04

00003044 <sw_sha256_init>:

void sw_sha256_init(sw_sha256_ctx* ctx)
{
    3044:	b510      	push	{r4, lr}
    3046:	0004      	movs	r4, r0
		0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
		0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
	};
	int i;

	memset(ctx, 0, sizeof(*ctx));
    3048:	22a8      	movs	r2, #168	; 0xa8
    304a:	2100      	movs	r1, #0
    304c:	4b0d      	ldr	r3, [pc, #52]	; (3084 <sw_sha256_init+0x40>)
    304e:	4798      	blx	r3
	for (i = 0; i < 8; i++)
		ctx->hash[i] = hash_init[i];
    3050:	4a0d      	ldr	r2, [pc, #52]	; (3088 <sw_sha256_init+0x44>)
    3052:	2388      	movs	r3, #136	; 0x88
    3054:	50e2      	str	r2, [r4, r3]
    3056:	4a0d      	ldr	r2, [pc, #52]	; (308c <sw_sha256_init+0x48>)
    3058:	3304      	adds	r3, #4
    305a:	50e2      	str	r2, [r4, r3]
    305c:	4a0c      	ldr	r2, [pc, #48]	; (3090 <sw_sha256_init+0x4c>)
    305e:	3304      	adds	r3, #4
    3060:	50e2      	str	r2, [r4, r3]
    3062:	4a0c      	ldr	r2, [pc, #48]	; (3094 <sw_sha256_init+0x50>)
    3064:	3304      	adds	r3, #4
    3066:	50e2      	str	r2, [r4, r3]
    3068:	4a0b      	ldr	r2, [pc, #44]	; (3098 <sw_sha256_init+0x54>)
    306a:	3304      	adds	r3, #4
    306c:	50e2      	str	r2, [r4, r3]
    306e:	4a0b      	ldr	r2, [pc, #44]	; (309c <sw_sha256_init+0x58>)
    3070:	3304      	adds	r3, #4
    3072:	50e2      	str	r2, [r4, r3]
    3074:	4a0a      	ldr	r2, [pc, #40]	; (30a0 <sw_sha256_init+0x5c>)
    3076:	3304      	adds	r3, #4
    3078:	50e2      	str	r2, [r4, r3]
    307a:	4a0a      	ldr	r2, [pc, #40]	; (30a4 <sw_sha256_init+0x60>)
    307c:	3304      	adds	r3, #4
    307e:	50e2      	str	r2, [r4, r3]
}
    3080:	bd10      	pop	{r4, pc}
    3082:	46c0      	nop			; (mov r8, r8)
    3084:	00006875 	.word	0x00006875
    3088:	6a09e667 	.word	0x6a09e667
    308c:	bb67ae85 	.word	0xbb67ae85
    3090:	3c6ef372 	.word	0x3c6ef372
    3094:	a54ff53a 	.word	0xa54ff53a
    3098:	510e527f 	.word	0x510e527f
    309c:	9b05688c 	.word	0x9b05688c
    30a0:	1f83d9ab 	.word	0x1f83d9ab
    30a4:	5be0cd19 	.word	0x5be0cd19

000030a8 <sw_sha256_update>:

void sw_sha256_update(sw_sha256_ctx* ctx, const uint8_t* msg, uint32_t msg_size)
{
    30a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    30aa:	46d6      	mov	lr, sl
    30ac:	464f      	mov	r7, r9
    30ae:	b580      	push	{r7, lr}
    30b0:	b083      	sub	sp, #12
    30b2:	0006      	movs	r6, r0
    30b4:	000d      	movs	r5, r1
    30b6:	0014      	movs	r4, r2
	uint32_t block_count;
	uint32_t rem_size = SHA256_BLOCK_SIZE - ctx->block_size;
    30b8:	6840      	ldr	r0, [r0, #4]
    30ba:	2740      	movs	r7, #64	; 0x40
    30bc:	1a3f      	subs	r7, r7, r0
	uint32_t copy_size = msg_size > rem_size ? rem_size : msg_size;
    30be:	4297      	cmp	r7, r2
    30c0:	d900      	bls.n	30c4 <sw_sha256_update+0x1c>
    30c2:	0017      	movs	r7, r2

	// Copy data into current block
	memcpy(&ctx->block[ctx->block_size], msg, copy_size);
    30c4:	3008      	adds	r0, #8
    30c6:	1830      	adds	r0, r6, r0
    30c8:	003a      	movs	r2, r7
    30ca:	0029      	movs	r1, r5
    30cc:	4b17      	ldr	r3, [pc, #92]	; (312c <sw_sha256_update+0x84>)
    30ce:	4798      	blx	r3

	if (ctx->block_size + msg_size < SHA256_BLOCK_SIZE) {
    30d0:	6873      	ldr	r3, [r6, #4]
    30d2:	18e3      	adds	r3, r4, r3
    30d4:	2b3f      	cmp	r3, #63	; 0x3f
    30d6:	d805      	bhi.n	30e4 <sw_sha256_update+0x3c>
		// Not enough data to finish off the current block
		ctx->block_size += msg_size;
    30d8:	6073      	str	r3, [r6, #4]

	// Save any remaining data
	ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
	ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
	memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
}
    30da:	b003      	add	sp, #12
    30dc:	bc0c      	pop	{r2, r3}
    30de:	4691      	mov	r9, r2
    30e0:	469a      	mov	sl, r3
    30e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sw_sha256_process(ctx, ctx->block, 1);
    30e4:	2308      	movs	r3, #8
    30e6:	469c      	mov	ip, r3
    30e8:	44b4      	add	ip, r6
    30ea:	4663      	mov	r3, ip
    30ec:	2201      	movs	r2, #1
    30ee:	9301      	str	r3, [sp, #4]
    30f0:	4661      	mov	r1, ip
    30f2:	0030      	movs	r0, r6
    30f4:	4b0e      	ldr	r3, [pc, #56]	; (3130 <sw_sha256_update+0x88>)
    30f6:	469a      	mov	sl, r3
    30f8:	4798      	blx	r3
	msg_size -= copy_size; // Adjust to the remaining message bytes
    30fa:	1be4      	subs	r4, r4, r7
	block_count = msg_size / SHA256_BLOCK_SIZE;
    30fc:	09a2      	lsrs	r2, r4, #6
    30fe:	4691      	mov	r9, r2
	sw_sha256_process(ctx, &msg[copy_size], block_count);
    3100:	19e9      	adds	r1, r5, r7
    3102:	0030      	movs	r0, r6
    3104:	47d0      	blx	sl
	ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    3106:	464a      	mov	r2, r9
    3108:	1c53      	adds	r3, r2, #1
    310a:	019b      	lsls	r3, r3, #6
    310c:	6832      	ldr	r2, [r6, #0]
    310e:	4694      	mov	ip, r2
    3110:	4463      	add	r3, ip
    3112:	6033      	str	r3, [r6, #0]
	ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    3114:	233f      	movs	r3, #63	; 0x3f
    3116:	001a      	movs	r2, r3
    3118:	4022      	ands	r2, r4
    311a:	6072      	str	r2, [r6, #4]
	memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
    311c:	0021      	movs	r1, r4
    311e:	4399      	bics	r1, r3
    3120:	19c9      	adds	r1, r1, r7
    3122:	1869      	adds	r1, r5, r1
    3124:	9801      	ldr	r0, [sp, #4]
    3126:	4b01      	ldr	r3, [pc, #4]	; (312c <sw_sha256_update+0x84>)
    3128:	4798      	blx	r3
    312a:	e7d6      	b.n	30da <sw_sha256_update+0x32>
    312c:	0000683f 	.word	0x0000683f
    3130:	00002e99 	.word	0x00002e99

00003134 <sw_sha256_final>:

void sw_sha256_final(sw_sha256_ctx* ctx, uint8_t digest[SHA256_DIGEST_SIZE])
{
    3134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3136:	0005      	movs	r5, r0
    3138:	000c      	movs	r4, r1
	int i, j;
	uint32_t msg_size_bits;
	uint32_t pad_zero_count;

	// Calculate the total message size in bits
	ctx->total_msg_size += ctx->block_size;
    313a:	6840      	ldr	r0, [r0, #4]
    313c:	682b      	ldr	r3, [r5, #0]
    313e:	18c7      	adds	r7, r0, r3
    3140:	602f      	str	r7, [r5, #0]
	msg_size_bits = ctx->total_msg_size * 8;
    3142:	00ff      	lsls	r7, r7, #3

	// Calculate the number of padding zero bytes required between the 1 bit byte and the 64 bit message size in bits.
	pad_zero_count = (SHA256_BLOCK_SIZE - ((ctx->block_size + 9) % SHA256_BLOCK_SIZE)) % SHA256_BLOCK_SIZE;
    3144:	2309      	movs	r3, #9
    3146:	425b      	negs	r3, r3
    3148:	1a1b      	subs	r3, r3, r0
    314a:	263f      	movs	r6, #63	; 0x3f
    314c:	401e      	ands	r6, r3

	// Append a single 1 bit
	ctx->block[ctx->block_size++] = 0x80;
    314e:	1c43      	adds	r3, r0, #1
    3150:	606b      	str	r3, [r5, #4]
    3152:	182b      	adds	r3, r5, r0
    3154:	2280      	movs	r2, #128	; 0x80
    3156:	721a      	strb	r2, [r3, #8]

	// Add padding zeros plus upper 4 bytes of total msg size in bits (only supporting 32bit message bit counts)
	memset(&ctx->block[ctx->block_size], 0, pad_zero_count + 4);
    3158:	1d32      	adds	r2, r6, #4
    315a:	3009      	adds	r0, #9
    315c:	1828      	adds	r0, r5, r0
    315e:	2100      	movs	r1, #0
    3160:	4b13      	ldr	r3, [pc, #76]	; (31b0 <sw_sha256_final+0x7c>)
    3162:	4798      	blx	r3
	ctx->block_size += pad_zero_count + 4;
    3164:	686b      	ldr	r3, [r5, #4]
    3166:	469c      	mov	ip, r3
    3168:	4466      	add	r6, ip

	// Add the total message size in bits to the end of the current block. Technically this is
	// supposed to be 8 bytes. This shortcut will reduce the max message size to 536,870,911 bytes.
	ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 24);
    316a:	19ab      	adds	r3, r5, r6
    316c:	0e3a      	lsrs	r2, r7, #24
    316e:	731a      	strb	r2, [r3, #12]
	ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 16);
    3170:	0c3a      	lsrs	r2, r7, #16
    3172:	735a      	strb	r2, [r3, #13]
	ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 8);
    3174:	0a3a      	lsrs	r2, r7, #8
    3176:	739a      	strb	r2, [r3, #14]
	ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 0);
    3178:	0032      	movs	r2, r6
    317a:	3208      	adds	r2, #8
    317c:	606a      	str	r2, [r5, #4]
    317e:	73df      	strb	r7, [r3, #15]

	sw_sha256_process(ctx, ctx->block, ctx->block_size / SHA256_BLOCK_SIZE);
    3180:	0992      	lsrs	r2, r2, #6
    3182:	0029      	movs	r1, r5
    3184:	3108      	adds	r1, #8
    3186:	0028      	movs	r0, r5
    3188:	4b0a      	ldr	r3, [pc, #40]	; (31b4 <sw_sha256_final+0x80>)
    318a:	4798      	blx	r3
    318c:	0028      	movs	r0, r5
    318e:	3088      	adds	r0, #136	; 0x88
    3190:	35a8      	adds	r5, #168	; 0xa8
    3192:	e003      	b.n	319c <sw_sha256_final+0x68>
    3194:	3004      	adds	r0, #4
    3196:	3404      	adds	r4, #4

	// All blocks have been processed.
	// Concatenate the hashes to produce digest, MSB of every hash first.
	for (i = 0; i < 8; i++)
    3198:	42a8      	cmp	r0, r5
    319a:	d008      	beq.n	31ae <sw_sha256_final+0x7a>
{
    319c:	2303      	movs	r3, #3
		for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
			digest[i * sizeof(int32_t) + j] = ctx->hash[i] & 0xFF;
    319e:	7802      	ldrb	r2, [r0, #0]
    31a0:	54e2      	strb	r2, [r4, r3]
		for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
    31a2:	6802      	ldr	r2, [r0, #0]
    31a4:	0a12      	lsrs	r2, r2, #8
    31a6:	6002      	str	r2, [r0, #0]
    31a8:	3b01      	subs	r3, #1
    31aa:	d2f8      	bcs.n	319e <sw_sha256_final+0x6a>
    31ac:	e7f2      	b.n	3194 <sw_sha256_final+0x60>
}
    31ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31b0:	00006875 	.word	0x00006875
    31b4:	00002e99 	.word	0x00002e99

000031b8 <hal_iface_init>:
	// The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
	// object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
	// (in terms of memory) for interfaces you don't use in your application.
	ATCA_STATUS status = ATCA_COMM_FAIL;

	switch (cfg->iface_type) {
    31b8:	7803      	ldrb	r3, [r0, #0]
	ATCA_STATUS status = ATCA_COMM_FAIL;
    31ba:	20f0      	movs	r0, #240	; 0xf0
	switch (cfg->iface_type) {
    31bc:	2b00      	cmp	r3, #0
    31be:	d000      	beq.n	31c2 <hal_iface_init+0xa>
		status = ATCA_SUCCESS;
		#endif
		break;
	}
	return status;
}
    31c0:	4770      	bx	lr
		hal->halinit = &hal_i2c_init;
    31c2:	4b0a      	ldr	r3, [pc, #40]	; (31ec <hal_iface_init+0x34>)
    31c4:	600b      	str	r3, [r1, #0]
		hal->halpostinit = &hal_i2c_post_init;
    31c6:	4b0a      	ldr	r3, [pc, #40]	; (31f0 <hal_iface_init+0x38>)
    31c8:	604b      	str	r3, [r1, #4]
		hal->halreceive = &hal_i2c_receive;
    31ca:	4b0a      	ldr	r3, [pc, #40]	; (31f4 <hal_iface_init+0x3c>)
    31cc:	60cb      	str	r3, [r1, #12]
		hal->halsend = &hal_i2c_send;
    31ce:	4b0a      	ldr	r3, [pc, #40]	; (31f8 <hal_iface_init+0x40>)
    31d0:	608b      	str	r3, [r1, #8]
		hal->halsleep = &hal_i2c_sleep;
    31d2:	4b0a      	ldr	r3, [pc, #40]	; (31fc <hal_iface_init+0x44>)
    31d4:	618b      	str	r3, [r1, #24]
		hal->halwake = &hal_i2c_wake;
    31d6:	4b0a      	ldr	r3, [pc, #40]	; (3200 <hal_iface_init+0x48>)
    31d8:	610b      	str	r3, [r1, #16]
		hal->halidle = &hal_i2c_idle;
    31da:	4b0a      	ldr	r3, [pc, #40]	; (3204 <hal_iface_init+0x4c>)
    31dc:	614b      	str	r3, [r1, #20]
		hal->halrelease = &hal_i2c_release;
    31de:	4b0a      	ldr	r3, [pc, #40]	; (3208 <hal_iface_init+0x50>)
    31e0:	61cb      	str	r3, [r1, #28]
		hal->hal_data = NULL;
    31e2:	2300      	movs	r3, #0
    31e4:	620b      	str	r3, [r1, #32]
		status = ATCA_SUCCESS;
    31e6:	2000      	movs	r0, #0
		break;
    31e8:	e7ea      	b.n	31c0 <hal_iface_init+0x8>
    31ea:	46c0      	nop			; (mov r8, r8)
    31ec:	00003231 	.word	0x00003231
    31f0:	000033b1 	.word	0x000033b1
    31f4:	00003405 	.word	0x00003405
    31f8:	000033b5 	.word	0x000033b5
    31fc:	000036d9 	.word	0x000036d9
    3200:	00003591 	.word	0x00003591
    3204:	00003689 	.word	0x00003689
    3208:	00003729 	.word	0x00003729

0000320c <hal_iface_release>:
 * \param[in] ifacetype - the type of physical interface to release
 * \param[in] hal_data - pointer to opaque hal data maintained by HAL implementation for this interface type
 */

ATCA_STATUS hal_iface_release( ATCAIfaceType ifacetype, void *hal_data )
{
    320c:	b510      	push	{r4, lr}
	ATCA_STATUS status = ATCA_GEN_FAIL;

	switch (ifacetype) {
    320e:	2800      	cmp	r0, #0
    3210:	d001      	beq.n	3216 <hal_iface_release+0xa>
	ATCA_STATUS status = ATCA_GEN_FAIL;
    3212:	20e1      	movs	r0, #225	; 0xe1
#endif
		break;
	}

	return status;
}
    3214:	bd10      	pop	{r4, pc}
		status = hal_i2c_release(hal_data);
    3216:	0008      	movs	r0, r1
    3218:	4b01      	ldr	r3, [pc, #4]	; (3220 <hal_iface_release+0x14>)
    321a:	4798      	blx	r3
		break;
    321c:	e7fa      	b.n	3214 <hal_iface_release+0x8>
    321e:	46c0      	nop			; (mov r8, r8)
    3220:	00003729 	.word	0x00003729

00003224 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3224:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3226:	2207      	movs	r2, #7
    3228:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    322a:	421a      	tst	r2, r3
    322c:	d1fc      	bne.n	3228 <_i2c_master_wait_for_sync+0x4>
}
    322e:	4770      	bx	lr

00003230 <hal_i2c_init>:
/** \brief initialize an I2C interface using given config
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg)
{
    3230:	b5f0      	push	{r4, r5, r6, r7, lr}
    3232:	46c6      	mov	lr, r8
    3234:	b500      	push	{lr}
    3236:	0005      	movs	r5, r0
    3238:	000e      	movs	r6, r1
	int bus = cfg->atcai2c.bus;   // 0-based logical bus number
    323a:	794c      	ldrb	r4, [r1, #5]
	ATCAHAL_t *phal = (ATCAHAL_t*)hal;

	if ( i2c_bus_ref_ct == 0 )     // power up state, no i2c buses will have been used
    323c:	4b4b      	ldr	r3, [pc, #300]	; (336c <hal_i2c_init+0x13c>)
    323e:	681b      	ldr	r3, [r3, #0]
    3240:	2b00      	cmp	r3, #0
    3242:	d107      	bne.n	3254 <hal_i2c_init+0x24>
		for ( int i = 0; i < MAX_I2C_BUSES; i++ )
			i2c_hal_data[i] = NULL;
    3244:	4a4a      	ldr	r2, [pc, #296]	; (3370 <hal_i2c_init+0x140>)
    3246:	2100      	movs	r1, #0
    3248:	6011      	str	r1, [r2, #0]
    324a:	6051      	str	r1, [r2, #4]
    324c:	6091      	str	r1, [r2, #8]
    324e:	60d1      	str	r1, [r2, #12]
    3250:	6111      	str	r1, [r2, #16]
    3252:	6151      	str	r1, [r2, #20]

	i2c_bus_ref_ct++;  // total across buses
    3254:	3301      	adds	r3, #1
    3256:	4a45      	ldr	r2, [pc, #276]	; (336c <hal_i2c_init+0x13c>)
    3258:	6013      	str	r3, [r2, #0]
		phal->hal_data = i2c_hal_data[bus];

		return ATCA_SUCCESS;
	}

	return ATCA_COMM_FAIL;
    325a:	20f0      	movs	r0, #240	; 0xf0
	if ( bus >= 0 && bus < MAX_I2C_BUSES ) {
    325c:	2c05      	cmp	r4, #5
    325e:	d902      	bls.n	3266 <hal_i2c_init+0x36>
}
    3260:	bc04      	pop	{r2}
    3262:	4690      	mov	r8, r2
    3264:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( i2c_hal_data[bus] == NULL ) {
    3266:	00a3      	lsls	r3, r4, #2
    3268:	4a41      	ldr	r2, [pc, #260]	; (3370 <hal_i2c_init+0x140>)
    326a:	589b      	ldr	r3, [r3, r2]
    326c:	2b00      	cmp	r3, #0
    326e:	d008      	beq.n	3282 <hal_i2c_init+0x52>
			i2c_hal_data[bus]->ref_ct++;
    3270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3272:	3201      	adds	r2, #1
    3274:	629a      	str	r2, [r3, #40]	; 0x28
		phal->hal_data = i2c_hal_data[bus];
    3276:	00a4      	lsls	r4, r4, #2
    3278:	4b3d      	ldr	r3, [pc, #244]	; (3370 <hal_i2c_init+0x140>)
    327a:	58e3      	ldr	r3, [r4, r3]
    327c:	622b      	str	r3, [r5, #32]
		return ATCA_SUCCESS;
    327e:	2000      	movs	r0, #0
    3280:	e7ee      	b.n	3260 <hal_i2c_init+0x30>
			i2c_hal_data[bus] = malloc( sizeof(ATCAI2CMaster_t) );
    3282:	38c0      	subs	r0, #192	; 0xc0
    3284:	4b3b      	ldr	r3, [pc, #236]	; (3374 <hal_i2c_init+0x144>)
    3286:	4798      	blx	r3
    3288:	4680      	mov	r8, r0
    328a:	00a3      	lsls	r3, r4, #2
    328c:	4a38      	ldr	r2, [pc, #224]	; (3370 <hal_i2c_init+0x140>)
    328e:	5098      	str	r0, [r3, r2]
			i2c_hal_data[bus]->ref_ct = 1;  // buses are shared, this is the first instance
    3290:	2301      	movs	r3, #1
    3292:	6283      	str	r3, [r0, #40]	; 0x28
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    3294:	4f38      	ldr	r7, [pc, #224]	; (3378 <hal_i2c_init+0x148>)
    3296:	4b39      	ldr	r3, [pc, #228]	; (337c <hal_i2c_init+0x14c>)
    3298:	607b      	str	r3, [r7, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    329a:	2300      	movs	r3, #0
    329c:	60bb      	str	r3, [r7, #8]
	config->generator_source = GCLK_GENERATOR_0;
    329e:	733b      	strb	r3, [r7, #12]
	config->run_in_standby   = false;
    32a0:	763b      	strb	r3, [r7, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    32a2:	2280      	movs	r2, #128	; 0x80
    32a4:	0392      	lsls	r2, r2, #14
    32a6:	613a      	str	r2, [r7, #16]
	config->buffer_timeout   = 65535;
    32a8:	2201      	movs	r2, #1
    32aa:	4252      	negs	r2, r2
    32ac:	82fa      	strh	r2, [r7, #22]
	config->unknown_bus_state_timeout = 65535;
    32ae:	82ba      	strh	r2, [r7, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    32b0:	61fb      	str	r3, [r7, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    32b2:	623b      	str	r3, [r7, #32]
	config->scl_low_timeout  = false;
    32b4:	3225      	adds	r2, #37	; 0x25
    32b6:	54bb      	strb	r3, [r7, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    32b8:	62bb      	str	r3, [r7, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    32ba:	3208      	adds	r2, #8
    32bc:	54bb      	strb	r3, [r7, r2]
	config->slave_scl_low_extend_timeout   = false;
    32be:	3201      	adds	r2, #1
    32c0:	54bb      	strb	r3, [r7, r2]
	config->master_scl_low_extend_timeout  = false;
    32c2:	3201      	adds	r2, #1
    32c4:	54bb      	strb	r3, [r7, r2]
	config->sda_scl_rise_time_ns = 215;
    32c6:	33d7      	adds	r3, #215	; 0xd7
    32c8:	863b      	strh	r3, [r7, #48]	; 0x30
			config_i2c_master.baud_rate = cfg->atcai2c.baud / 1000;
    32ca:	68b0      	ldr	r0, [r6, #8]
    32cc:	21fa      	movs	r1, #250	; 0xfa
    32ce:	0089      	lsls	r1, r1, #2
    32d0:	4b2b      	ldr	r3, [pc, #172]	; (3380 <hal_i2c_init+0x150>)
    32d2:	4798      	blx	r3
    32d4:	6038      	str	r0, [r7, #0]
			switch (bus) {
    32d6:	2c05      	cmp	r4, #5
    32d8:	d808      	bhi.n	32ec <hal_i2c_init+0xbc>
    32da:	00a3      	lsls	r3, r4, #2
    32dc:	4a29      	ldr	r2, [pc, #164]	; (3384 <hal_i2c_init+0x154>)
    32de:	58d3      	ldr	r3, [r2, r3]
    32e0:	469f      	mov	pc, r3
			case 0: i2c_master_init( &(i2c_hal_data[bus]->i2c_master_instance), SERCOM0, &config_i2c_master); break;
    32e2:	4a25      	ldr	r2, [pc, #148]	; (3378 <hal_i2c_init+0x148>)
    32e4:	4928      	ldr	r1, [pc, #160]	; (3388 <hal_i2c_init+0x158>)
    32e6:	4640      	mov	r0, r8
    32e8:	4b28      	ldr	r3, [pc, #160]	; (338c <hal_i2c_init+0x15c>)
    32ea:	4798      	blx	r3
			i2c_hal_data[bus]->bus_index = bus;
    32ec:	00a3      	lsls	r3, r4, #2
    32ee:	4a20      	ldr	r2, [pc, #128]	; (3370 <hal_i2c_init+0x140>)
    32f0:	589e      	ldr	r6, [r3, r2]
    32f2:	62f4      	str	r4, [r6, #44]	; 0x2c
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    32f4:	6837      	ldr	r7, [r6, #0]
	_i2c_master_wait_for_sync(module);
    32f6:	0030      	movs	r0, r6
    32f8:	4b25      	ldr	r3, [pc, #148]	; (3390 <hal_i2c_init+0x160>)
    32fa:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    32fc:	683b      	ldr	r3, [r7, #0]
    32fe:	2202      	movs	r2, #2
    3300:	4313      	orrs	r3, r2
    3302:	603b      	str	r3, [r7, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3304:	6830      	ldr	r0, [r6, #0]
    3306:	4b23      	ldr	r3, [pc, #140]	; (3394 <hal_i2c_init+0x164>)
    3308:	4798      	blx	r3
    330a:	231f      	movs	r3, #31
    330c:	4018      	ands	r0, r3
    330e:	3b1e      	subs	r3, #30
    3310:	4083      	lsls	r3, r0
    3312:	4a21      	ldr	r2, [pc, #132]	; (3398 <hal_i2c_init+0x168>)
    3314:	6013      	str	r3, [r2, #0]
	uint32_t timeout_counter = 0;
    3316:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    3318:	2110      	movs	r1, #16
    331a:	8b7a      	ldrh	r2, [r7, #26]
    331c:	420a      	tst	r2, r1
    331e:	d1aa      	bne.n	3276 <hal_i2c_init+0x46>
		timeout_counter++;
    3320:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    3322:	88f2      	ldrh	r2, [r6, #6]
    3324:	4293      	cmp	r3, r2
    3326:	d3f8      	bcc.n	331a <hal_i2c_init+0xea>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    3328:	2310      	movs	r3, #16
    332a:	837b      	strh	r3, [r7, #26]
    332c:	e7a3      	b.n	3276 <hal_i2c_init+0x46>
			case 1: i2c_master_init( &(i2c_hal_data[bus]->i2c_master_instance), SERCOM1, &config_i2c_master); break;
    332e:	4a12      	ldr	r2, [pc, #72]	; (3378 <hal_i2c_init+0x148>)
    3330:	491a      	ldr	r1, [pc, #104]	; (339c <hal_i2c_init+0x16c>)
    3332:	4640      	mov	r0, r8
    3334:	4b15      	ldr	r3, [pc, #84]	; (338c <hal_i2c_init+0x15c>)
    3336:	4798      	blx	r3
    3338:	e7d8      	b.n	32ec <hal_i2c_init+0xbc>
			case 2: i2c_master_init( &(i2c_hal_data[bus]->i2c_master_instance), SERCOM2, &config_i2c_master); break;
    333a:	4a0f      	ldr	r2, [pc, #60]	; (3378 <hal_i2c_init+0x148>)
    333c:	4918      	ldr	r1, [pc, #96]	; (33a0 <hal_i2c_init+0x170>)
    333e:	4640      	mov	r0, r8
    3340:	4b12      	ldr	r3, [pc, #72]	; (338c <hal_i2c_init+0x15c>)
    3342:	4798      	blx	r3
    3344:	e7d2      	b.n	32ec <hal_i2c_init+0xbc>
			case 3: i2c_master_init( &(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
    3346:	4a0c      	ldr	r2, [pc, #48]	; (3378 <hal_i2c_init+0x148>)
    3348:	4916      	ldr	r1, [pc, #88]	; (33a4 <hal_i2c_init+0x174>)
    334a:	4640      	mov	r0, r8
    334c:	4b0f      	ldr	r3, [pc, #60]	; (338c <hal_i2c_init+0x15c>)
    334e:	4798      	blx	r3
    3350:	e7cc      	b.n	32ec <hal_i2c_init+0xbc>
			case 4: i2c_master_init( &(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
    3352:	4a09      	ldr	r2, [pc, #36]	; (3378 <hal_i2c_init+0x148>)
    3354:	4914      	ldr	r1, [pc, #80]	; (33a8 <hal_i2c_init+0x178>)
    3356:	4640      	mov	r0, r8
    3358:	4b0c      	ldr	r3, [pc, #48]	; (338c <hal_i2c_init+0x15c>)
    335a:	4798      	blx	r3
    335c:	e7c6      	b.n	32ec <hal_i2c_init+0xbc>
			case 5: i2c_master_init( &(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
    335e:	4a06      	ldr	r2, [pc, #24]	; (3378 <hal_i2c_init+0x148>)
    3360:	4912      	ldr	r1, [pc, #72]	; (33ac <hal_i2c_init+0x17c>)
    3362:	4640      	mov	r0, r8
    3364:	4b09      	ldr	r3, [pc, #36]	; (338c <hal_i2c_init+0x15c>)
    3366:	4798      	blx	r3
    3368:	e7c0      	b.n	32ec <hal_i2c_init+0xbc>
    336a:	46c0      	nop			; (mov r8, r8)
    336c:	20000a14 	.word	0x20000a14
    3370:	20000ce4 	.word	0x20000ce4
    3374:	000067f9 	.word	0x000067f9
    3378:	200009e0 	.word	0x200009e0
    337c:	00000d48 	.word	0x00000d48
    3380:	00004d7d 	.word	0x00004d7d
    3384:	00008d04 	.word	0x00008d04
    3388:	42000800 	.word	0x42000800
    338c:	00000121 	.word	0x00000121
    3390:	00003225 	.word	0x00003225
    3394:	00003e05 	.word	0x00003e05
    3398:	e000e100 	.word	0xe000e100
    339c:	42000c00 	.word	0x42000c00
    33a0:	42001000 	.word	0x42001000
    33a4:	42001400 	.word	0x42001400
    33a8:	42001800 	.word	0x42001800
    33ac:	42001c00 	.word	0x42001c00

000033b0 <hal_i2c_post_init>:
 * \return ATCA_STATUS
 */
ATCA_STATUS hal_i2c_post_init(ATCAIface iface)
{
	return ATCA_SUCCESS;
}
    33b0:	2000      	movs	r0, #0
    33b2:	4770      	bx	lr

000033b4 <hal_i2c_send>:
 * \param[in] txlength  number of bytes to send
 * \return ATCA_STATUS
 */

ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
    33b4:	b530      	push	{r4, r5, lr}
    33b6:	b085      	sub	sp, #20
    33b8:	000d      	movs	r5, r1
    33ba:	0014      	movs	r4, r2
	ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    33bc:	4b0e      	ldr	r3, [pc, #56]	; (33f8 <hal_i2c_send+0x44>)
    33be:	4798      	blx	r3
	int bus = cfg->atcai2c.bus;
    33c0:	7943      	ldrb	r3, [r0, #5]

	struct i2c_master_packet packet = {
    33c2:	a901      	add	r1, sp, #4
    33c4:	7902      	ldrb	r2, [r0, #4]
    33c6:	0852      	lsrs	r2, r2, #1
    33c8:	800a      	strh	r2, [r1, #0]
    33ca:	604d      	str	r5, [r1, #4]
    33cc:	2200      	movs	r2, #0
    33ce:	720a      	strb	r2, [r1, #8]
    33d0:	724a      	strb	r2, [r1, #9]
    33d2:	728a      	strb	r2, [r1, #10]
	// for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format

	// other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and wire it up instead of this one
	// this covers devices such as ATSHA204A and ATECCx08A that require a word address value pre-pended to the packet
	// txdata[0] is using _reserved byte of the ATCAPacket
	txdata[0] = 0x03;   // insert the Word Address Value, Command token
    33d4:	3203      	adds	r2, #3
    33d6:	702a      	strb	r2, [r5, #0]
	txlength++;         // account for word address value byte.
    33d8:	3401      	adds	r4, #1
	packet.data_length = txlength;
    33da:	804c      	strh	r4, [r1, #2]

	//	statusCode = i2c_master_write_packet_wait(&i2c_master_instance, &packet);
	//if ( i2c_master_write_packet_wait_no_stop( &(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
	if ( i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK )
    33dc:	009b      	lsls	r3, r3, #2
    33de:	4a07      	ldr	r2, [pc, #28]	; (33fc <hal_i2c_send+0x48>)
    33e0:	5898      	ldr	r0, [r3, r2]
    33e2:	4b07      	ldr	r3, [pc, #28]	; (3400 <hal_i2c_send+0x4c>)
    33e4:	4798      	blx	r3
    33e6:	0003      	movs	r3, r0
		return ATCA_COMM_FAIL;
    33e8:	20f0      	movs	r0, #240	; 0xf0

	return ATCA_SUCCESS;
    33ea:	1e5a      	subs	r2, r3, #1
    33ec:	4193      	sbcs	r3, r2
    33ee:	425b      	negs	r3, r3
    33f0:	4018      	ands	r0, r3
}
    33f2:	b005      	add	sp, #20
    33f4:	bd30      	pop	{r4, r5, pc}
    33f6:	46c0      	nop			; (mov r8, r8)
    33f8:	00001de9 	.word	0x00001de9
    33fc:	20000ce4 	.word	0x20000ce4
    3400:	000007a5 	.word	0x000007a5

00003404 <hal_i2c_receive>:
 * \param[in] rxlength  ptr to expected number of receive bytes to request
 * \return ATCA_STATUS
 */

ATCA_STATUS hal_i2c_receive( ATCAIface iface, uint8_t *rxdata, uint16_t *rxlength)
{
    3404:	b5f0      	push	{r4, r5, r6, r7, lr}
    3406:	b085      	sub	sp, #20
    3408:	000c      	movs	r4, r1
    340a:	0016      	movs	r6, r2
	ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    340c:	4b14      	ldr	r3, [pc, #80]	; (3460 <hal_i2c_receive+0x5c>)
    340e:	4798      	blx	r3
	int bus = cfg->atcai2c.bus;
    3410:	7945      	ldrb	r5, [r0, #5]
	int retries = cfg->rx_retries;
    3412:	6a81      	ldr	r1, [r0, #40]	; 0x28
	int status = !STATUS_OK;

	struct i2c_master_packet packet = {
    3414:	ab01      	add	r3, sp, #4
    3416:	7902      	ldrb	r2, [r0, #4]
    3418:	0852      	lsrs	r2, r2, #1
    341a:	801a      	strh	r2, [r3, #0]
    341c:	8832      	ldrh	r2, [r6, #0]
    341e:	805a      	strh	r2, [r3, #2]
    3420:	9402      	str	r4, [sp, #8]
    3422:	2200      	movs	r2, #0
    3424:	721a      	strb	r2, [r3, #8]
    3426:	725a      	strb	r2, [r3, #9]
    3428:	729a      	strb	r2, [r3, #10]
		.ten_bit_address	= false,
		.high_speed			= false,
		.hs_master_code		= 0x0,
	};

	while ( retries-- > 0 && status != STATUS_OK )
    342a:	1e4c      	subs	r4, r1, #1
    342c:	2900      	cmp	r1, #0
    342e:	dd14      	ble.n	345a <hal_i2c_receive+0x56>
		status = i2c_master_read_packet_wait( &(i2c_hal_data[bus]->i2c_master_instance), &packet);
    3430:	4f0c      	ldr	r7, [pc, #48]	; (3464 <hal_i2c_receive+0x60>)
    3432:	4e0d      	ldr	r6, [pc, #52]	; (3468 <hal_i2c_receive+0x64>)
    3434:	00ab      	lsls	r3, r5, #2
    3436:	59d8      	ldr	r0, [r3, r7]
    3438:	a901      	add	r1, sp, #4
    343a:	47b0      	blx	r6
	while ( retries-- > 0 && status != STATUS_OK )
    343c:	3c01      	subs	r4, #1
    343e:	d303      	bcc.n	3448 <hal_i2c_receive+0x44>
    3440:	2800      	cmp	r0, #0
    3442:	d1f7      	bne.n	3434 <hal_i2c_receive+0x30>

	if ( status != STATUS_OK )
		return ATCA_COMM_FAIL;

	return ATCA_SUCCESS;
    3444:	2200      	movs	r2, #0
    3446:	e005      	b.n	3454 <hal_i2c_receive+0x50>
		return ATCA_COMM_FAIL;
    3448:	22f0      	movs	r2, #240	; 0xf0
	return ATCA_SUCCESS;
    344a:	0003      	movs	r3, r0
    344c:	1e58      	subs	r0, r3, #1
    344e:	4183      	sbcs	r3, r0
    3450:	425b      	negs	r3, r3
    3452:	401a      	ands	r2, r3
}
    3454:	0010      	movs	r0, r2
    3456:	b005      	add	sp, #20
    3458:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ATCA_COMM_FAIL;
    345a:	22f0      	movs	r2, #240	; 0xf0
    345c:	e7fa      	b.n	3454 <hal_i2c_receive+0x50>
    345e:	46c0      	nop			; (mov r8, r8)
    3460:	00001de9 	.word	0x00001de9
    3464:	20000ce4 	.word	0x20000ce4
    3468:	00000781 	.word	0x00000781

0000346c <change_i2c_speed>:
 * \param[in] iface  interface on which to change bus speed
 * \param[in] speed  baud rate (typically 100000 or 400000)
 */

void change_i2c_speed( ATCAIface iface, uint32_t speed )
{
    346c:	b570      	push	{r4, r5, r6, lr}
    346e:	000e      	movs	r6, r1
	ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    3470:	4b37      	ldr	r3, [pc, #220]	; (3550 <change_i2c_speed+0xe4>)
    3472:	4798      	blx	r3
	int bus = cfg->atcai2c.bus;
    3474:	7944      	ldrb	r4, [r0, #5]

	config_i2c_master.buffer_timeout = 10000;
    3476:	4d37      	ldr	r5, [pc, #220]	; (3554 <change_i2c_speed+0xe8>)
    3478:	4b37      	ldr	r3, [pc, #220]	; (3558 <change_i2c_speed+0xec>)
    347a:	82eb      	strh	r3, [r5, #22]
	config_i2c_master.baud_rate = speed / 1000;
    347c:	21fa      	movs	r1, #250	; 0xfa
    347e:	0089      	lsls	r1, r1, #2
    3480:	0030      	movs	r0, r6
    3482:	4b36      	ldr	r3, [pc, #216]	; (355c <change_i2c_speed+0xf0>)
    3484:	4798      	blx	r3
    3486:	6028      	str	r0, [r5, #0]

	i2c_master_disable(&(i2c_hal_data[bus]->i2c_master_instance));
    3488:	00a2      	lsls	r2, r4, #2
    348a:	4b35      	ldr	r3, [pc, #212]	; (3560 <change_i2c_speed+0xf4>)
    348c:	58d5      	ldr	r5, [r2, r3]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    348e:	682e      	ldr	r6, [r5, #0]
	_i2c_master_wait_for_sync(module);
    3490:	0028      	movs	r0, r5
    3492:	4b34      	ldr	r3, [pc, #208]	; (3564 <change_i2c_speed+0xf8>)
    3494:	4798      	blx	r3
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    3496:	6833      	ldr	r3, [r6, #0]
    3498:	2202      	movs	r2, #2
    349a:	4393      	bics	r3, r2
    349c:	6033      	str	r3, [r6, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    349e:	6828      	ldr	r0, [r5, #0]
    34a0:	4b31      	ldr	r3, [pc, #196]	; (3568 <change_i2c_speed+0xfc>)
    34a2:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    34a4:	231f      	movs	r3, #31
    34a6:	4018      	ands	r0, r3
    34a8:	3b1e      	subs	r3, #30
    34aa:	4083      	lsls	r3, r0
    34ac:	2280      	movs	r2, #128	; 0x80
    34ae:	492f      	ldr	r1, [pc, #188]	; (356c <change_i2c_speed+0x100>)
    34b0:	508b      	str	r3, [r1, r2]

	switch (bus) {
    34b2:	2c05      	cmp	r4, #5
    34b4:	d809      	bhi.n	34ca <change_i2c_speed+0x5e>
    34b6:	00a3      	lsls	r3, r4, #2
    34b8:	4a2d      	ldr	r2, [pc, #180]	; (3570 <change_i2c_speed+0x104>)
    34ba:	58d3      	ldr	r3, [r2, r3]
    34bc:	469f      	mov	pc, r3
	case 0: i2c_master_init(  &(i2c_hal_data[bus]->i2c_master_instance), SERCOM0, &config_i2c_master); break;
    34be:	4b28      	ldr	r3, [pc, #160]	; (3560 <change_i2c_speed+0xf4>)
    34c0:	6818      	ldr	r0, [r3, #0]
    34c2:	4a24      	ldr	r2, [pc, #144]	; (3554 <change_i2c_speed+0xe8>)
    34c4:	492b      	ldr	r1, [pc, #172]	; (3574 <change_i2c_speed+0x108>)
    34c6:	4b2c      	ldr	r3, [pc, #176]	; (3578 <change_i2c_speed+0x10c>)
    34c8:	4798      	blx	r3
	case 3: i2c_master_init(  &(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
	case 4: i2c_master_init(  &(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
	case 5: i2c_master_init(  &(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
	}

	i2c_master_enable(&(i2c_hal_data[bus]->i2c_master_instance));
    34ca:	00a4      	lsls	r4, r4, #2
    34cc:	4b24      	ldr	r3, [pc, #144]	; (3560 <change_i2c_speed+0xf4>)
    34ce:	58e5      	ldr	r5, [r4, r3]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    34d0:	682c      	ldr	r4, [r5, #0]
	_i2c_master_wait_for_sync(module);
    34d2:	0028      	movs	r0, r5
    34d4:	4b23      	ldr	r3, [pc, #140]	; (3564 <change_i2c_speed+0xf8>)
    34d6:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    34d8:	6823      	ldr	r3, [r4, #0]
    34da:	2202      	movs	r2, #2
    34dc:	4313      	orrs	r3, r2
    34de:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    34e0:	6828      	ldr	r0, [r5, #0]
    34e2:	4b21      	ldr	r3, [pc, #132]	; (3568 <change_i2c_speed+0xfc>)
    34e4:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    34e6:	231f      	movs	r3, #31
    34e8:	4018      	ands	r0, r3
    34ea:	3b1e      	subs	r3, #30
    34ec:	4083      	lsls	r3, r0
    34ee:	4a1f      	ldr	r2, [pc, #124]	; (356c <change_i2c_speed+0x100>)
    34f0:	6013      	str	r3, [r2, #0]
	uint32_t timeout_counter = 0;
    34f2:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    34f4:	2110      	movs	r1, #16
    34f6:	8b62      	ldrh	r2, [r4, #26]
    34f8:	420a      	tst	r2, r1
    34fa:	d105      	bne.n	3508 <change_i2c_speed+0x9c>
		timeout_counter++;
    34fc:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    34fe:	88ea      	ldrh	r2, [r5, #6]
    3500:	4293      	cmp	r3, r2
    3502:	d3f8      	bcc.n	34f6 <change_i2c_speed+0x8a>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    3504:	2310      	movs	r3, #16
    3506:	8363      	strh	r3, [r4, #26]
}
    3508:	bd70      	pop	{r4, r5, r6, pc}
	case 1: i2c_master_init(  &(i2c_hal_data[bus]->i2c_master_instance), SERCOM1, &config_i2c_master); break;
    350a:	4b15      	ldr	r3, [pc, #84]	; (3560 <change_i2c_speed+0xf4>)
    350c:	6858      	ldr	r0, [r3, #4]
    350e:	4a11      	ldr	r2, [pc, #68]	; (3554 <change_i2c_speed+0xe8>)
    3510:	491a      	ldr	r1, [pc, #104]	; (357c <change_i2c_speed+0x110>)
    3512:	4b19      	ldr	r3, [pc, #100]	; (3578 <change_i2c_speed+0x10c>)
    3514:	4798      	blx	r3
    3516:	e7d8      	b.n	34ca <change_i2c_speed+0x5e>
	case 2: i2c_master_init(  &(i2c_hal_data[bus]->i2c_master_instance), SERCOM2, &config_i2c_master); break;
    3518:	4b11      	ldr	r3, [pc, #68]	; (3560 <change_i2c_speed+0xf4>)
    351a:	6898      	ldr	r0, [r3, #8]
    351c:	4a0d      	ldr	r2, [pc, #52]	; (3554 <change_i2c_speed+0xe8>)
    351e:	4918      	ldr	r1, [pc, #96]	; (3580 <change_i2c_speed+0x114>)
    3520:	4b15      	ldr	r3, [pc, #84]	; (3578 <change_i2c_speed+0x10c>)
    3522:	4798      	blx	r3
    3524:	e7d1      	b.n	34ca <change_i2c_speed+0x5e>
	case 3: i2c_master_init(  &(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
    3526:	4b0e      	ldr	r3, [pc, #56]	; (3560 <change_i2c_speed+0xf4>)
    3528:	68d8      	ldr	r0, [r3, #12]
    352a:	4a0a      	ldr	r2, [pc, #40]	; (3554 <change_i2c_speed+0xe8>)
    352c:	4915      	ldr	r1, [pc, #84]	; (3584 <change_i2c_speed+0x118>)
    352e:	4b12      	ldr	r3, [pc, #72]	; (3578 <change_i2c_speed+0x10c>)
    3530:	4798      	blx	r3
    3532:	e7ca      	b.n	34ca <change_i2c_speed+0x5e>
	case 4: i2c_master_init(  &(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
    3534:	4b0a      	ldr	r3, [pc, #40]	; (3560 <change_i2c_speed+0xf4>)
    3536:	6918      	ldr	r0, [r3, #16]
    3538:	4a06      	ldr	r2, [pc, #24]	; (3554 <change_i2c_speed+0xe8>)
    353a:	4913      	ldr	r1, [pc, #76]	; (3588 <change_i2c_speed+0x11c>)
    353c:	4b0e      	ldr	r3, [pc, #56]	; (3578 <change_i2c_speed+0x10c>)
    353e:	4798      	blx	r3
    3540:	e7c3      	b.n	34ca <change_i2c_speed+0x5e>
	case 5: i2c_master_init(  &(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
    3542:	4b07      	ldr	r3, [pc, #28]	; (3560 <change_i2c_speed+0xf4>)
    3544:	6958      	ldr	r0, [r3, #20]
    3546:	4a03      	ldr	r2, [pc, #12]	; (3554 <change_i2c_speed+0xe8>)
    3548:	4910      	ldr	r1, [pc, #64]	; (358c <change_i2c_speed+0x120>)
    354a:	4b0b      	ldr	r3, [pc, #44]	; (3578 <change_i2c_speed+0x10c>)
    354c:	4798      	blx	r3
    354e:	e7bc      	b.n	34ca <change_i2c_speed+0x5e>
    3550:	00001de9 	.word	0x00001de9
    3554:	200009e0 	.word	0x200009e0
    3558:	00002710 	.word	0x00002710
    355c:	00004d7d 	.word	0x00004d7d
    3560:	20000ce4 	.word	0x20000ce4
    3564:	00003225 	.word	0x00003225
    3568:	00003e05 	.word	0x00003e05
    356c:	e000e100 	.word	0xe000e100
    3570:	00008d1c 	.word	0x00008d1c
    3574:	42000800 	.word	0x42000800
    3578:	00000121 	.word	0x00000121
    357c:	42000c00 	.word	0x42000c00
    3580:	42001000 	.word	0x42001000
    3584:	42001400 	.word	0x42001400
    3588:	42001800 	.word	0x42001800
    358c:	42001c00 	.word	0x42001c00

00003590 <hal_i2c_wake>:
/** \brief wake up CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to wakeup
 */

ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
    3590:	b5f0      	push	{r4, r5, r6, r7, lr}
    3592:	46d6      	mov	lr, sl
    3594:	464f      	mov	r7, r9
    3596:	4646      	mov	r6, r8
    3598:	b5c0      	push	{r6, r7, lr}
    359a:	b088      	sub	sp, #32
    359c:	0004      	movs	r4, r0
    359e:	9001      	str	r0, [sp, #4]
	ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    35a0:	4b30      	ldr	r3, [pc, #192]	; (3664 <hal_i2c_wake+0xd4>)
    35a2:	4798      	blx	r3
    35a4:	4681      	mov	r9, r0
	int bus = cfg->atcai2c.bus;
    35a6:	7947      	ldrb	r7, [r0, #5]
	int retries = cfg->rx_retries;
    35a8:	6a86      	ldr	r6, [r0, #40]	; 0x28
	uint32_t bdrt = cfg->atcai2c.baud;
    35aa:	6883      	ldr	r3, [r0, #8]
    35ac:	4698      	mov	r8, r3
	int status = !STATUS_OK;
	uint8_t data[4], expected[4] = { 0x04, 0x11, 0x33, 0x43 };
    35ae:	4b2e      	ldr	r3, [pc, #184]	; (3668 <hal_i2c_wake+0xd8>)
    35b0:	681b      	ldr	r3, [r3, #0]
    35b2:	9306      	str	r3, [sp, #24]

	if ( bdrt != 100000 )  // if not already at 100KHz, change it
    35b4:	4b2d      	ldr	r3, [pc, #180]	; (366c <hal_i2c_wake+0xdc>)
    35b6:	4598      	cmp	r8, r3
    35b8:	d003      	beq.n	35c2 <hal_i2c_wake+0x32>
		change_i2c_speed( iface, 100000 );
    35ba:	0019      	movs	r1, r3
    35bc:	0020      	movs	r0, r4
    35be:	4b2c      	ldr	r3, [pc, #176]	; (3670 <hal_i2c_wake+0xe0>)
    35c0:	4798      	blx	r3

	// Send the wake by writing to an address of 0x00
	struct i2c_master_packet packet = {
    35c2:	ac03      	add	r4, sp, #12
    35c4:	2200      	movs	r2, #0
    35c6:	2300      	movs	r3, #0
    35c8:	8022      	strh	r2, [r4, #0]
    35ca:	8062      	strh	r2, [r4, #2]
    35cc:	ad07      	add	r5, sp, #28
    35ce:	9504      	str	r5, [sp, #16]
    35d0:	7223      	strb	r3, [r4, #8]
    35d2:	7263      	strb	r3, [r4, #9]
    35d4:	72a3      	strb	r3, [r4, #10]
		.high_speed			= false,
		.hs_master_code		= 0x0,
	};

	// Send the 00 address as the wake pulse
	i2c_master_write_packet_wait(  &(i2c_hal_data[bus]->i2c_master_instance), &packet );    // part will NACK, so don't check for status
    35d6:	00bb      	lsls	r3, r7, #2
    35d8:	4a26      	ldr	r2, [pc, #152]	; (3674 <hal_i2c_wake+0xe4>)
    35da:	5898      	ldr	r0, [r3, r2]
    35dc:	0021      	movs	r1, r4
    35de:	4b26      	ldr	r3, [pc, #152]	; (3678 <hal_i2c_wake+0xe8>)
    35e0:	4798      	blx	r3

	atca_delay_us(cfg->wake_delay);                                                         // wait tWHI + tWLO which is configured based on device type and configuration structure
    35e2:	464b      	mov	r3, r9
    35e4:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    35e6:	4b25      	ldr	r3, [pc, #148]	; (367c <hal_i2c_wake+0xec>)
    35e8:	4798      	blx	r3

	packet.address = cfg->atcai2c.slave_address >> 1;
    35ea:	464b      	mov	r3, r9
    35ec:	791b      	ldrb	r3, [r3, #4]
    35ee:	085b      	lsrs	r3, r3, #1
    35f0:	8023      	strh	r3, [r4, #0]
	packet.data_length = 4;
    35f2:	2304      	movs	r3, #4
    35f4:	8063      	strh	r3, [r4, #2]
	packet.data = data;
    35f6:	6065      	str	r5, [r4, #4]

	while ( retries-- > 0 && status != STATUS_OK )
    35f8:	1e75      	subs	r5, r6, #1
    35fa:	2e00      	cmp	r6, #0
    35fc:	dd2c      	ble.n	3658 <hal_i2c_wake+0xc8>
		status = i2c_master_read_packet_wait( &(i2c_hal_data[bus]->i2c_master_instance), &packet);
    35fe:	4b1d      	ldr	r3, [pc, #116]	; (3674 <hal_i2c_wake+0xe4>)
    3600:	469a      	mov	sl, r3
    3602:	4e1f      	ldr	r6, [pc, #124]	; (3680 <hal_i2c_wake+0xf0>)
    3604:	00bb      	lsls	r3, r7, #2
    3606:	4652      	mov	r2, sl
    3608:	5898      	ldr	r0, [r3, r2]
    360a:	a903      	add	r1, sp, #12
    360c:	47b0      	blx	r6
    360e:	0004      	movs	r4, r0
	while ( retries-- > 0 && status != STATUS_OK )
    3610:	3d01      	subs	r5, #1
    3612:	d30d      	bcc.n	3630 <hal_i2c_wake+0xa0>
    3614:	2800      	cmp	r0, #0
    3616:	d1f5      	bne.n	3604 <hal_i2c_wake+0x74>

	// if necessary, revert baud rate to what came in.
	if ( bdrt != 100000 )
    3618:	4b14      	ldr	r3, [pc, #80]	; (366c <hal_i2c_wake+0xdc>)
    361a:	4598      	cmp	r8, r3
    361c:	d10b      	bne.n	3636 <hal_i2c_wake+0xa6>
		change_i2c_speed( iface, bdrt );

	if ( status != STATUS_OK )
		return ATCA_COMM_FAIL;

	if ( memcmp( data, expected, 4 ) == 0 )
    361e:	2204      	movs	r2, #4
    3620:	a906      	add	r1, sp, #24
    3622:	a807      	add	r0, sp, #28
    3624:	4b17      	ldr	r3, [pc, #92]	; (3684 <hal_i2c_wake+0xf4>)
    3626:	4798      	blx	r3
    3628:	2800      	cmp	r0, #0
    362a:	d013      	beq.n	3654 <hal_i2c_wake+0xc4>
		return ATCA_SUCCESS;

	return ATCA_COMM_FAIL;
    362c:	20f0      	movs	r0, #240	; 0xf0
    362e:	e009      	b.n	3644 <hal_i2c_wake+0xb4>
	if ( bdrt != 100000 )
    3630:	4b0e      	ldr	r3, [pc, #56]	; (366c <hal_i2c_wake+0xdc>)
    3632:	4598      	cmp	r8, r3
    3634:	d003      	beq.n	363e <hal_i2c_wake+0xae>
		change_i2c_speed( iface, bdrt );
    3636:	4641      	mov	r1, r8
    3638:	9801      	ldr	r0, [sp, #4]
    363a:	4b0d      	ldr	r3, [pc, #52]	; (3670 <hal_i2c_wake+0xe0>)
    363c:	4798      	blx	r3
		return ATCA_COMM_FAIL;
    363e:	20f0      	movs	r0, #240	; 0xf0
	if ( status != STATUS_OK )
    3640:	2c00      	cmp	r4, #0
    3642:	d0ec      	beq.n	361e <hal_i2c_wake+0x8e>
}
    3644:	b008      	add	sp, #32
    3646:	bc1c      	pop	{r2, r3, r4}
    3648:	4690      	mov	r8, r2
    364a:	4699      	mov	r9, r3
    364c:	46a2      	mov	sl, r4
    364e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int status = !STATUS_OK;
    3650:	2401      	movs	r4, #1
    3652:	e7f0      	b.n	3636 <hal_i2c_wake+0xa6>
		return ATCA_SUCCESS;
    3654:	2000      	movs	r0, #0
    3656:	e7f5      	b.n	3644 <hal_i2c_wake+0xb4>
	if ( bdrt != 100000 )
    3658:	4b04      	ldr	r3, [pc, #16]	; (366c <hal_i2c_wake+0xdc>)
    365a:	4598      	cmp	r8, r3
    365c:	d1f8      	bne.n	3650 <hal_i2c_wake+0xc0>
		return ATCA_COMM_FAIL;
    365e:	20f0      	movs	r0, #240	; 0xf0
    3660:	e7f0      	b.n	3644 <hal_i2c_wake+0xb4>
    3662:	46c0      	nop			; (mov r8, r8)
    3664:	00001de9 	.word	0x00001de9
    3668:	00008d34 	.word	0x00008d34
    366c:	000186a0 	.word	0x000186a0
    3670:	0000346d 	.word	0x0000346d
    3674:	20000ce4 	.word	0x20000ce4
    3678:	000007a5 	.word	0x000007a5
    367c:	0000377d 	.word	0x0000377d
    3680:	00000781 	.word	0x00000781
    3684:	00006821 	.word	0x00006821

00003688 <hal_i2c_idle>:
/** \brief idle CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to idle
 */

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
    3688:	b500      	push	{lr}
    368a:	b085      	sub	sp, #20
	ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    368c:	4b0f      	ldr	r3, [pc, #60]	; (36cc <hal_i2c_idle+0x44>)
    368e:	4798      	blx	r3
	int bus = cfg->atcai2c.bus;
    3690:	7943      	ldrb	r3, [r0, #5]
	uint8_t data[4];

	struct i2c_master_packet packet = {
    3692:	7902      	ldrb	r2, [r0, #4]
    3694:	0852      	lsrs	r2, r2, #1
    3696:	4669      	mov	r1, sp
    3698:	800a      	strh	r2, [r1, #0]
    369a:	2201      	movs	r2, #1
    369c:	804a      	strh	r2, [r1, #2]
    369e:	a903      	add	r1, sp, #12
    36a0:	9101      	str	r1, [sp, #4]
    36a2:	2200      	movs	r2, #0
    36a4:	4668      	mov	r0, sp
    36a6:	7202      	strb	r2, [r0, #8]
    36a8:	7242      	strb	r2, [r0, #9]
    36aa:	7282      	strb	r2, [r0, #10]
		.ten_bit_address	= false,
		.high_speed			= false,
		.hs_master_code		= 0x0,
	};

	data[0] = 0x02;  // idle word address value
    36ac:	3202      	adds	r2, #2
    36ae:	700a      	strb	r2, [r1, #0]
	if ( i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK )
    36b0:	009b      	lsls	r3, r3, #2
    36b2:	4a07      	ldr	r2, [pc, #28]	; (36d0 <hal_i2c_idle+0x48>)
    36b4:	5898      	ldr	r0, [r3, r2]
    36b6:	4669      	mov	r1, sp
    36b8:	4b06      	ldr	r3, [pc, #24]	; (36d4 <hal_i2c_idle+0x4c>)
    36ba:	4798      	blx	r3
    36bc:	0003      	movs	r3, r0
		return ATCA_COMM_FAIL;
    36be:	20f0      	movs	r0, #240	; 0xf0

	return ATCA_SUCCESS;
    36c0:	1e5a      	subs	r2, r3, #1
    36c2:	4193      	sbcs	r3, r2
    36c4:	425b      	negs	r3, r3
    36c6:	4018      	ands	r0, r3

}
    36c8:	b005      	add	sp, #20
    36ca:	bd00      	pop	{pc}
    36cc:	00001de9 	.word	0x00001de9
    36d0:	20000ce4 	.word	0x20000ce4
    36d4:	000007a5 	.word	0x000007a5

000036d8 <hal_i2c_sleep>:
/** \brief sleep CryptoAuth device using I2C bus
 * \param[in] iface  interface to logical device to sleep
 */

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
    36d8:	b500      	push	{lr}
    36da:	b085      	sub	sp, #20
	ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    36dc:	4b0f      	ldr	r3, [pc, #60]	; (371c <hal_i2c_sleep+0x44>)
    36de:	4798      	blx	r3
	int bus = cfg->atcai2c.bus;
    36e0:	7943      	ldrb	r3, [r0, #5]
	uint8_t data[4];

	struct i2c_master_packet packet = {
    36e2:	7902      	ldrb	r2, [r0, #4]
    36e4:	0852      	lsrs	r2, r2, #1
    36e6:	4669      	mov	r1, sp
    36e8:	800a      	strh	r2, [r1, #0]
    36ea:	2201      	movs	r2, #1
    36ec:	804a      	strh	r2, [r1, #2]
    36ee:	a903      	add	r1, sp, #12
    36f0:	9101      	str	r1, [sp, #4]
    36f2:	2200      	movs	r2, #0
    36f4:	4668      	mov	r0, sp
    36f6:	7202      	strb	r2, [r0, #8]
    36f8:	7242      	strb	r2, [r0, #9]
    36fa:	7282      	strb	r2, [r0, #10]
		.ten_bit_address	= false,
		.high_speed			= false,
		.hs_master_code		= 0x0,
	};

	data[0] = 0x01;  // sleep word address value
    36fc:	2201      	movs	r2, #1
    36fe:	700a      	strb	r2, [r1, #0]
	if ( i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK )
    3700:	009b      	lsls	r3, r3, #2
    3702:	4a07      	ldr	r2, [pc, #28]	; (3720 <hal_i2c_sleep+0x48>)
    3704:	5898      	ldr	r0, [r3, r2]
    3706:	4669      	mov	r1, sp
    3708:	4b06      	ldr	r3, [pc, #24]	; (3724 <hal_i2c_sleep+0x4c>)
    370a:	4798      	blx	r3
    370c:	0003      	movs	r3, r0
		return ATCA_COMM_FAIL;
    370e:	20f0      	movs	r0, #240	; 0xf0

	return ATCA_SUCCESS;
    3710:	1e5a      	subs	r2, r3, #1
    3712:	4193      	sbcs	r3, r2
    3714:	425b      	negs	r3, r3
    3716:	4018      	ands	r0, r3
}
    3718:	b005      	add	sp, #20
    371a:	bd00      	pop	{pc}
    371c:	00001de9 	.word	0x00001de9
    3720:	20000ce4 	.word	0x20000ce4
    3724:	000007a5 	.word	0x000007a5

00003728 <hal_i2c_release>:
/** \brief manages reference count on given bus and releases resource if no more refences exist
 * \param[in] hal_data - opaque pointer to hal data structure - known only to the HAL implementation
 */

ATCA_STATUS hal_i2c_release( void *hal_data )
{
    3728:	b570      	push	{r4, r5, r6, lr}
    372a:	0004      	movs	r4, r0
	ATCAI2CMaster_t *hal = (ATCAI2CMaster_t*)hal_data;

	i2c_bus_ref_ct--;  // track total i2c bus interface instances for consistency checking and debugging
    372c:	4a0f      	ldr	r2, [pc, #60]	; (376c <hal_i2c_release+0x44>)
    372e:	6813      	ldr	r3, [r2, #0]
    3730:	3b01      	subs	r3, #1
    3732:	6013      	str	r3, [r2, #0]

	// if the use count for this bus has gone to 0 references, disable it.  protect against an unbracketed release
	if ( hal && --(hal->ref_ct) <= 0 && i2c_hal_data[hal->bus_index] != NULL ) {
    3734:	2800      	cmp	r0, #0
    3736:	d004      	beq.n	3742 <hal_i2c_release+0x1a>
    3738:	6a83      	ldr	r3, [r0, #40]	; 0x28
    373a:	3b01      	subs	r3, #1
    373c:	6283      	str	r3, [r0, #40]	; 0x28
    373e:	2b00      	cmp	r3, #0
    3740:	dd01      	ble.n	3746 <hal_i2c_release+0x1e>
		free(i2c_hal_data[hal->bus_index]);
		i2c_hal_data[hal->bus_index] = NULL;
	}

	return ATCA_SUCCESS;
}
    3742:	2000      	movs	r0, #0
    3744:	bd70      	pop	{r4, r5, r6, pc}
	if ( hal && --(hal->ref_ct) <= 0 && i2c_hal_data[hal->bus_index] != NULL ) {
    3746:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    3748:	009b      	lsls	r3, r3, #2
    374a:	4a09      	ldr	r2, [pc, #36]	; (3770 <hal_i2c_release+0x48>)
    374c:	589b      	ldr	r3, [r3, r2]
    374e:	2b00      	cmp	r3, #0
    3750:	d0f7      	beq.n	3742 <hal_i2c_release+0x1a>
		i2c_master_reset(&(hal->i2c_master_instance));
    3752:	4b08      	ldr	r3, [pc, #32]	; (3774 <hal_i2c_release+0x4c>)
    3754:	4798      	blx	r3
		free(i2c_hal_data[hal->bus_index]);
    3756:	4d06      	ldr	r5, [pc, #24]	; (3770 <hal_i2c_release+0x48>)
    3758:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    375a:	009b      	lsls	r3, r3, #2
    375c:	5958      	ldr	r0, [r3, r5]
    375e:	4b06      	ldr	r3, [pc, #24]	; (3778 <hal_i2c_release+0x50>)
    3760:	4798      	blx	r3
		i2c_hal_data[hal->bus_index] = NULL;
    3762:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3764:	009b      	lsls	r3, r3, #2
    3766:	2200      	movs	r2, #0
    3768:	515a      	str	r2, [r3, r5]
    376a:	e7ea      	b.n	3742 <hal_i2c_release+0x1a>
    376c:	20000a14 	.word	0x20000a14
    3770:	20000ce4 	.word	0x20000ce4
    3774:	00000409 	.word	0x00000409
    3778:	0000680d 	.word	0x0000680d

0000377c <atca_delay_us>:
 * These methods define the hardware abstraction layer for communicating with a CryptoAuth device
 *
   @{ */

void atca_delay_us(uint32_t delay)
{
    377c:	b510      	push	{r4, lr}
	// use ASF supplied delay
	delay_us(delay);
    377e:	4b01      	ldr	r3, [pc, #4]	; (3784 <atca_delay_us+0x8>)
    3780:	4798      	blx	r3
}
    3782:	bd10      	pop	{r4, pc}
    3784:	000037d5 	.word	0x000037d5

00003788 <atca_delay_ms>:
 * \param[in] delay number of milliseconds to delay
 */

/* ASF already has delay_ms - see delay.h */
void atca_delay_ms(uint32_t delay)
{
    3788:	b510      	push	{r4, lr}
	// use ASF supplied delay
	delay_ms(delay);
    378a:	4b01      	ldr	r3, [pc, #4]	; (3790 <atca_delay_ms+0x8>)
    378c:	4798      	blx	r3
}
    378e:	bd10      	pop	{r4, pc}
    3790:	00003801 	.word	0x00003801

00003794 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    3794:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    3796:	2000      	movs	r0, #0
    3798:	4b08      	ldr	r3, [pc, #32]	; (37bc <delay_init+0x28>)
    379a:	4798      	blx	r3
    379c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    379e:	4c08      	ldr	r4, [pc, #32]	; (37c0 <delay_init+0x2c>)
    37a0:	21fa      	movs	r1, #250	; 0xfa
    37a2:	0089      	lsls	r1, r1, #2
    37a4:	47a0      	blx	r4
    37a6:	4b07      	ldr	r3, [pc, #28]	; (37c4 <delay_init+0x30>)
    37a8:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    37aa:	4907      	ldr	r1, [pc, #28]	; (37c8 <delay_init+0x34>)
    37ac:	0028      	movs	r0, r5
    37ae:	47a0      	blx	r4
    37b0:	4b06      	ldr	r3, [pc, #24]	; (37cc <delay_init+0x38>)
    37b2:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    37b4:	2205      	movs	r2, #5
    37b6:	4b06      	ldr	r3, [pc, #24]	; (37d0 <delay_init+0x3c>)
    37b8:	601a      	str	r2, [r3, #0]
}
    37ba:	bd70      	pop	{r4, r5, r6, pc}
    37bc:	000047e5 	.word	0x000047e5
    37c0:	00004d7d 	.word	0x00004d7d
    37c4:	20000408 	.word	0x20000408
    37c8:	000f4240 	.word	0x000f4240
    37cc:	2000040c 	.word	0x2000040c
    37d0:	e000e010 	.word	0xe000e010

000037d4 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    37d4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    37d6:	4b08      	ldr	r3, [pc, #32]	; (37f8 <delay_cycles_us+0x24>)
    37d8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    37da:	4a08      	ldr	r2, [pc, #32]	; (37fc <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    37dc:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    37de:	2180      	movs	r1, #128	; 0x80
    37e0:	0249      	lsls	r1, r1, #9
	while (n--) {
    37e2:	3801      	subs	r0, #1
    37e4:	d307      	bcc.n	37f6 <delay_cycles_us+0x22>
	if (n > 0) {
    37e6:	2c00      	cmp	r4, #0
    37e8:	d0fb      	beq.n	37e2 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    37ea:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    37ec:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    37ee:	6813      	ldr	r3, [r2, #0]
    37f0:	420b      	tst	r3, r1
    37f2:	d0fc      	beq.n	37ee <delay_cycles_us+0x1a>
    37f4:	e7f5      	b.n	37e2 <delay_cycles_us+0xe>
	}
}
    37f6:	bd30      	pop	{r4, r5, pc}
    37f8:	2000040c 	.word	0x2000040c
    37fc:	e000e010 	.word	0xe000e010

00003800 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    3800:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    3802:	4b08      	ldr	r3, [pc, #32]	; (3824 <delay_cycles_ms+0x24>)
    3804:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    3806:	4a08      	ldr	r2, [pc, #32]	; (3828 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    3808:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    380a:	2180      	movs	r1, #128	; 0x80
    380c:	0249      	lsls	r1, r1, #9
	while (n--) {
    380e:	3801      	subs	r0, #1
    3810:	d307      	bcc.n	3822 <delay_cycles_ms+0x22>
	if (n > 0) {
    3812:	2c00      	cmp	r4, #0
    3814:	d0fb      	beq.n	380e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    3816:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    3818:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    381a:	6813      	ldr	r3, [r2, #0]
    381c:	420b      	tst	r3, r1
    381e:	d0fc      	beq.n	381a <delay_cycles_ms+0x1a>
    3820:	e7f5      	b.n	380e <delay_cycles_ms+0xe>
	}
}
    3822:	bd30      	pop	{r4, r5, pc}
    3824:	20000408 	.word	0x20000408
    3828:	e000e010 	.word	0xe000e010

0000382c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    382c:	4b0c      	ldr	r3, [pc, #48]	; (3860 <cpu_irq_enter_critical+0x34>)
    382e:	681b      	ldr	r3, [r3, #0]
    3830:	2b00      	cmp	r3, #0
    3832:	d106      	bne.n	3842 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3834:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3838:	2b00      	cmp	r3, #0
    383a:	d007      	beq.n	384c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    383c:	2200      	movs	r2, #0
    383e:	4b09      	ldr	r3, [pc, #36]	; (3864 <cpu_irq_enter_critical+0x38>)
    3840:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3842:	4a07      	ldr	r2, [pc, #28]	; (3860 <cpu_irq_enter_critical+0x34>)
    3844:	6813      	ldr	r3, [r2, #0]
    3846:	3301      	adds	r3, #1
    3848:	6013      	str	r3, [r2, #0]
}
    384a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    384c:	b672      	cpsid	i
    384e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3852:	2200      	movs	r2, #0
    3854:	4b04      	ldr	r3, [pc, #16]	; (3868 <cpu_irq_enter_critical+0x3c>)
    3856:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3858:	3201      	adds	r2, #1
    385a:	4b02      	ldr	r3, [pc, #8]	; (3864 <cpu_irq_enter_critical+0x38>)
    385c:	701a      	strb	r2, [r3, #0]
    385e:	e7f0      	b.n	3842 <cpu_irq_enter_critical+0x16>
    3860:	20000a18 	.word	0x20000a18
    3864:	20000a1c 	.word	0x20000a1c
    3868:	20000410 	.word	0x20000410

0000386c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    386c:	4b08      	ldr	r3, [pc, #32]	; (3890 <cpu_irq_leave_critical+0x24>)
    386e:	681a      	ldr	r2, [r3, #0]
    3870:	3a01      	subs	r2, #1
    3872:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3874:	681b      	ldr	r3, [r3, #0]
    3876:	2b00      	cmp	r3, #0
    3878:	d109      	bne.n	388e <cpu_irq_leave_critical+0x22>
    387a:	4b06      	ldr	r3, [pc, #24]	; (3894 <cpu_irq_leave_critical+0x28>)
    387c:	781b      	ldrb	r3, [r3, #0]
    387e:	2b00      	cmp	r3, #0
    3880:	d005      	beq.n	388e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    3882:	2201      	movs	r2, #1
    3884:	4b04      	ldr	r3, [pc, #16]	; (3898 <cpu_irq_leave_critical+0x2c>)
    3886:	701a      	strb	r2, [r3, #0]
    3888:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    388c:	b662      	cpsie	i
	}
}
    388e:	4770      	bx	lr
    3890:	20000a18 	.word	0x20000a18
    3894:	20000a1c 	.word	0x20000a1c
    3898:	20000410 	.word	0x20000410

0000389c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    389c:	b5f0      	push	{r4, r5, r6, r7, lr}
    389e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    38a0:	ac01      	add	r4, sp, #4
    38a2:	2501      	movs	r5, #1
    38a4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    38a6:	2700      	movs	r7, #0
    38a8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    38aa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    38ac:	0021      	movs	r1, r4
    38ae:	203e      	movs	r0, #62	; 0x3e
    38b0:	4e06      	ldr	r6, [pc, #24]	; (38cc <system_board_init+0x30>)
    38b2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    38b4:	2280      	movs	r2, #128	; 0x80
    38b6:	05d2      	lsls	r2, r2, #23
    38b8:	4b05      	ldr	r3, [pc, #20]	; (38d0 <system_board_init+0x34>)
    38ba:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    38bc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    38be:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    38c0:	0021      	movs	r1, r4
    38c2:	200f      	movs	r0, #15
    38c4:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    38c6:	b003      	add	sp, #12
    38c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38ca:	46c0      	nop			; (mov r8, r8)
    38cc:	000039ad 	.word	0x000039ad
    38d0:	41004480 	.word	0x41004480

000038d4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    38d4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    38d6:	2200      	movs	r2, #0
    38d8:	4b10      	ldr	r3, [pc, #64]	; (391c <EIC_Handler+0x48>)
    38da:	701a      	strb	r2, [r3, #0]
    38dc:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    38de:	4910      	ldr	r1, [pc, #64]	; (3920 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    38e0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    38e2:	4e10      	ldr	r6, [pc, #64]	; (3924 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    38e4:	4c0d      	ldr	r4, [pc, #52]	; (391c <EIC_Handler+0x48>)
    38e6:	e00a      	b.n	38fe <EIC_Handler+0x2a>
		return eics[eic_index];
    38e8:	490d      	ldr	r1, [pc, #52]	; (3920 <EIC_Handler+0x4c>)
    38ea:	e008      	b.n	38fe <EIC_Handler+0x2a>
    38ec:	7823      	ldrb	r3, [r4, #0]
    38ee:	3301      	adds	r3, #1
    38f0:	b2db      	uxtb	r3, r3
    38f2:	7023      	strb	r3, [r4, #0]
    38f4:	2b0f      	cmp	r3, #15
    38f6:	d810      	bhi.n	391a <EIC_Handler+0x46>
		return NULL;
    38f8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    38fa:	2b1f      	cmp	r3, #31
    38fc:	d9f4      	bls.n	38e8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    38fe:	0028      	movs	r0, r5
    3900:	4018      	ands	r0, r3
    3902:	2201      	movs	r2, #1
    3904:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    3906:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    3908:	4210      	tst	r0, r2
    390a:	d0ef      	beq.n	38ec <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    390c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    390e:	009b      	lsls	r3, r3, #2
    3910:	599b      	ldr	r3, [r3, r6]
    3912:	2b00      	cmp	r3, #0
    3914:	d0ea      	beq.n	38ec <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    3916:	4798      	blx	r3
    3918:	e7e8      	b.n	38ec <EIC_Handler+0x18>
			}
		}
	}
}
    391a:	bd70      	pop	{r4, r5, r6, pc}
    391c:	20000cfc 	.word	0x20000cfc
    3920:	40001800 	.word	0x40001800
    3924:	20000d00 	.word	0x20000d00

00003928 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    3928:	4a04      	ldr	r2, [pc, #16]	; (393c <_extint_enable+0x14>)
    392a:	7813      	ldrb	r3, [r2, #0]
    392c:	2102      	movs	r1, #2
    392e:	430b      	orrs	r3, r1
    3930:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3932:	7853      	ldrb	r3, [r2, #1]
    3934:	b25b      	sxtb	r3, r3
    3936:	2b00      	cmp	r3, #0
    3938:	dbfb      	blt.n	3932 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    393a:	4770      	bx	lr
    393c:	40001800 	.word	0x40001800

00003940 <_system_extint_init>:
{
    3940:	b500      	push	{lr}
    3942:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    3944:	4a12      	ldr	r2, [pc, #72]	; (3990 <_system_extint_init+0x50>)
    3946:	6993      	ldr	r3, [r2, #24]
    3948:	2140      	movs	r1, #64	; 0x40
    394a:	430b      	orrs	r3, r1
    394c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    394e:	a901      	add	r1, sp, #4
    3950:	2300      	movs	r3, #0
    3952:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    3954:	2005      	movs	r0, #5
    3956:	4b0f      	ldr	r3, [pc, #60]	; (3994 <_system_extint_init+0x54>)
    3958:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    395a:	2005      	movs	r0, #5
    395c:	4b0e      	ldr	r3, [pc, #56]	; (3998 <_system_extint_init+0x58>)
    395e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    3960:	4a0e      	ldr	r2, [pc, #56]	; (399c <_system_extint_init+0x5c>)
    3962:	7813      	ldrb	r3, [r2, #0]
    3964:	2101      	movs	r1, #1
    3966:	430b      	orrs	r3, r1
    3968:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    396a:	7853      	ldrb	r3, [r2, #1]
    396c:	b25b      	sxtb	r3, r3
    396e:	2b00      	cmp	r3, #0
    3970:	dbfb      	blt.n	396a <_system_extint_init+0x2a>
    3972:	4b0b      	ldr	r3, [pc, #44]	; (39a0 <_system_extint_init+0x60>)
    3974:	0019      	movs	r1, r3
    3976:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    3978:	2200      	movs	r2, #0
    397a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    397c:	4299      	cmp	r1, r3
    397e:	d1fc      	bne.n	397a <_system_extint_init+0x3a>
    3980:	2210      	movs	r2, #16
    3982:	4b08      	ldr	r3, [pc, #32]	; (39a4 <_system_extint_init+0x64>)
    3984:	601a      	str	r2, [r3, #0]
	_extint_enable();
    3986:	4b08      	ldr	r3, [pc, #32]	; (39a8 <_system_extint_init+0x68>)
    3988:	4798      	blx	r3
}
    398a:	b003      	add	sp, #12
    398c:	bd00      	pop	{pc}
    398e:	46c0      	nop			; (mov r8, r8)
    3990:	40000400 	.word	0x40000400
    3994:	000048fd 	.word	0x000048fd
    3998:	00004871 	.word	0x00004871
    399c:	40001800 	.word	0x40001800
    39a0:	20000d00 	.word	0x20000d00
    39a4:	e000e100 	.word	0xe000e100
    39a8:	00003929 	.word	0x00003929

000039ac <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    39ac:	b500      	push	{lr}
    39ae:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    39b0:	ab01      	add	r3, sp, #4
    39b2:	2280      	movs	r2, #128	; 0x80
    39b4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    39b6:	780a      	ldrb	r2, [r1, #0]
    39b8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    39ba:	784a      	ldrb	r2, [r1, #1]
    39bc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    39be:	788a      	ldrb	r2, [r1, #2]
    39c0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    39c2:	0019      	movs	r1, r3
    39c4:	4b01      	ldr	r3, [pc, #4]	; (39cc <port_pin_set_config+0x20>)
    39c6:	4798      	blx	r3
}
    39c8:	b003      	add	sp, #12
    39ca:	bd00      	pop	{pc}
    39cc:	00004a25 	.word	0x00004a25

000039d0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    39d0:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    39d2:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    39d4:	2340      	movs	r3, #64	; 0x40
    39d6:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    39d8:	4281      	cmp	r1, r0
    39da:	d202      	bcs.n	39e2 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    39dc:	0018      	movs	r0, r3
    39de:	bd10      	pop	{r4, pc}
		baud_calculated++;
    39e0:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    39e2:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    39e4:	1c63      	adds	r3, r4, #1
    39e6:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    39e8:	4288      	cmp	r0, r1
    39ea:	d9f9      	bls.n	39e0 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    39ec:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    39ee:	2cff      	cmp	r4, #255	; 0xff
    39f0:	d8f4      	bhi.n	39dc <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    39f2:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    39f4:	2300      	movs	r3, #0
    39f6:	e7f1      	b.n	39dc <_sercom_get_sync_baud_val+0xc>

000039f8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    39f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    39fa:	46de      	mov	lr, fp
    39fc:	4657      	mov	r7, sl
    39fe:	464e      	mov	r6, r9
    3a00:	4645      	mov	r5, r8
    3a02:	b5e0      	push	{r5, r6, r7, lr}
    3a04:	b089      	sub	sp, #36	; 0x24
    3a06:	000c      	movs	r4, r1
    3a08:	9205      	str	r2, [sp, #20]
    3a0a:	aa12      	add	r2, sp, #72	; 0x48
    3a0c:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3a0e:	0005      	movs	r5, r0
    3a10:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3a12:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    3a14:	42a5      	cmp	r5, r4
    3a16:	d907      	bls.n	3a28 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    3a18:	0010      	movs	r0, r2
    3a1a:	b009      	add	sp, #36	; 0x24
    3a1c:	bc3c      	pop	{r2, r3, r4, r5}
    3a1e:	4690      	mov	r8, r2
    3a20:	4699      	mov	r9, r3
    3a22:	46a2      	mov	sl, r4
    3a24:	46ab      	mov	fp, r5
    3a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3a28:	2b00      	cmp	r3, #0
    3a2a:	d155      	bne.n	3ad8 <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    3a2c:	0002      	movs	r2, r0
    3a2e:	0008      	movs	r0, r1
    3a30:	2100      	movs	r1, #0
    3a32:	4d63      	ldr	r5, [pc, #396]	; (3bc0 <_sercom_get_async_baud_val+0x1c8>)
    3a34:	47a8      	blx	r5
    3a36:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    3a38:	0026      	movs	r6, r4
    3a3a:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
    3a3c:	2300      	movs	r3, #0
    3a3e:	2400      	movs	r4, #0
    3a40:	9300      	str	r3, [sp, #0]
    3a42:	9401      	str	r4, [sp, #4]
    3a44:	2200      	movs	r2, #0
    3a46:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    3a48:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    3a4a:	2120      	movs	r1, #32
    3a4c:	468c      	mov	ip, r1
    3a4e:	391f      	subs	r1, #31
    3a50:	9602      	str	r6, [sp, #8]
    3a52:	9703      	str	r7, [sp, #12]
    3a54:	e014      	b.n	3a80 <_sercom_get_async_baud_val+0x88>
    3a56:	4664      	mov	r4, ip
    3a58:	1a24      	subs	r4, r4, r0
    3a5a:	000d      	movs	r5, r1
    3a5c:	40e5      	lsrs	r5, r4
    3a5e:	46a8      	mov	r8, r5
    3a60:	e015      	b.n	3a8e <_sercom_get_async_baud_val+0x96>
			r = r - d;
    3a62:	9c02      	ldr	r4, [sp, #8]
    3a64:	9d03      	ldr	r5, [sp, #12]
    3a66:	1b12      	subs	r2, r2, r4
    3a68:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    3a6a:	464d      	mov	r5, r9
    3a6c:	9e00      	ldr	r6, [sp, #0]
    3a6e:	9f01      	ldr	r7, [sp, #4]
    3a70:	4335      	orrs	r5, r6
    3a72:	003c      	movs	r4, r7
    3a74:	4646      	mov	r6, r8
    3a76:	4334      	orrs	r4, r6
    3a78:	9500      	str	r5, [sp, #0]
    3a7a:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
    3a7c:	3801      	subs	r0, #1
    3a7e:	d31d      	bcc.n	3abc <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
    3a80:	2420      	movs	r4, #32
    3a82:	4264      	negs	r4, r4
    3a84:	1904      	adds	r4, r0, r4
    3a86:	d4e6      	bmi.n	3a56 <_sercom_get_async_baud_val+0x5e>
    3a88:	000d      	movs	r5, r1
    3a8a:	40a5      	lsls	r5, r4
    3a8c:	46a8      	mov	r8, r5
    3a8e:	000c      	movs	r4, r1
    3a90:	4084      	lsls	r4, r0
    3a92:	46a1      	mov	r9, r4
		r = r << 1;
    3a94:	1892      	adds	r2, r2, r2
    3a96:	415b      	adcs	r3, r3
    3a98:	0014      	movs	r4, r2
    3a9a:	001d      	movs	r5, r3
		if (n & bit_shift) {
    3a9c:	4646      	mov	r6, r8
    3a9e:	465f      	mov	r7, fp
    3aa0:	423e      	tst	r6, r7
    3aa2:	d003      	beq.n	3aac <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
    3aa4:	000e      	movs	r6, r1
    3aa6:	4326      	orrs	r6, r4
    3aa8:	0032      	movs	r2, r6
    3aaa:	002b      	movs	r3, r5
		if (r >= d) {
    3aac:	9c02      	ldr	r4, [sp, #8]
    3aae:	9d03      	ldr	r5, [sp, #12]
    3ab0:	429d      	cmp	r5, r3
    3ab2:	d8e3      	bhi.n	3a7c <_sercom_get_async_baud_val+0x84>
    3ab4:	d1d5      	bne.n	3a62 <_sercom_get_async_baud_val+0x6a>
    3ab6:	4294      	cmp	r4, r2
    3ab8:	d8e0      	bhi.n	3a7c <_sercom_get_async_baud_val+0x84>
    3aba:	e7d2      	b.n	3a62 <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
    3abc:	2200      	movs	r2, #0
    3abe:	2301      	movs	r3, #1
    3ac0:	9800      	ldr	r0, [sp, #0]
    3ac2:	9901      	ldr	r1, [sp, #4]
    3ac4:	1a12      	subs	r2, r2, r0
    3ac6:	418b      	sbcs	r3, r1
    3ac8:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
    3aca:	0c13      	lsrs	r3, r2, #16
    3acc:	040a      	lsls	r2, r1, #16
    3ace:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    3ad0:	9b05      	ldr	r3, [sp, #20]
    3ad2:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    3ad4:	2200      	movs	r2, #0
    3ad6:	e79f      	b.n	3a18 <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
    3ad8:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3ada:	2b01      	cmp	r3, #1
    3adc:	d1f8      	bne.n	3ad0 <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    3ade:	0f63      	lsrs	r3, r4, #29
    3ae0:	9304      	str	r3, [sp, #16]
    3ae2:	00e3      	lsls	r3, r4, #3
    3ae4:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
    3ae6:	000a      	movs	r2, r1
    3ae8:	2300      	movs	r3, #0
    3aea:	2100      	movs	r1, #0
    3aec:	4c34      	ldr	r4, [pc, #208]	; (3bc0 <_sercom_get_async_baud_val+0x1c8>)
    3aee:	47a0      	blx	r4
    3af0:	0004      	movs	r4, r0
    3af2:	000d      	movs	r5, r1
    3af4:	2300      	movs	r3, #0
    3af6:	469c      	mov	ip, r3
    3af8:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
    3afa:	3320      	adds	r3, #32
    3afc:	469b      	mov	fp, r3
    3afe:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
    3b00:	4663      	mov	r3, ip
    3b02:	9307      	str	r3, [sp, #28]
    3b04:	e048      	b.n	3b98 <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
    3b06:	4659      	mov	r1, fp
    3b08:	1bc9      	subs	r1, r1, r7
    3b0a:	0030      	movs	r0, r6
    3b0c:	40c8      	lsrs	r0, r1
    3b0e:	4682      	mov	sl, r0
    3b10:	e010      	b.n	3b34 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
    3b12:	9800      	ldr	r0, [sp, #0]
    3b14:	9901      	ldr	r1, [sp, #4]
    3b16:	1a12      	subs	r2, r2, r0
    3b18:	418b      	sbcs	r3, r1
			q |= bit_shift;
    3b1a:	9902      	ldr	r1, [sp, #8]
    3b1c:	4648      	mov	r0, r9
    3b1e:	4301      	orrs	r1, r0
    3b20:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
    3b22:	3f01      	subs	r7, #1
    3b24:	d325      	bcc.n	3b72 <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
    3b26:	2120      	movs	r1, #32
    3b28:	4249      	negs	r1, r1
    3b2a:	1879      	adds	r1, r7, r1
    3b2c:	d4eb      	bmi.n	3b06 <_sercom_get_async_baud_val+0x10e>
    3b2e:	0030      	movs	r0, r6
    3b30:	4088      	lsls	r0, r1
    3b32:	4682      	mov	sl, r0
    3b34:	0031      	movs	r1, r6
    3b36:	40b9      	lsls	r1, r7
    3b38:	4689      	mov	r9, r1
		r = r << 1;
    3b3a:	1892      	adds	r2, r2, r2
    3b3c:	415b      	adcs	r3, r3
    3b3e:	0010      	movs	r0, r2
    3b40:	0019      	movs	r1, r3
		if (n & bit_shift) {
    3b42:	4644      	mov	r4, r8
    3b44:	464d      	mov	r5, r9
    3b46:	402c      	ands	r4, r5
    3b48:	46a4      	mov	ip, r4
    3b4a:	4654      	mov	r4, sl
    3b4c:	9d04      	ldr	r5, [sp, #16]
    3b4e:	402c      	ands	r4, r5
    3b50:	46a2      	mov	sl, r4
    3b52:	4664      	mov	r4, ip
    3b54:	4655      	mov	r5, sl
    3b56:	432c      	orrs	r4, r5
    3b58:	d003      	beq.n	3b62 <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
    3b5a:	0034      	movs	r4, r6
    3b5c:	4304      	orrs	r4, r0
    3b5e:	0022      	movs	r2, r4
    3b60:	000b      	movs	r3, r1
		if (r >= d) {
    3b62:	9800      	ldr	r0, [sp, #0]
    3b64:	9901      	ldr	r1, [sp, #4]
    3b66:	4299      	cmp	r1, r3
    3b68:	d8db      	bhi.n	3b22 <_sercom_get_async_baud_val+0x12a>
    3b6a:	d1d2      	bne.n	3b12 <_sercom_get_async_baud_val+0x11a>
    3b6c:	4290      	cmp	r0, r2
    3b6e:	d8d8      	bhi.n	3b22 <_sercom_get_async_baud_val+0x12a>
    3b70:	e7cf      	b.n	3b12 <_sercom_get_async_baud_val+0x11a>
    3b72:	9c00      	ldr	r4, [sp, #0]
    3b74:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
    3b76:	9902      	ldr	r1, [sp, #8]
    3b78:	9a07      	ldr	r2, [sp, #28]
    3b7a:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    3b7c:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    3b7e:	4911      	ldr	r1, [pc, #68]	; (3bc4 <_sercom_get_async_baud_val+0x1cc>)
    3b80:	428b      	cmp	r3, r1
    3b82:	d914      	bls.n	3bae <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    3b84:	9b06      	ldr	r3, [sp, #24]
    3b86:	3301      	adds	r3, #1
    3b88:	b2db      	uxtb	r3, r3
    3b8a:	0019      	movs	r1, r3
    3b8c:	9306      	str	r3, [sp, #24]
    3b8e:	0013      	movs	r3, r2
    3b90:	3301      	adds	r3, #1
    3b92:	9307      	str	r3, [sp, #28]
    3b94:	2908      	cmp	r1, #8
    3b96:	d008      	beq.n	3baa <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
    3b98:	2300      	movs	r3, #0
    3b9a:	9302      	str	r3, [sp, #8]
    3b9c:	2200      	movs	r2, #0
    3b9e:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    3ba0:	213f      	movs	r1, #63	; 0x3f
    3ba2:	9400      	str	r4, [sp, #0]
    3ba4:	9501      	str	r5, [sp, #4]
    3ba6:	000f      	movs	r7, r1
    3ba8:	e7bd      	b.n	3b26 <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3baa:	2240      	movs	r2, #64	; 0x40
    3bac:	e734      	b.n	3a18 <_sercom_get_async_baud_val+0x20>
    3bae:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
    3bb0:	9906      	ldr	r1, [sp, #24]
    3bb2:	2908      	cmp	r1, #8
    3bb4:	d100      	bne.n	3bb8 <_sercom_get_async_baud_val+0x1c0>
    3bb6:	e72f      	b.n	3a18 <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
    3bb8:	034a      	lsls	r2, r1, #13
    3bba:	431a      	orrs	r2, r3
    3bbc:	e788      	b.n	3ad0 <_sercom_get_async_baud_val+0xd8>
    3bbe:	46c0      	nop			; (mov r8, r8)
    3bc0:	00004e95 	.word	0x00004e95
    3bc4:	00001fff 	.word	0x00001fff

00003bc8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3bc8:	b510      	push	{r4, lr}
    3bca:	b082      	sub	sp, #8
    3bcc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3bce:	4b0e      	ldr	r3, [pc, #56]	; (3c08 <sercom_set_gclk_generator+0x40>)
    3bd0:	781b      	ldrb	r3, [r3, #0]
    3bd2:	2b00      	cmp	r3, #0
    3bd4:	d007      	beq.n	3be6 <sercom_set_gclk_generator+0x1e>
    3bd6:	2900      	cmp	r1, #0
    3bd8:	d105      	bne.n	3be6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    3bda:	4b0b      	ldr	r3, [pc, #44]	; (3c08 <sercom_set_gclk_generator+0x40>)
    3bdc:	785b      	ldrb	r3, [r3, #1]
    3bde:	4283      	cmp	r3, r0
    3be0:	d010      	beq.n	3c04 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3be2:	201d      	movs	r0, #29
    3be4:	e00c      	b.n	3c00 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    3be6:	a901      	add	r1, sp, #4
    3be8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3bea:	2013      	movs	r0, #19
    3bec:	4b07      	ldr	r3, [pc, #28]	; (3c0c <sercom_set_gclk_generator+0x44>)
    3bee:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3bf0:	2013      	movs	r0, #19
    3bf2:	4b07      	ldr	r3, [pc, #28]	; (3c10 <sercom_set_gclk_generator+0x48>)
    3bf4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    3bf6:	4b04      	ldr	r3, [pc, #16]	; (3c08 <sercom_set_gclk_generator+0x40>)
    3bf8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    3bfa:	2201      	movs	r2, #1
    3bfc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    3bfe:	2000      	movs	r0, #0
}
    3c00:	b002      	add	sp, #8
    3c02:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    3c04:	2000      	movs	r0, #0
    3c06:	e7fb      	b.n	3c00 <sercom_set_gclk_generator+0x38>
    3c08:	20000a20 	.word	0x20000a20
    3c0c:	000048fd 	.word	0x000048fd
    3c10:	00004871 	.word	0x00004871

00003c14 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    3c14:	4b40      	ldr	r3, [pc, #256]	; (3d18 <_sercom_get_default_pad+0x104>)
    3c16:	4298      	cmp	r0, r3
    3c18:	d031      	beq.n	3c7e <_sercom_get_default_pad+0x6a>
    3c1a:	d90a      	bls.n	3c32 <_sercom_get_default_pad+0x1e>
    3c1c:	4b3f      	ldr	r3, [pc, #252]	; (3d1c <_sercom_get_default_pad+0x108>)
    3c1e:	4298      	cmp	r0, r3
    3c20:	d04d      	beq.n	3cbe <_sercom_get_default_pad+0xaa>
    3c22:	4b3f      	ldr	r3, [pc, #252]	; (3d20 <_sercom_get_default_pad+0x10c>)
    3c24:	4298      	cmp	r0, r3
    3c26:	d05a      	beq.n	3cde <_sercom_get_default_pad+0xca>
    3c28:	4b3e      	ldr	r3, [pc, #248]	; (3d24 <_sercom_get_default_pad+0x110>)
    3c2a:	4298      	cmp	r0, r3
    3c2c:	d037      	beq.n	3c9e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    3c2e:	2000      	movs	r0, #0
}
    3c30:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    3c32:	4b3d      	ldr	r3, [pc, #244]	; (3d28 <_sercom_get_default_pad+0x114>)
    3c34:	4298      	cmp	r0, r3
    3c36:	d00c      	beq.n	3c52 <_sercom_get_default_pad+0x3e>
    3c38:	4b3c      	ldr	r3, [pc, #240]	; (3d2c <_sercom_get_default_pad+0x118>)
    3c3a:	4298      	cmp	r0, r3
    3c3c:	d1f7      	bne.n	3c2e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3c3e:	2901      	cmp	r1, #1
    3c40:	d017      	beq.n	3c72 <_sercom_get_default_pad+0x5e>
    3c42:	2900      	cmp	r1, #0
    3c44:	d05d      	beq.n	3d02 <_sercom_get_default_pad+0xee>
    3c46:	2902      	cmp	r1, #2
    3c48:	d015      	beq.n	3c76 <_sercom_get_default_pad+0x62>
    3c4a:	2903      	cmp	r1, #3
    3c4c:	d015      	beq.n	3c7a <_sercom_get_default_pad+0x66>
	return 0;
    3c4e:	2000      	movs	r0, #0
    3c50:	e7ee      	b.n	3c30 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3c52:	2901      	cmp	r1, #1
    3c54:	d007      	beq.n	3c66 <_sercom_get_default_pad+0x52>
    3c56:	2900      	cmp	r1, #0
    3c58:	d051      	beq.n	3cfe <_sercom_get_default_pad+0xea>
    3c5a:	2902      	cmp	r1, #2
    3c5c:	d005      	beq.n	3c6a <_sercom_get_default_pad+0x56>
    3c5e:	2903      	cmp	r1, #3
    3c60:	d005      	beq.n	3c6e <_sercom_get_default_pad+0x5a>
	return 0;
    3c62:	2000      	movs	r0, #0
    3c64:	e7e4      	b.n	3c30 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3c66:	4832      	ldr	r0, [pc, #200]	; (3d30 <_sercom_get_default_pad+0x11c>)
    3c68:	e7e2      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3c6a:	4832      	ldr	r0, [pc, #200]	; (3d34 <_sercom_get_default_pad+0x120>)
    3c6c:	e7e0      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3c6e:	4832      	ldr	r0, [pc, #200]	; (3d38 <_sercom_get_default_pad+0x124>)
    3c70:	e7de      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3c72:	4832      	ldr	r0, [pc, #200]	; (3d3c <_sercom_get_default_pad+0x128>)
    3c74:	e7dc      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3c76:	4832      	ldr	r0, [pc, #200]	; (3d40 <_sercom_get_default_pad+0x12c>)
    3c78:	e7da      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3c7a:	4832      	ldr	r0, [pc, #200]	; (3d44 <_sercom_get_default_pad+0x130>)
    3c7c:	e7d8      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3c7e:	2901      	cmp	r1, #1
    3c80:	d007      	beq.n	3c92 <_sercom_get_default_pad+0x7e>
    3c82:	2900      	cmp	r1, #0
    3c84:	d03f      	beq.n	3d06 <_sercom_get_default_pad+0xf2>
    3c86:	2902      	cmp	r1, #2
    3c88:	d005      	beq.n	3c96 <_sercom_get_default_pad+0x82>
    3c8a:	2903      	cmp	r1, #3
    3c8c:	d005      	beq.n	3c9a <_sercom_get_default_pad+0x86>
	return 0;
    3c8e:	2000      	movs	r0, #0
    3c90:	e7ce      	b.n	3c30 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3c92:	482d      	ldr	r0, [pc, #180]	; (3d48 <_sercom_get_default_pad+0x134>)
    3c94:	e7cc      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3c96:	482d      	ldr	r0, [pc, #180]	; (3d4c <_sercom_get_default_pad+0x138>)
    3c98:	e7ca      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3c9a:	482d      	ldr	r0, [pc, #180]	; (3d50 <_sercom_get_default_pad+0x13c>)
    3c9c:	e7c8      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3c9e:	2901      	cmp	r1, #1
    3ca0:	d007      	beq.n	3cb2 <_sercom_get_default_pad+0x9e>
    3ca2:	2900      	cmp	r1, #0
    3ca4:	d031      	beq.n	3d0a <_sercom_get_default_pad+0xf6>
    3ca6:	2902      	cmp	r1, #2
    3ca8:	d005      	beq.n	3cb6 <_sercom_get_default_pad+0xa2>
    3caa:	2903      	cmp	r1, #3
    3cac:	d005      	beq.n	3cba <_sercom_get_default_pad+0xa6>
	return 0;
    3cae:	2000      	movs	r0, #0
    3cb0:	e7be      	b.n	3c30 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3cb2:	4828      	ldr	r0, [pc, #160]	; (3d54 <_sercom_get_default_pad+0x140>)
    3cb4:	e7bc      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3cb6:	4828      	ldr	r0, [pc, #160]	; (3d58 <_sercom_get_default_pad+0x144>)
    3cb8:	e7ba      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3cba:	4828      	ldr	r0, [pc, #160]	; (3d5c <_sercom_get_default_pad+0x148>)
    3cbc:	e7b8      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3cbe:	2901      	cmp	r1, #1
    3cc0:	d007      	beq.n	3cd2 <_sercom_get_default_pad+0xbe>
    3cc2:	2900      	cmp	r1, #0
    3cc4:	d023      	beq.n	3d0e <_sercom_get_default_pad+0xfa>
    3cc6:	2902      	cmp	r1, #2
    3cc8:	d005      	beq.n	3cd6 <_sercom_get_default_pad+0xc2>
    3cca:	2903      	cmp	r1, #3
    3ccc:	d005      	beq.n	3cda <_sercom_get_default_pad+0xc6>
	return 0;
    3cce:	2000      	movs	r0, #0
    3cd0:	e7ae      	b.n	3c30 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3cd2:	4823      	ldr	r0, [pc, #140]	; (3d60 <_sercom_get_default_pad+0x14c>)
    3cd4:	e7ac      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3cd6:	4823      	ldr	r0, [pc, #140]	; (3d64 <_sercom_get_default_pad+0x150>)
    3cd8:	e7aa      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3cda:	4823      	ldr	r0, [pc, #140]	; (3d68 <_sercom_get_default_pad+0x154>)
    3cdc:	e7a8      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3cde:	2901      	cmp	r1, #1
    3ce0:	d007      	beq.n	3cf2 <_sercom_get_default_pad+0xde>
    3ce2:	2900      	cmp	r1, #0
    3ce4:	d015      	beq.n	3d12 <_sercom_get_default_pad+0xfe>
    3ce6:	2902      	cmp	r1, #2
    3ce8:	d005      	beq.n	3cf6 <_sercom_get_default_pad+0xe2>
    3cea:	2903      	cmp	r1, #3
    3cec:	d005      	beq.n	3cfa <_sercom_get_default_pad+0xe6>
	return 0;
    3cee:	2000      	movs	r0, #0
    3cf0:	e79e      	b.n	3c30 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3cf2:	481e      	ldr	r0, [pc, #120]	; (3d6c <_sercom_get_default_pad+0x158>)
    3cf4:	e79c      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3cf6:	481e      	ldr	r0, [pc, #120]	; (3d70 <_sercom_get_default_pad+0x15c>)
    3cf8:	e79a      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3cfa:	481e      	ldr	r0, [pc, #120]	; (3d74 <_sercom_get_default_pad+0x160>)
    3cfc:	e798      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3cfe:	481e      	ldr	r0, [pc, #120]	; (3d78 <_sercom_get_default_pad+0x164>)
    3d00:	e796      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3d02:	2003      	movs	r0, #3
    3d04:	e794      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3d06:	481d      	ldr	r0, [pc, #116]	; (3d7c <_sercom_get_default_pad+0x168>)
    3d08:	e792      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3d0a:	481d      	ldr	r0, [pc, #116]	; (3d80 <_sercom_get_default_pad+0x16c>)
    3d0c:	e790      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3d0e:	481d      	ldr	r0, [pc, #116]	; (3d84 <_sercom_get_default_pad+0x170>)
    3d10:	e78e      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3d12:	481d      	ldr	r0, [pc, #116]	; (3d88 <_sercom_get_default_pad+0x174>)
    3d14:	e78c      	b.n	3c30 <_sercom_get_default_pad+0x1c>
    3d16:	46c0      	nop			; (mov r8, r8)
    3d18:	42001000 	.word	0x42001000
    3d1c:	42001800 	.word	0x42001800
    3d20:	42001c00 	.word	0x42001c00
    3d24:	42001400 	.word	0x42001400
    3d28:	42000800 	.word	0x42000800
    3d2c:	42000c00 	.word	0x42000c00
    3d30:	00050003 	.word	0x00050003
    3d34:	00060003 	.word	0x00060003
    3d38:	00070003 	.word	0x00070003
    3d3c:	00010003 	.word	0x00010003
    3d40:	001e0003 	.word	0x001e0003
    3d44:	001f0003 	.word	0x001f0003
    3d48:	00090003 	.word	0x00090003
    3d4c:	000a0003 	.word	0x000a0003
    3d50:	000b0003 	.word	0x000b0003
    3d54:	00110003 	.word	0x00110003
    3d58:	00120003 	.word	0x00120003
    3d5c:	00130003 	.word	0x00130003
    3d60:	000d0003 	.word	0x000d0003
    3d64:	000e0003 	.word	0x000e0003
    3d68:	000f0003 	.word	0x000f0003
    3d6c:	00170003 	.word	0x00170003
    3d70:	00180003 	.word	0x00180003
    3d74:	00190003 	.word	0x00190003
    3d78:	00040003 	.word	0x00040003
    3d7c:	00080003 	.word	0x00080003
    3d80:	00100003 	.word	0x00100003
    3d84:	000c0003 	.word	0x000c0003
    3d88:	00160003 	.word	0x00160003

00003d8c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3d8c:	b530      	push	{r4, r5, lr}
    3d8e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3d90:	4b0b      	ldr	r3, [pc, #44]	; (3dc0 <_sercom_get_sercom_inst_index+0x34>)
    3d92:	466a      	mov	r2, sp
    3d94:	cb32      	ldmia	r3!, {r1, r4, r5}
    3d96:	c232      	stmia	r2!, {r1, r4, r5}
    3d98:	cb32      	ldmia	r3!, {r1, r4, r5}
    3d9a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3d9c:	9b00      	ldr	r3, [sp, #0]
    3d9e:	4283      	cmp	r3, r0
    3da0:	d00b      	beq.n	3dba <_sercom_get_sercom_inst_index+0x2e>
    3da2:	2301      	movs	r3, #1
    3da4:	009a      	lsls	r2, r3, #2
    3da6:	4669      	mov	r1, sp
    3da8:	5852      	ldr	r2, [r2, r1]
    3daa:	4282      	cmp	r2, r0
    3dac:	d006      	beq.n	3dbc <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3dae:	3301      	adds	r3, #1
    3db0:	2b06      	cmp	r3, #6
    3db2:	d1f7      	bne.n	3da4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3db4:	2000      	movs	r0, #0
}
    3db6:	b007      	add	sp, #28
    3db8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3dba:	2300      	movs	r3, #0
			return i;
    3dbc:	b2d8      	uxtb	r0, r3
    3dbe:	e7fa      	b.n	3db6 <_sercom_get_sercom_inst_index+0x2a>
    3dc0:	00008d44 	.word	0x00008d44

00003dc4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    3dc4:	4770      	bx	lr
	...

00003dc8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3dca:	4b0a      	ldr	r3, [pc, #40]	; (3df4 <_sercom_set_handler+0x2c>)
    3dcc:	781b      	ldrb	r3, [r3, #0]
    3dce:	2b00      	cmp	r3, #0
    3dd0:	d10c      	bne.n	3dec <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3dd2:	4f09      	ldr	r7, [pc, #36]	; (3df8 <_sercom_set_handler+0x30>)
    3dd4:	4e09      	ldr	r6, [pc, #36]	; (3dfc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    3dd6:	4d0a      	ldr	r5, [pc, #40]	; (3e00 <_sercom_set_handler+0x38>)
    3dd8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3dda:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    3ddc:	195a      	adds	r2, r3, r5
    3dde:	6014      	str	r4, [r2, #0]
    3de0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3de2:	2b18      	cmp	r3, #24
    3de4:	d1f9      	bne.n	3dda <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    3de6:	2201      	movs	r2, #1
    3de8:	4b02      	ldr	r3, [pc, #8]	; (3df4 <_sercom_set_handler+0x2c>)
    3dea:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3dec:	0080      	lsls	r0, r0, #2
    3dee:	4b02      	ldr	r3, [pc, #8]	; (3df8 <_sercom_set_handler+0x30>)
    3df0:	50c1      	str	r1, [r0, r3]
}
    3df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3df4:	20000a22 	.word	0x20000a22
    3df8:	20000a24 	.word	0x20000a24
    3dfc:	00003dc5 	.word	0x00003dc5
    3e00:	20000d40 	.word	0x20000d40

00003e04 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3e04:	b500      	push	{lr}
    3e06:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3e08:	2309      	movs	r3, #9
    3e0a:	466a      	mov	r2, sp
    3e0c:	7013      	strb	r3, [r2, #0]
    3e0e:	3301      	adds	r3, #1
    3e10:	7053      	strb	r3, [r2, #1]
    3e12:	3301      	adds	r3, #1
    3e14:	7093      	strb	r3, [r2, #2]
    3e16:	3301      	adds	r3, #1
    3e18:	70d3      	strb	r3, [r2, #3]
    3e1a:	3301      	adds	r3, #1
    3e1c:	7113      	strb	r3, [r2, #4]
    3e1e:	3301      	adds	r3, #1
    3e20:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3e22:	4b03      	ldr	r3, [pc, #12]	; (3e30 <_sercom_get_interrupt_vector+0x2c>)
    3e24:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3e26:	466b      	mov	r3, sp
    3e28:	5618      	ldrsb	r0, [r3, r0]
}
    3e2a:	b003      	add	sp, #12
    3e2c:	bd00      	pop	{pc}
    3e2e:	46c0      	nop			; (mov r8, r8)
    3e30:	00003d8d 	.word	0x00003d8d

00003e34 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3e34:	b510      	push	{r4, lr}
    3e36:	4b02      	ldr	r3, [pc, #8]	; (3e40 <SERCOM0_Handler+0xc>)
    3e38:	681b      	ldr	r3, [r3, #0]
    3e3a:	2000      	movs	r0, #0
    3e3c:	4798      	blx	r3
    3e3e:	bd10      	pop	{r4, pc}
    3e40:	20000a24 	.word	0x20000a24

00003e44 <SERCOM1_Handler>:
    3e44:	b510      	push	{r4, lr}
    3e46:	4b02      	ldr	r3, [pc, #8]	; (3e50 <SERCOM1_Handler+0xc>)
    3e48:	685b      	ldr	r3, [r3, #4]
    3e4a:	2001      	movs	r0, #1
    3e4c:	4798      	blx	r3
    3e4e:	bd10      	pop	{r4, pc}
    3e50:	20000a24 	.word	0x20000a24

00003e54 <SERCOM2_Handler>:
    3e54:	b510      	push	{r4, lr}
    3e56:	4b02      	ldr	r3, [pc, #8]	; (3e60 <SERCOM2_Handler+0xc>)
    3e58:	689b      	ldr	r3, [r3, #8]
    3e5a:	2002      	movs	r0, #2
    3e5c:	4798      	blx	r3
    3e5e:	bd10      	pop	{r4, pc}
    3e60:	20000a24 	.word	0x20000a24

00003e64 <SERCOM3_Handler>:
    3e64:	b510      	push	{r4, lr}
    3e66:	4b02      	ldr	r3, [pc, #8]	; (3e70 <SERCOM3_Handler+0xc>)
    3e68:	68db      	ldr	r3, [r3, #12]
    3e6a:	2003      	movs	r0, #3
    3e6c:	4798      	blx	r3
    3e6e:	bd10      	pop	{r4, pc}
    3e70:	20000a24 	.word	0x20000a24

00003e74 <SERCOM4_Handler>:
    3e74:	b510      	push	{r4, lr}
    3e76:	4b02      	ldr	r3, [pc, #8]	; (3e80 <SERCOM4_Handler+0xc>)
    3e78:	691b      	ldr	r3, [r3, #16]
    3e7a:	2004      	movs	r0, #4
    3e7c:	4798      	blx	r3
    3e7e:	bd10      	pop	{r4, pc}
    3e80:	20000a24 	.word	0x20000a24

00003e84 <SERCOM5_Handler>:
    3e84:	b510      	push	{r4, lr}
    3e86:	4b02      	ldr	r3, [pc, #8]	; (3e90 <SERCOM5_Handler+0xc>)
    3e88:	695b      	ldr	r3, [r3, #20]
    3e8a:	2005      	movs	r0, #5
    3e8c:	4798      	blx	r3
    3e8e:	bd10      	pop	{r4, pc}
    3e90:	20000a24 	.word	0x20000a24

00003e94 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e96:	46de      	mov	lr, fp
    3e98:	4657      	mov	r7, sl
    3e9a:	464e      	mov	r6, r9
    3e9c:	4645      	mov	r5, r8
    3e9e:	b5e0      	push	{r5, r6, r7, lr}
    3ea0:	b091      	sub	sp, #68	; 0x44
    3ea2:	0005      	movs	r5, r0
    3ea4:	000c      	movs	r4, r1
    3ea6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3ea8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3eaa:	0008      	movs	r0, r1
    3eac:	4bbb      	ldr	r3, [pc, #748]	; (419c <usart_init+0x308>)
    3eae:	4798      	blx	r3
    3eb0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3eb2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3eb4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3eb6:	07db      	lsls	r3, r3, #31
    3eb8:	d506      	bpl.n	3ec8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    3eba:	b011      	add	sp, #68	; 0x44
    3ebc:	bc3c      	pop	{r2, r3, r4, r5}
    3ebe:	4690      	mov	r8, r2
    3ec0:	4699      	mov	r9, r3
    3ec2:	46a2      	mov	sl, r4
    3ec4:	46ab      	mov	fp, r5
    3ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3ec8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    3eca:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3ecc:	079b      	lsls	r3, r3, #30
    3ece:	d4f4      	bmi.n	3eba <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    3ed0:	49b3      	ldr	r1, [pc, #716]	; (41a0 <usart_init+0x30c>)
    3ed2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3ed4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3ed6:	2301      	movs	r3, #1
    3ed8:	40bb      	lsls	r3, r7
    3eda:	4303      	orrs	r3, r0
    3edc:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    3ede:	a90f      	add	r1, sp, #60	; 0x3c
    3ee0:	272d      	movs	r7, #45	; 0x2d
    3ee2:	5df3      	ldrb	r3, [r6, r7]
    3ee4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3ee6:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3ee8:	b2d3      	uxtb	r3, r2
    3eea:	9302      	str	r3, [sp, #8]
    3eec:	0018      	movs	r0, r3
    3eee:	4bad      	ldr	r3, [pc, #692]	; (41a4 <usart_init+0x310>)
    3ef0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3ef2:	9802      	ldr	r0, [sp, #8]
    3ef4:	4bac      	ldr	r3, [pc, #688]	; (41a8 <usart_init+0x314>)
    3ef6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3ef8:	5df0      	ldrb	r0, [r6, r7]
    3efa:	2100      	movs	r1, #0
    3efc:	4bab      	ldr	r3, [pc, #684]	; (41ac <usart_init+0x318>)
    3efe:	4798      	blx	r3
	module->character_size = config->character_size;
    3f00:	7af3      	ldrb	r3, [r6, #11]
    3f02:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    3f04:	2324      	movs	r3, #36	; 0x24
    3f06:	5cf3      	ldrb	r3, [r6, r3]
    3f08:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    3f0a:	2325      	movs	r3, #37	; 0x25
    3f0c:	5cf3      	ldrb	r3, [r6, r3]
    3f0e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    3f10:	7ef3      	ldrb	r3, [r6, #27]
    3f12:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    3f14:	7f33      	ldrb	r3, [r6, #28]
    3f16:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3f18:	682b      	ldr	r3, [r5, #0]
    3f1a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3f1c:	0018      	movs	r0, r3
    3f1e:	4b9f      	ldr	r3, [pc, #636]	; (419c <usart_init+0x308>)
    3f20:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3f22:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    3f24:	2200      	movs	r2, #0
    3f26:	230e      	movs	r3, #14
    3f28:	a906      	add	r1, sp, #24
    3f2a:	468c      	mov	ip, r1
    3f2c:	4463      	add	r3, ip
    3f2e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    3f30:	8a32      	ldrh	r2, [r6, #16]
    3f32:	9202      	str	r2, [sp, #8]
    3f34:	2380      	movs	r3, #128	; 0x80
    3f36:	01db      	lsls	r3, r3, #7
    3f38:	429a      	cmp	r2, r3
    3f3a:	d100      	bne.n	3f3e <usart_init+0xaa>
    3f3c:	e09c      	b.n	4078 <usart_init+0x1e4>
    3f3e:	d90f      	bls.n	3f60 <usart_init+0xcc>
    3f40:	23c0      	movs	r3, #192	; 0xc0
    3f42:	01db      	lsls	r3, r3, #7
    3f44:	9a02      	ldr	r2, [sp, #8]
    3f46:	429a      	cmp	r2, r3
    3f48:	d100      	bne.n	3f4c <usart_init+0xb8>
    3f4a:	e090      	b.n	406e <usart_init+0x1da>
    3f4c:	2380      	movs	r3, #128	; 0x80
    3f4e:	021b      	lsls	r3, r3, #8
    3f50:	429a      	cmp	r2, r3
    3f52:	d000      	beq.n	3f56 <usart_init+0xc2>
    3f54:	e11d      	b.n	4192 <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    3f56:	2303      	movs	r3, #3
    3f58:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3f5a:	2300      	movs	r3, #0
    3f5c:	9307      	str	r3, [sp, #28]
    3f5e:	e008      	b.n	3f72 <usart_init+0xde>
	switch (config->sample_rate) {
    3f60:	2380      	movs	r3, #128	; 0x80
    3f62:	019b      	lsls	r3, r3, #6
    3f64:	429a      	cmp	r2, r3
    3f66:	d000      	beq.n	3f6a <usart_init+0xd6>
    3f68:	e113      	b.n	4192 <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3f6a:	2310      	movs	r3, #16
    3f6c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3f6e:	3b0f      	subs	r3, #15
    3f70:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    3f72:	6833      	ldr	r3, [r6, #0]
    3f74:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    3f76:	68f3      	ldr	r3, [r6, #12]
    3f78:	469b      	mov	fp, r3
		config->sample_adjustment |
    3f7a:	6973      	ldr	r3, [r6, #20]
    3f7c:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3f7e:	7e33      	ldrb	r3, [r6, #24]
    3f80:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3f82:	2326      	movs	r3, #38	; 0x26
    3f84:	5cf3      	ldrb	r3, [r6, r3]
    3f86:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    3f88:	6873      	ldr	r3, [r6, #4]
    3f8a:	4699      	mov	r9, r3
	switch (transfer_mode)
    3f8c:	2b00      	cmp	r3, #0
    3f8e:	d100      	bne.n	3f92 <usart_init+0xfe>
    3f90:	e09e      	b.n	40d0 <usart_init+0x23c>
    3f92:	2380      	movs	r3, #128	; 0x80
    3f94:	055b      	lsls	r3, r3, #21
    3f96:	4599      	cmp	r9, r3
    3f98:	d100      	bne.n	3f9c <usart_init+0x108>
    3f9a:	e082      	b.n	40a2 <usart_init+0x20e>
	if(config->encoding_format_enable) {
    3f9c:	7e73      	ldrb	r3, [r6, #25]
    3f9e:	2b00      	cmp	r3, #0
    3fa0:	d002      	beq.n	3fa8 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    3fa2:	7eb3      	ldrb	r3, [r6, #26]
    3fa4:	4642      	mov	r2, r8
    3fa6:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3fa8:	682a      	ldr	r2, [r5, #0]
    3faa:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    3fac:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3fae:	2b00      	cmp	r3, #0
    3fb0:	d1fc      	bne.n	3fac <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    3fb2:	330e      	adds	r3, #14
    3fb4:	aa06      	add	r2, sp, #24
    3fb6:	4694      	mov	ip, r2
    3fb8:	4463      	add	r3, ip
    3fba:	881b      	ldrh	r3, [r3, #0]
    3fbc:	4642      	mov	r2, r8
    3fbe:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    3fc0:	9b05      	ldr	r3, [sp, #20]
    3fc2:	465a      	mov	r2, fp
    3fc4:	4313      	orrs	r3, r2
    3fc6:	9a03      	ldr	r2, [sp, #12]
    3fc8:	4313      	orrs	r3, r2
    3fca:	464a      	mov	r2, r9
    3fcc:	4313      	orrs	r3, r2
    3fce:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3fd0:	9b04      	ldr	r3, [sp, #16]
    3fd2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    3fd4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3fd6:	4653      	mov	r3, sl
    3fd8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    3fda:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    3fdc:	2327      	movs	r3, #39	; 0x27
    3fde:	5cf3      	ldrb	r3, [r6, r3]
    3fe0:	2b00      	cmp	r3, #0
    3fe2:	d101      	bne.n	3fe8 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    3fe4:	3304      	adds	r3, #4
    3fe6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3fe8:	7e73      	ldrb	r3, [r6, #25]
    3fea:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3fec:	7f32      	ldrb	r2, [r6, #28]
    3fee:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3ff0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3ff2:	7f72      	ldrb	r2, [r6, #29]
    3ff4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3ff6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3ff8:	2224      	movs	r2, #36	; 0x24
    3ffa:	5cb2      	ldrb	r2, [r6, r2]
    3ffc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3ffe:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4000:	2225      	movs	r2, #37	; 0x25
    4002:	5cb2      	ldrb	r2, [r6, r2]
    4004:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4006:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    4008:	7af1      	ldrb	r1, [r6, #11]
    400a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    400c:	8933      	ldrh	r3, [r6, #8]
    400e:	2bff      	cmp	r3, #255	; 0xff
    4010:	d100      	bne.n	4014 <usart_init+0x180>
    4012:	e081      	b.n	4118 <usart_init+0x284>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4014:	2280      	movs	r2, #128	; 0x80
    4016:	0452      	lsls	r2, r2, #17
    4018:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    401a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    401c:	232c      	movs	r3, #44	; 0x2c
    401e:	5cf3      	ldrb	r3, [r6, r3]
    4020:	2b00      	cmp	r3, #0
    4022:	d103      	bne.n	402c <usart_init+0x198>
    4024:	4b62      	ldr	r3, [pc, #392]	; (41b0 <usart_init+0x31c>)
    4026:	789b      	ldrb	r3, [r3, #2]
    4028:	079b      	lsls	r3, r3, #30
    402a:	d501      	bpl.n	4030 <usart_init+0x19c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    402c:	2380      	movs	r3, #128	; 0x80
    402e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    4030:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4032:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4034:	2b00      	cmp	r3, #0
    4036:	d1fc      	bne.n	4032 <usart_init+0x19e>
	usart_hw->CTRLB.reg = ctrlb;
    4038:	4643      	mov	r3, r8
    403a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    403c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    403e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4040:	2b00      	cmp	r3, #0
    4042:	d1fc      	bne.n	403e <usart_init+0x1aa>
	usart_hw->CTRLA.reg = ctrla;
    4044:	4643      	mov	r3, r8
    4046:	601f      	str	r7, [r3, #0]
    4048:	ab0e      	add	r3, sp, #56	; 0x38
    404a:	2280      	movs	r2, #128	; 0x80
    404c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    404e:	2200      	movs	r2, #0
    4050:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    4052:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4054:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4056:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4058:	930a      	str	r3, [sp, #40]	; 0x28
    405a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    405c:	930b      	str	r3, [sp, #44]	; 0x2c
    405e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    4060:	930c      	str	r3, [sp, #48]	; 0x30
    4062:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    4064:	9302      	str	r3, [sp, #8]
    4066:	930d      	str	r3, [sp, #52]	; 0x34
    4068:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    406a:	ae0a      	add	r6, sp, #40	; 0x28
    406c:	e063      	b.n	4136 <usart_init+0x2a2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    406e:	2308      	movs	r3, #8
    4070:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4072:	3b07      	subs	r3, #7
    4074:	9307      	str	r3, [sp, #28]
    4076:	e77c      	b.n	3f72 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    4078:	6833      	ldr	r3, [r6, #0]
    407a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    407c:	68f3      	ldr	r3, [r6, #12]
    407e:	469b      	mov	fp, r3
		config->sample_adjustment |
    4080:	6973      	ldr	r3, [r6, #20]
    4082:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4084:	7e33      	ldrb	r3, [r6, #24]
    4086:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4088:	2326      	movs	r3, #38	; 0x26
    408a:	5cf3      	ldrb	r3, [r6, r3]
    408c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    408e:	6873      	ldr	r3, [r6, #4]
    4090:	4699      	mov	r9, r3
	switch (transfer_mode)
    4092:	2b00      	cmp	r3, #0
    4094:	d018      	beq.n	40c8 <usart_init+0x234>
    4096:	2380      	movs	r3, #128	; 0x80
    4098:	055b      	lsls	r3, r3, #21
    409a:	4599      	cmp	r9, r3
    409c:	d001      	beq.n	40a2 <usart_init+0x20e>
	enum status_code status_code = STATUS_OK;
    409e:	2000      	movs	r0, #0
    40a0:	e025      	b.n	40ee <usart_init+0x25a>
			if (!config->use_external_clock) {
    40a2:	2327      	movs	r3, #39	; 0x27
    40a4:	5cf3      	ldrb	r3, [r6, r3]
    40a6:	2b00      	cmp	r3, #0
    40a8:	d000      	beq.n	40ac <usart_init+0x218>
    40aa:	e777      	b.n	3f9c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    40ac:	6a33      	ldr	r3, [r6, #32]
    40ae:	001f      	movs	r7, r3
    40b0:	b2c0      	uxtb	r0, r0
    40b2:	4b40      	ldr	r3, [pc, #256]	; (41b4 <usart_init+0x320>)
    40b4:	4798      	blx	r3
    40b6:	0001      	movs	r1, r0
    40b8:	220e      	movs	r2, #14
    40ba:	ab06      	add	r3, sp, #24
    40bc:	469c      	mov	ip, r3
    40be:	4462      	add	r2, ip
    40c0:	0038      	movs	r0, r7
    40c2:	4b3d      	ldr	r3, [pc, #244]	; (41b8 <usart_init+0x324>)
    40c4:	4798      	blx	r3
    40c6:	e012      	b.n	40ee <usart_init+0x25a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    40c8:	2308      	movs	r3, #8
    40ca:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    40cc:	2300      	movs	r3, #0
    40ce:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    40d0:	2327      	movs	r3, #39	; 0x27
    40d2:	5cf3      	ldrb	r3, [r6, r3]
    40d4:	2b00      	cmp	r3, #0
    40d6:	d00e      	beq.n	40f6 <usart_init+0x262>
				status_code =
    40d8:	9b06      	ldr	r3, [sp, #24]
    40da:	9300      	str	r3, [sp, #0]
    40dc:	9b07      	ldr	r3, [sp, #28]
    40de:	220e      	movs	r2, #14
    40e0:	a906      	add	r1, sp, #24
    40e2:	468c      	mov	ip, r1
    40e4:	4462      	add	r2, ip
    40e6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    40e8:	6a30      	ldr	r0, [r6, #32]
    40ea:	4f34      	ldr	r7, [pc, #208]	; (41bc <usart_init+0x328>)
    40ec:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    40ee:	2800      	cmp	r0, #0
    40f0:	d000      	beq.n	40f4 <usart_init+0x260>
    40f2:	e6e2      	b.n	3eba <usart_init+0x26>
    40f4:	e752      	b.n	3f9c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    40f6:	6a33      	ldr	r3, [r6, #32]
    40f8:	001f      	movs	r7, r3
    40fa:	b2c0      	uxtb	r0, r0
    40fc:	4b2d      	ldr	r3, [pc, #180]	; (41b4 <usart_init+0x320>)
    40fe:	4798      	blx	r3
    4100:	0001      	movs	r1, r0
				status_code =
    4102:	9b06      	ldr	r3, [sp, #24]
    4104:	9300      	str	r3, [sp, #0]
    4106:	9b07      	ldr	r3, [sp, #28]
    4108:	220e      	movs	r2, #14
    410a:	a806      	add	r0, sp, #24
    410c:	4684      	mov	ip, r0
    410e:	4462      	add	r2, ip
    4110:	0038      	movs	r0, r7
    4112:	4f2a      	ldr	r7, [pc, #168]	; (41bc <usart_init+0x328>)
    4114:	47b8      	blx	r7
    4116:	e7ea      	b.n	40ee <usart_init+0x25a>
		if(config->lin_slave_enable) {
    4118:	7ef3      	ldrb	r3, [r6, #27]
    411a:	2b00      	cmp	r3, #0
    411c:	d100      	bne.n	4120 <usart_init+0x28c>
    411e:	e77d      	b.n	401c <usart_init+0x188>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    4120:	2380      	movs	r3, #128	; 0x80
    4122:	04db      	lsls	r3, r3, #19
    4124:	431f      	orrs	r7, r3
    4126:	e779      	b.n	401c <usart_init+0x188>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4128:	0020      	movs	r0, r4
    412a:	4b25      	ldr	r3, [pc, #148]	; (41c0 <usart_init+0x32c>)
    412c:	4798      	blx	r3
    412e:	e007      	b.n	4140 <usart_init+0x2ac>
    4130:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4132:	2f04      	cmp	r7, #4
    4134:	d00d      	beq.n	4152 <usart_init+0x2be>
    4136:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4138:	00bb      	lsls	r3, r7, #2
    413a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    413c:	2800      	cmp	r0, #0
    413e:	d0f3      	beq.n	4128 <usart_init+0x294>
		if (current_pinmux != PINMUX_UNUSED) {
    4140:	1c43      	adds	r3, r0, #1
    4142:	d0f5      	beq.n	4130 <usart_init+0x29c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4144:	a90e      	add	r1, sp, #56	; 0x38
    4146:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4148:	0c00      	lsrs	r0, r0, #16
    414a:	b2c0      	uxtb	r0, r0
    414c:	4b1d      	ldr	r3, [pc, #116]	; (41c4 <usart_init+0x330>)
    414e:	4798      	blx	r3
    4150:	e7ee      	b.n	4130 <usart_init+0x29c>
		module->callback[i]            = NULL;
    4152:	2300      	movs	r3, #0
    4154:	60eb      	str	r3, [r5, #12]
    4156:	612b      	str	r3, [r5, #16]
    4158:	616b      	str	r3, [r5, #20]
    415a:	61ab      	str	r3, [r5, #24]
    415c:	61eb      	str	r3, [r5, #28]
    415e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    4160:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    4162:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4164:	2200      	movs	r2, #0
    4166:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    4168:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    416a:	3330      	adds	r3, #48	; 0x30
    416c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    416e:	3301      	adds	r3, #1
    4170:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    4172:	3301      	adds	r3, #1
    4174:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    4176:	3301      	adds	r3, #1
    4178:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    417a:	6828      	ldr	r0, [r5, #0]
    417c:	4b07      	ldr	r3, [pc, #28]	; (419c <usart_init+0x308>)
    417e:	4798      	blx	r3
    4180:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    4182:	4911      	ldr	r1, [pc, #68]	; (41c8 <usart_init+0x334>)
    4184:	4b11      	ldr	r3, [pc, #68]	; (41cc <usart_init+0x338>)
    4186:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4188:	00a4      	lsls	r4, r4, #2
    418a:	4b11      	ldr	r3, [pc, #68]	; (41d0 <usart_init+0x33c>)
    418c:	50e5      	str	r5, [r4, r3]
	return status_code;
    418e:	2000      	movs	r0, #0
    4190:	e693      	b.n	3eba <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4192:	2310      	movs	r3, #16
    4194:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4196:	2300      	movs	r3, #0
    4198:	9307      	str	r3, [sp, #28]
    419a:	e6ea      	b.n	3f72 <usart_init+0xde>
    419c:	00003d8d 	.word	0x00003d8d
    41a0:	40000400 	.word	0x40000400
    41a4:	000048fd 	.word	0x000048fd
    41a8:	00004871 	.word	0x00004871
    41ac:	00003bc9 	.word	0x00003bc9
    41b0:	41002000 	.word	0x41002000
    41b4:	00004919 	.word	0x00004919
    41b8:	000039d1 	.word	0x000039d1
    41bc:	000039f9 	.word	0x000039f9
    41c0:	00003c15 	.word	0x00003c15
    41c4:	00004a25 	.word	0x00004a25
    41c8:	00004311 	.word	0x00004311
    41cc:	00003dc9 	.word	0x00003dc9
    41d0:	20000d40 	.word	0x20000d40

000041d4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    41d4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    41d6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    41d8:	2a00      	cmp	r2, #0
    41da:	d101      	bne.n	41e0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    41dc:	0018      	movs	r0, r3
    41de:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    41e0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    41e2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    41e4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    41e6:	2a00      	cmp	r2, #0
    41e8:	d1f8      	bne.n	41dc <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    41ea:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    41ec:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    41ee:	2a00      	cmp	r2, #0
    41f0:	d1fc      	bne.n	41ec <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    41f2:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    41f4:	2102      	movs	r1, #2
    41f6:	7e1a      	ldrb	r2, [r3, #24]
    41f8:	420a      	tst	r2, r1
    41fa:	d0fc      	beq.n	41f6 <usart_write_wait+0x22>
	return STATUS_OK;
    41fc:	2300      	movs	r3, #0
    41fe:	e7ed      	b.n	41dc <usart_write_wait+0x8>

00004200 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4200:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    4202:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    4204:	2a00      	cmp	r2, #0
    4206:	d101      	bne.n	420c <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    4208:	0018      	movs	r0, r3
    420a:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    420c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    420e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4210:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    4212:	2a00      	cmp	r2, #0
    4214:	d1f8      	bne.n	4208 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4216:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    4218:	7e10      	ldrb	r0, [r2, #24]
    421a:	0740      	lsls	r0, r0, #29
    421c:	d5f4      	bpl.n	4208 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    421e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4220:	2b00      	cmp	r3, #0
    4222:	d1fc      	bne.n	421e <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4224:	8b53      	ldrh	r3, [r2, #26]
    4226:	b2db      	uxtb	r3, r3
	if (error_code) {
    4228:	0698      	lsls	r0, r3, #26
    422a:	d021      	beq.n	4270 <usart_read_wait+0x70>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    422c:	0798      	lsls	r0, r3, #30
    422e:	d503      	bpl.n	4238 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4230:	2302      	movs	r3, #2
    4232:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    4234:	3318      	adds	r3, #24
    4236:	e7e7      	b.n	4208 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4238:	0758      	lsls	r0, r3, #29
    423a:	d503      	bpl.n	4244 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    423c:	2304      	movs	r3, #4
    423e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    4240:	331a      	adds	r3, #26
    4242:	e7e1      	b.n	4208 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4244:	07d8      	lsls	r0, r3, #31
    4246:	d503      	bpl.n	4250 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4248:	2301      	movs	r3, #1
    424a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    424c:	3312      	adds	r3, #18
    424e:	e7db      	b.n	4208 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    4250:	06d8      	lsls	r0, r3, #27
    4252:	d505      	bpl.n	4260 <usart_read_wait+0x60>
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    4254:	8b53      	ldrh	r3, [r2, #26]
    4256:	2110      	movs	r1, #16
    4258:	430b      	orrs	r3, r1
    425a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    425c:	2342      	movs	r3, #66	; 0x42
    425e:	e7d3      	b.n	4208 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4260:	069b      	lsls	r3, r3, #26
    4262:	d505      	bpl.n	4270 <usart_read_wait+0x70>
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    4264:	8b53      	ldrh	r3, [r2, #26]
    4266:	2120      	movs	r1, #32
    4268:	430b      	orrs	r3, r1
    426a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    426c:	2341      	movs	r3, #65	; 0x41
    426e:	e7cb      	b.n	4208 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    4270:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4272:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    4274:	2300      	movs	r3, #0
    4276:	e7c7      	b.n	4208 <usart_read_wait+0x8>

00004278 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    4278:	b5f0      	push	{r4, r5, r6, r7, lr}
    427a:	46d6      	mov	lr, sl
    427c:	b500      	push	{lr}
    427e:	b084      	sub	sp, #16
    4280:	0004      	movs	r4, r0
    4282:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    4284:	2017      	movs	r0, #23
	if (length == 0) {
    4286:	2a00      	cmp	r2, #0
    4288:	d103      	bne.n	4292 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    428a:	b004      	add	sp, #16
    428c:	bc04      	pop	{r2}
    428e:	4692      	mov	sl, r2
    4290:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    4292:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    4294:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    4296:	2b00      	cmp	r3, #0
    4298:	d0f7      	beq.n	428a <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    429a:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    429c:	3a01      	subs	r2, #1
    429e:	b293      	uxth	r3, r2
    42a0:	469a      	mov	sl, r3
    42a2:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    42a4:	2704      	movs	r7, #4
    42a6:	e019      	b.n	42dc <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    42a8:	2300      	movs	r3, #0
    42aa:	aa02      	add	r2, sp, #8
    42ac:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    42ae:	1d91      	adds	r1, r2, #6
    42b0:	0020      	movs	r0, r4
    42b2:	4b15      	ldr	r3, [pc, #84]	; (4308 <usart_read_buffer_wait+0x90>)
    42b4:	4798      	blx	r3
		if (retval != STATUS_OK) {
    42b6:	2800      	cmp	r0, #0
    42b8:	d1e7      	bne.n	428a <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    42ba:	1c69      	adds	r1, r5, #1
    42bc:	b289      	uxth	r1, r1
    42be:	ab02      	add	r3, sp, #8
    42c0:	88db      	ldrh	r3, [r3, #6]
    42c2:	9a01      	ldr	r2, [sp, #4]
    42c4:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    42c6:	7962      	ldrb	r2, [r4, #5]
    42c8:	2a01      	cmp	r2, #1
    42ca:	d014      	beq.n	42f6 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    42cc:	000d      	movs	r5, r1
	while (length--) {
    42ce:	4653      	mov	r3, sl
    42d0:	3b01      	subs	r3, #1
    42d2:	b29b      	uxth	r3, r3
    42d4:	469a      	mov	sl, r3
    42d6:	4b0d      	ldr	r3, [pc, #52]	; (430c <usart_read_buffer_wait+0x94>)
    42d8:	459a      	cmp	sl, r3
    42da:	d0d6      	beq.n	428a <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    42dc:	7e33      	ldrb	r3, [r6, #24]
    42de:	423b      	tst	r3, r7
    42e0:	d1e2      	bne.n	42a8 <usart_read_buffer_wait+0x30>
    42e2:	4b0a      	ldr	r3, [pc, #40]	; (430c <usart_read_buffer_wait+0x94>)
    42e4:	7e32      	ldrb	r2, [r6, #24]
    42e6:	423a      	tst	r2, r7
    42e8:	d1de      	bne.n	42a8 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    42ea:	2b01      	cmp	r3, #1
    42ec:	d009      	beq.n	4302 <usart_read_buffer_wait+0x8a>
    42ee:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    42f0:	2b00      	cmp	r3, #0
    42f2:	d1f7      	bne.n	42e4 <usart_read_buffer_wait+0x6c>
    42f4:	e7d8      	b.n	42a8 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    42f6:	3502      	adds	r5, #2
    42f8:	b2ad      	uxth	r5, r5
    42fa:	0a1b      	lsrs	r3, r3, #8
    42fc:	9a01      	ldr	r2, [sp, #4]
    42fe:	5453      	strb	r3, [r2, r1]
    4300:	e7e5      	b.n	42ce <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    4302:	2012      	movs	r0, #18
    4304:	e7c1      	b.n	428a <usart_read_buffer_wait+0x12>
    4306:	46c0      	nop			; (mov r8, r8)
    4308:	00004201 	.word	0x00004201
    430c:	0000ffff 	.word	0x0000ffff

00004310 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    4312:	0080      	lsls	r0, r0, #2
    4314:	4b67      	ldr	r3, [pc, #412]	; (44b4 <_usart_interrupt_handler+0x1a4>)
    4316:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4318:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    431a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    431c:	2b00      	cmp	r3, #0
    431e:	d1fc      	bne.n	431a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    4320:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    4322:	7da6      	ldrb	r6, [r4, #22]
    4324:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    4326:	2330      	movs	r3, #48	; 0x30
    4328:	5ceb      	ldrb	r3, [r5, r3]
    432a:	2231      	movs	r2, #49	; 0x31
    432c:	5caf      	ldrb	r7, [r5, r2]
    432e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    4330:	07f3      	lsls	r3, r6, #31
    4332:	d522      	bpl.n	437a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    4334:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4336:	b29b      	uxth	r3, r3
    4338:	2b00      	cmp	r3, #0
    433a:	d01c      	beq.n	4376 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    433c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    433e:	7813      	ldrb	r3, [r2, #0]
    4340:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    4342:	1c51      	adds	r1, r2, #1
    4344:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4346:	7969      	ldrb	r1, [r5, #5]
    4348:	2901      	cmp	r1, #1
    434a:	d00e      	beq.n	436a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    434c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    434e:	05db      	lsls	r3, r3, #23
    4350:	0ddb      	lsrs	r3, r3, #23
    4352:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    4354:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4356:	3b01      	subs	r3, #1
    4358:	b29b      	uxth	r3, r3
    435a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    435c:	2b00      	cmp	r3, #0
    435e:	d10c      	bne.n	437a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4360:	3301      	adds	r3, #1
    4362:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4364:	3301      	adds	r3, #1
    4366:	75a3      	strb	r3, [r4, #22]
    4368:	e007      	b.n	437a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    436a:	7851      	ldrb	r1, [r2, #1]
    436c:	0209      	lsls	r1, r1, #8
    436e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    4370:	3202      	adds	r2, #2
    4372:	62aa      	str	r2, [r5, #40]	; 0x28
    4374:	e7eb      	b.n	434e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4376:	2301      	movs	r3, #1
    4378:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    437a:	07b3      	lsls	r3, r6, #30
    437c:	d506      	bpl.n	438c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    437e:	2302      	movs	r3, #2
    4380:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    4382:	2200      	movs	r2, #0
    4384:	3331      	adds	r3, #49	; 0x31
    4386:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4388:	07fb      	lsls	r3, r7, #31
    438a:	d41c      	bmi.n	43c6 <_usart_interrupt_handler+0xb6>

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    438c:	0773      	lsls	r3, r6, #29
    438e:	d56f      	bpl.n	4470 <_usart_interrupt_handler+0x160>

		if (module->remaining_rx_buffer_length) {
    4390:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4392:	b29b      	uxth	r3, r3
    4394:	2b00      	cmp	r3, #0
    4396:	d069      	beq.n	446c <_usart_interrupt_handler+0x15c>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4398:	8b63      	ldrh	r3, [r4, #26]
    439a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    439c:	071a      	lsls	r2, r3, #28
    439e:	d416      	bmi.n	43ce <_usart_interrupt_handler+0xbe>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    43a0:	223f      	movs	r2, #63	; 0x3f
    43a2:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    43a4:	2b00      	cmp	r3, #0
    43a6:	d03e      	beq.n	4426 <_usart_interrupt_handler+0x116>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    43a8:	079a      	lsls	r2, r3, #30
    43aa:	d513      	bpl.n	43d4 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    43ac:	221a      	movs	r2, #26
    43ae:	2332      	movs	r3, #50	; 0x32
    43b0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    43b2:	8b63      	ldrh	r3, [r4, #26]
    43b4:	3a18      	subs	r2, #24
    43b6:	4313      	orrs	r3, r2
    43b8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    43ba:	077b      	lsls	r3, r7, #29
    43bc:	d558      	bpl.n	4470 <_usart_interrupt_handler+0x160>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    43be:	0028      	movs	r0, r5
    43c0:	696b      	ldr	r3, [r5, #20]
    43c2:	4798      	blx	r3
    43c4:	e054      	b.n	4470 <_usart_interrupt_handler+0x160>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    43c6:	0028      	movs	r0, r5
    43c8:	68eb      	ldr	r3, [r5, #12]
    43ca:	4798      	blx	r3
    43cc:	e7de      	b.n	438c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    43ce:	2237      	movs	r2, #55	; 0x37
    43d0:	4013      	ands	r3, r2
    43d2:	e7e7      	b.n	43a4 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    43d4:	075a      	lsls	r2, r3, #29
    43d6:	d507      	bpl.n	43e8 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    43d8:	221e      	movs	r2, #30
    43da:	2332      	movs	r3, #50	; 0x32
    43dc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    43de:	8b63      	ldrh	r3, [r4, #26]
    43e0:	3a1a      	subs	r2, #26
    43e2:	4313      	orrs	r3, r2
    43e4:	8363      	strh	r3, [r4, #26]
    43e6:	e7e8      	b.n	43ba <_usart_interrupt_handler+0xaa>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    43e8:	07da      	lsls	r2, r3, #31
    43ea:	d507      	bpl.n	43fc <_usart_interrupt_handler+0xec>
					module->rx_status = STATUS_ERR_BAD_DATA;
    43ec:	2213      	movs	r2, #19
    43ee:	2332      	movs	r3, #50	; 0x32
    43f0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    43f2:	8b63      	ldrh	r3, [r4, #26]
    43f4:	3a12      	subs	r2, #18
    43f6:	4313      	orrs	r3, r2
    43f8:	8363      	strh	r3, [r4, #26]
    43fa:	e7de      	b.n	43ba <_usart_interrupt_handler+0xaa>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    43fc:	06da      	lsls	r2, r3, #27
    43fe:	d507      	bpl.n	4410 <_usart_interrupt_handler+0x100>
					module->rx_status = STATUS_ERR_PROTOCOL;
    4400:	2242      	movs	r2, #66	; 0x42
    4402:	2332      	movs	r3, #50	; 0x32
    4404:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    4406:	8b63      	ldrh	r3, [r4, #26]
    4408:	3a32      	subs	r2, #50	; 0x32
    440a:	4313      	orrs	r3, r2
    440c:	8363      	strh	r3, [r4, #26]
    440e:	e7d4      	b.n	43ba <_usart_interrupt_handler+0xaa>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    4410:	2220      	movs	r2, #32
    4412:	421a      	tst	r2, r3
    4414:	d0d1      	beq.n	43ba <_usart_interrupt_handler+0xaa>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    4416:	3221      	adds	r2, #33	; 0x21
    4418:	2332      	movs	r3, #50	; 0x32
    441a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    441c:	8b63      	ldrh	r3, [r4, #26]
    441e:	3a21      	subs	r2, #33	; 0x21
    4420:	4313      	orrs	r3, r2
    4422:	8363      	strh	r3, [r4, #26]
    4424:	e7c9      	b.n	43ba <_usart_interrupt_handler+0xaa>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    4426:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    4428:	05db      	lsls	r3, r3, #23
    442a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    442c:	b2da      	uxtb	r2, r3
    442e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    4430:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    4432:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    4434:	1c51      	adds	r1, r2, #1
    4436:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4438:	7969      	ldrb	r1, [r5, #5]
    443a:	2901      	cmp	r1, #1
    443c:	d010      	beq.n	4460 <_usart_interrupt_handler+0x150>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    443e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4440:	3b01      	subs	r3, #1
    4442:	b29b      	uxth	r3, r3
    4444:	85ab      	strh	r3, [r5, #44]	; 0x2c
    4446:	2b00      	cmp	r3, #0
    4448:	d112      	bne.n	4470 <_usart_interrupt_handler+0x160>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    444a:	3304      	adds	r3, #4
    444c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    444e:	2200      	movs	r2, #0
    4450:	332e      	adds	r3, #46	; 0x2e
    4452:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    4454:	07bb      	lsls	r3, r7, #30
    4456:	d50b      	bpl.n	4470 <_usart_interrupt_handler+0x160>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    4458:	0028      	movs	r0, r5
    445a:	692b      	ldr	r3, [r5, #16]
    445c:	4798      	blx	r3
    445e:	e007      	b.n	4470 <_usart_interrupt_handler+0x160>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    4460:	0a1b      	lsrs	r3, r3, #8
    4462:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    4464:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4466:	3301      	adds	r3, #1
    4468:	626b      	str	r3, [r5, #36]	; 0x24
    446a:	e7e8      	b.n	443e <_usart_interrupt_handler+0x12e>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    446c:	2304      	movs	r3, #4
    446e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    4470:	06f3      	lsls	r3, r6, #27
    4472:	d504      	bpl.n	447e <_usart_interrupt_handler+0x16e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4474:	2310      	movs	r3, #16
    4476:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4478:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    447a:	06fb      	lsls	r3, r7, #27
    447c:	d40e      	bmi.n	449c <_usart_interrupt_handler+0x18c>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    447e:	06b3      	lsls	r3, r6, #26
    4480:	d504      	bpl.n	448c <_usart_interrupt_handler+0x17c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    4482:	2320      	movs	r3, #32
    4484:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    4486:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    4488:	073b      	lsls	r3, r7, #28
    448a:	d40b      	bmi.n	44a4 <_usart_interrupt_handler+0x194>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    448c:	0733      	lsls	r3, r6, #28
    448e:	d504      	bpl.n	449a <_usart_interrupt_handler+0x18a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    4490:	2308      	movs	r3, #8
    4492:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4494:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    4496:	06bb      	lsls	r3, r7, #26
    4498:	d408      	bmi.n	44ac <_usart_interrupt_handler+0x19c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    449a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    449c:	0028      	movs	r0, r5
    449e:	69eb      	ldr	r3, [r5, #28]
    44a0:	4798      	blx	r3
    44a2:	e7ec      	b.n	447e <_usart_interrupt_handler+0x16e>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    44a4:	0028      	movs	r0, r5
    44a6:	69ab      	ldr	r3, [r5, #24]
    44a8:	4798      	blx	r3
    44aa:	e7ef      	b.n	448c <_usart_interrupt_handler+0x17c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    44ac:	6a2b      	ldr	r3, [r5, #32]
    44ae:	0028      	movs	r0, r5
    44b0:	4798      	blx	r3
}
    44b2:	e7f2      	b.n	449a <_usart_interrupt_handler+0x18a>
    44b4:	20000d40 	.word	0x20000d40

000044b8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    44b8:	b510      	push	{r4, lr}
	switch (clock_source) {
    44ba:	2808      	cmp	r0, #8
    44bc:	d803      	bhi.n	44c6 <system_clock_source_get_hz+0xe>
    44be:	0080      	lsls	r0, r0, #2
    44c0:	4b1b      	ldr	r3, [pc, #108]	; (4530 <system_clock_source_get_hz+0x78>)
    44c2:	581b      	ldr	r3, [r3, r0]
    44c4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    44c6:	2000      	movs	r0, #0
    44c8:	e030      	b.n	452c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    44ca:	4b1a      	ldr	r3, [pc, #104]	; (4534 <system_clock_source_get_hz+0x7c>)
    44cc:	6918      	ldr	r0, [r3, #16]
    44ce:	e02d      	b.n	452c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    44d0:	4b19      	ldr	r3, [pc, #100]	; (4538 <system_clock_source_get_hz+0x80>)
    44d2:	6a1b      	ldr	r3, [r3, #32]
    44d4:	059b      	lsls	r3, r3, #22
    44d6:	0f9b      	lsrs	r3, r3, #30
    44d8:	4818      	ldr	r0, [pc, #96]	; (453c <system_clock_source_get_hz+0x84>)
    44da:	40d8      	lsrs	r0, r3
    44dc:	e026      	b.n	452c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    44de:	4b15      	ldr	r3, [pc, #84]	; (4534 <system_clock_source_get_hz+0x7c>)
    44e0:	6958      	ldr	r0, [r3, #20]
    44e2:	e023      	b.n	452c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    44e4:	4b13      	ldr	r3, [pc, #76]	; (4534 <system_clock_source_get_hz+0x7c>)
    44e6:	681b      	ldr	r3, [r3, #0]
			return 0;
    44e8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    44ea:	079b      	lsls	r3, r3, #30
    44ec:	d51e      	bpl.n	452c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    44ee:	4912      	ldr	r1, [pc, #72]	; (4538 <system_clock_source_get_hz+0x80>)
    44f0:	2210      	movs	r2, #16
    44f2:	68cb      	ldr	r3, [r1, #12]
    44f4:	421a      	tst	r2, r3
    44f6:	d0fc      	beq.n	44f2 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    44f8:	4b0e      	ldr	r3, [pc, #56]	; (4534 <system_clock_source_get_hz+0x7c>)
    44fa:	681b      	ldr	r3, [r3, #0]
    44fc:	075b      	lsls	r3, r3, #29
    44fe:	d401      	bmi.n	4504 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    4500:	480f      	ldr	r0, [pc, #60]	; (4540 <system_clock_source_get_hz+0x88>)
    4502:	e013      	b.n	452c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4504:	2000      	movs	r0, #0
    4506:	4b0f      	ldr	r3, [pc, #60]	; (4544 <system_clock_source_get_hz+0x8c>)
    4508:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    450a:	4b0a      	ldr	r3, [pc, #40]	; (4534 <system_clock_source_get_hz+0x7c>)
    450c:	689b      	ldr	r3, [r3, #8]
    450e:	041b      	lsls	r3, r3, #16
    4510:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4512:	4358      	muls	r0, r3
    4514:	e00a      	b.n	452c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4516:	2350      	movs	r3, #80	; 0x50
    4518:	4a07      	ldr	r2, [pc, #28]	; (4538 <system_clock_source_get_hz+0x80>)
    451a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    451c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    451e:	075b      	lsls	r3, r3, #29
    4520:	d504      	bpl.n	452c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    4522:	4b04      	ldr	r3, [pc, #16]	; (4534 <system_clock_source_get_hz+0x7c>)
    4524:	68d8      	ldr	r0, [r3, #12]
    4526:	e001      	b.n	452c <system_clock_source_get_hz+0x74>
		return 32768UL;
    4528:	2080      	movs	r0, #128	; 0x80
    452a:	0200      	lsls	r0, r0, #8
	}
}
    452c:	bd10      	pop	{r4, pc}
    452e:	46c0      	nop			; (mov r8, r8)
    4530:	00008d5c 	.word	0x00008d5c
    4534:	20000a3c 	.word	0x20000a3c
    4538:	40000800 	.word	0x40000800
    453c:	007a1200 	.word	0x007a1200
    4540:	02dc6c00 	.word	0x02dc6c00
    4544:	00004919 	.word	0x00004919

00004548 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4548:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    454a:	490c      	ldr	r1, [pc, #48]	; (457c <system_clock_source_osc8m_set_config+0x34>)
    454c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    454e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4550:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    4552:	7840      	ldrb	r0, [r0, #1]
    4554:	2201      	movs	r2, #1
    4556:	4010      	ands	r0, r2
    4558:	0180      	lsls	r0, r0, #6
    455a:	2640      	movs	r6, #64	; 0x40
    455c:	43b3      	bics	r3, r6
    455e:	4303      	orrs	r3, r0
    4560:	402a      	ands	r2, r5
    4562:	01d2      	lsls	r2, r2, #7
    4564:	2080      	movs	r0, #128	; 0x80
    4566:	4383      	bics	r3, r0
    4568:	4313      	orrs	r3, r2
    456a:	2203      	movs	r2, #3
    456c:	4022      	ands	r2, r4
    456e:	0212      	lsls	r2, r2, #8
    4570:	4803      	ldr	r0, [pc, #12]	; (4580 <system_clock_source_osc8m_set_config+0x38>)
    4572:	4003      	ands	r3, r0
    4574:	4313      	orrs	r3, r2
    4576:	620b      	str	r3, [r1, #32]
}
    4578:	bd70      	pop	{r4, r5, r6, pc}
    457a:	46c0      	nop			; (mov r8, r8)
    457c:	40000800 	.word	0x40000800
    4580:	fffffcff 	.word	0xfffffcff

00004584 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4584:	2808      	cmp	r0, #8
    4586:	d803      	bhi.n	4590 <system_clock_source_enable+0xc>
    4588:	0080      	lsls	r0, r0, #2
    458a:	4b25      	ldr	r3, [pc, #148]	; (4620 <system_clock_source_enable+0x9c>)
    458c:	581b      	ldr	r3, [r3, r0]
    458e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4590:	2017      	movs	r0, #23
    4592:	e044      	b.n	461e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4594:	4a23      	ldr	r2, [pc, #140]	; (4624 <system_clock_source_enable+0xa0>)
    4596:	6a13      	ldr	r3, [r2, #32]
    4598:	2102      	movs	r1, #2
    459a:	430b      	orrs	r3, r1
    459c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    459e:	2000      	movs	r0, #0
    45a0:	e03d      	b.n	461e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    45a2:	4a20      	ldr	r2, [pc, #128]	; (4624 <system_clock_source_enable+0xa0>)
    45a4:	6993      	ldr	r3, [r2, #24]
    45a6:	2102      	movs	r1, #2
    45a8:	430b      	orrs	r3, r1
    45aa:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    45ac:	2000      	movs	r0, #0
		break;
    45ae:	e036      	b.n	461e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    45b0:	4a1c      	ldr	r2, [pc, #112]	; (4624 <system_clock_source_enable+0xa0>)
    45b2:	8a13      	ldrh	r3, [r2, #16]
    45b4:	2102      	movs	r1, #2
    45b6:	430b      	orrs	r3, r1
    45b8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    45ba:	2000      	movs	r0, #0
		break;
    45bc:	e02f      	b.n	461e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    45be:	4a19      	ldr	r2, [pc, #100]	; (4624 <system_clock_source_enable+0xa0>)
    45c0:	8a93      	ldrh	r3, [r2, #20]
    45c2:	2102      	movs	r1, #2
    45c4:	430b      	orrs	r3, r1
    45c6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    45c8:	2000      	movs	r0, #0
		break;
    45ca:	e028      	b.n	461e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    45cc:	4916      	ldr	r1, [pc, #88]	; (4628 <system_clock_source_enable+0xa4>)
    45ce:	680b      	ldr	r3, [r1, #0]
    45d0:	2202      	movs	r2, #2
    45d2:	4313      	orrs	r3, r2
    45d4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    45d6:	4b13      	ldr	r3, [pc, #76]	; (4624 <system_clock_source_enable+0xa0>)
    45d8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    45da:	0019      	movs	r1, r3
    45dc:	320e      	adds	r2, #14
    45de:	68cb      	ldr	r3, [r1, #12]
    45e0:	421a      	tst	r2, r3
    45e2:	d0fc      	beq.n	45de <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    45e4:	4a10      	ldr	r2, [pc, #64]	; (4628 <system_clock_source_enable+0xa4>)
    45e6:	6891      	ldr	r1, [r2, #8]
    45e8:	4b0e      	ldr	r3, [pc, #56]	; (4624 <system_clock_source_enable+0xa0>)
    45ea:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    45ec:	6852      	ldr	r2, [r2, #4]
    45ee:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    45f0:	2200      	movs	r2, #0
    45f2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    45f4:	0019      	movs	r1, r3
    45f6:	3210      	adds	r2, #16
    45f8:	68cb      	ldr	r3, [r1, #12]
    45fa:	421a      	tst	r2, r3
    45fc:	d0fc      	beq.n	45f8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    45fe:	4b0a      	ldr	r3, [pc, #40]	; (4628 <system_clock_source_enable+0xa4>)
    4600:	681b      	ldr	r3, [r3, #0]
    4602:	b29b      	uxth	r3, r3
    4604:	4a07      	ldr	r2, [pc, #28]	; (4624 <system_clock_source_enable+0xa0>)
    4606:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    4608:	2000      	movs	r0, #0
    460a:	e008      	b.n	461e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    460c:	4905      	ldr	r1, [pc, #20]	; (4624 <system_clock_source_enable+0xa0>)
    460e:	2244      	movs	r2, #68	; 0x44
    4610:	5c8b      	ldrb	r3, [r1, r2]
    4612:	2002      	movs	r0, #2
    4614:	4303      	orrs	r3, r0
    4616:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    4618:	2000      	movs	r0, #0
		break;
    461a:	e000      	b.n	461e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    461c:	2000      	movs	r0, #0
}
    461e:	4770      	bx	lr
    4620:	00008d80 	.word	0x00008d80
    4624:	40000800 	.word	0x40000800
    4628:	20000a3c 	.word	0x20000a3c

0000462c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    462c:	b530      	push	{r4, r5, lr}
    462e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4630:	22c2      	movs	r2, #194	; 0xc2
    4632:	00d2      	lsls	r2, r2, #3
    4634:	4b1a      	ldr	r3, [pc, #104]	; (46a0 <system_clock_init+0x74>)
    4636:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4638:	4a1a      	ldr	r2, [pc, #104]	; (46a4 <system_clock_init+0x78>)
    463a:	6853      	ldr	r3, [r2, #4]
    463c:	211e      	movs	r1, #30
    463e:	438b      	bics	r3, r1
    4640:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    4642:	2301      	movs	r3, #1
    4644:	466a      	mov	r2, sp
    4646:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4648:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    464a:	4d17      	ldr	r5, [pc, #92]	; (46a8 <system_clock_init+0x7c>)
    464c:	b2e0      	uxtb	r0, r4
    464e:	4669      	mov	r1, sp
    4650:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4652:	3401      	adds	r4, #1
    4654:	2c25      	cmp	r4, #37	; 0x25
    4656:	d1f9      	bne.n	464c <system_clock_init+0x20>
	config->run_in_standby  = false;
    4658:	a803      	add	r0, sp, #12
    465a:	2400      	movs	r4, #0
    465c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    465e:	2501      	movs	r5, #1
    4660:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4662:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4664:	4b11      	ldr	r3, [pc, #68]	; (46ac <system_clock_init+0x80>)
    4666:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4668:	2006      	movs	r0, #6
    466a:	4b11      	ldr	r3, [pc, #68]	; (46b0 <system_clock_init+0x84>)
    466c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    466e:	4b11      	ldr	r3, [pc, #68]	; (46b4 <system_clock_init+0x88>)
    4670:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    4672:	4b11      	ldr	r3, [pc, #68]	; (46b8 <system_clock_init+0x8c>)
    4674:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    4676:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    4678:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    467a:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    467c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    467e:	466b      	mov	r3, sp
    4680:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4682:	2306      	movs	r3, #6
    4684:	466a      	mov	r2, sp
    4686:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    4688:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    468a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    468c:	4669      	mov	r1, sp
    468e:	2000      	movs	r0, #0
    4690:	4b0a      	ldr	r3, [pc, #40]	; (46bc <system_clock_init+0x90>)
    4692:	4798      	blx	r3
    4694:	2000      	movs	r0, #0
    4696:	4b0a      	ldr	r3, [pc, #40]	; (46c0 <system_clock_init+0x94>)
    4698:	4798      	blx	r3
#endif
}
    469a:	b005      	add	sp, #20
    469c:	bd30      	pop	{r4, r5, pc}
    469e:	46c0      	nop			; (mov r8, r8)
    46a0:	40000800 	.word	0x40000800
    46a4:	41004000 	.word	0x41004000
    46a8:	000048fd 	.word	0x000048fd
    46ac:	00004549 	.word	0x00004549
    46b0:	00004585 	.word	0x00004585
    46b4:	000046c5 	.word	0x000046c5
    46b8:	40000400 	.word	0x40000400
    46bc:	000046e9 	.word	0x000046e9
    46c0:	000047a1 	.word	0x000047a1

000046c4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    46c4:	4a06      	ldr	r2, [pc, #24]	; (46e0 <system_gclk_init+0x1c>)
    46c6:	6993      	ldr	r3, [r2, #24]
    46c8:	2108      	movs	r1, #8
    46ca:	430b      	orrs	r3, r1
    46cc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    46ce:	2201      	movs	r2, #1
    46d0:	4b04      	ldr	r3, [pc, #16]	; (46e4 <system_gclk_init+0x20>)
    46d2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    46d4:	0019      	movs	r1, r3
    46d6:	780b      	ldrb	r3, [r1, #0]
    46d8:	4213      	tst	r3, r2
    46da:	d1fc      	bne.n	46d6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    46dc:	4770      	bx	lr
    46de:	46c0      	nop			; (mov r8, r8)
    46e0:	40000400 	.word	0x40000400
    46e4:	40000c00 	.word	0x40000c00

000046e8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    46e8:	b570      	push	{r4, r5, r6, lr}
    46ea:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    46ec:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    46ee:	780d      	ldrb	r5, [r1, #0]
    46f0:	022d      	lsls	r5, r5, #8
    46f2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    46f4:	784b      	ldrb	r3, [r1, #1]
    46f6:	2b00      	cmp	r3, #0
    46f8:	d002      	beq.n	4700 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    46fa:	2380      	movs	r3, #128	; 0x80
    46fc:	02db      	lsls	r3, r3, #11
    46fe:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4700:	7a4b      	ldrb	r3, [r1, #9]
    4702:	2b00      	cmp	r3, #0
    4704:	d002      	beq.n	470c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4706:	2380      	movs	r3, #128	; 0x80
    4708:	031b      	lsls	r3, r3, #12
    470a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    470c:	6848      	ldr	r0, [r1, #4]
    470e:	2801      	cmp	r0, #1
    4710:	d910      	bls.n	4734 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4712:	1e43      	subs	r3, r0, #1
    4714:	4218      	tst	r0, r3
    4716:	d134      	bne.n	4782 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4718:	2802      	cmp	r0, #2
    471a:	d930      	bls.n	477e <system_gclk_gen_set_config+0x96>
    471c:	2302      	movs	r3, #2
    471e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    4720:	3201      	adds	r2, #1
						mask <<= 1) {
    4722:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    4724:	4298      	cmp	r0, r3
    4726:	d8fb      	bhi.n	4720 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4728:	0212      	lsls	r2, r2, #8
    472a:	4332      	orrs	r2, r6
    472c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    472e:	2380      	movs	r3, #128	; 0x80
    4730:	035b      	lsls	r3, r3, #13
    4732:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4734:	7a0b      	ldrb	r3, [r1, #8]
    4736:	2b00      	cmp	r3, #0
    4738:	d002      	beq.n	4740 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    473a:	2380      	movs	r3, #128	; 0x80
    473c:	039b      	lsls	r3, r3, #14
    473e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4740:	4a13      	ldr	r2, [pc, #76]	; (4790 <system_gclk_gen_set_config+0xa8>)
    4742:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    4744:	b25b      	sxtb	r3, r3
    4746:	2b00      	cmp	r3, #0
    4748:	dbfb      	blt.n	4742 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    474a:	4b12      	ldr	r3, [pc, #72]	; (4794 <system_gclk_gen_set_config+0xac>)
    474c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    474e:	4b12      	ldr	r3, [pc, #72]	; (4798 <system_gclk_gen_set_config+0xb0>)
    4750:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4752:	4a0f      	ldr	r2, [pc, #60]	; (4790 <system_gclk_gen_set_config+0xa8>)
    4754:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4756:	b25b      	sxtb	r3, r3
    4758:	2b00      	cmp	r3, #0
    475a:	dbfb      	blt.n	4754 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    475c:	4b0c      	ldr	r3, [pc, #48]	; (4790 <system_gclk_gen_set_config+0xa8>)
    475e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4760:	001a      	movs	r2, r3
    4762:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    4764:	b25b      	sxtb	r3, r3
    4766:	2b00      	cmp	r3, #0
    4768:	dbfb      	blt.n	4762 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    476a:	4a09      	ldr	r2, [pc, #36]	; (4790 <system_gclk_gen_set_config+0xa8>)
    476c:	6853      	ldr	r3, [r2, #4]
    476e:	2180      	movs	r1, #128	; 0x80
    4770:	0249      	lsls	r1, r1, #9
    4772:	400b      	ands	r3, r1
    4774:	431d      	orrs	r5, r3
    4776:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    4778:	4b08      	ldr	r3, [pc, #32]	; (479c <system_gclk_gen_set_config+0xb4>)
    477a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    477c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    477e:	2200      	movs	r2, #0
    4780:	e7d2      	b.n	4728 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4782:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    4784:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4786:	2380      	movs	r3, #128	; 0x80
    4788:	029b      	lsls	r3, r3, #10
    478a:	431d      	orrs	r5, r3
    478c:	e7d2      	b.n	4734 <system_gclk_gen_set_config+0x4c>
    478e:	46c0      	nop			; (mov r8, r8)
    4790:	40000c00 	.word	0x40000c00
    4794:	0000382d 	.word	0x0000382d
    4798:	40000c08 	.word	0x40000c08
    479c:	0000386d 	.word	0x0000386d

000047a0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    47a0:	b510      	push	{r4, lr}
    47a2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    47a4:	4a0b      	ldr	r2, [pc, #44]	; (47d4 <system_gclk_gen_enable+0x34>)
    47a6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    47a8:	b25b      	sxtb	r3, r3
    47aa:	2b00      	cmp	r3, #0
    47ac:	dbfb      	blt.n	47a6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    47ae:	4b0a      	ldr	r3, [pc, #40]	; (47d8 <system_gclk_gen_enable+0x38>)
    47b0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    47b2:	4b0a      	ldr	r3, [pc, #40]	; (47dc <system_gclk_gen_enable+0x3c>)
    47b4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    47b6:	4a07      	ldr	r2, [pc, #28]	; (47d4 <system_gclk_gen_enable+0x34>)
    47b8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    47ba:	b25b      	sxtb	r3, r3
    47bc:	2b00      	cmp	r3, #0
    47be:	dbfb      	blt.n	47b8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    47c0:	4a04      	ldr	r2, [pc, #16]	; (47d4 <system_gclk_gen_enable+0x34>)
    47c2:	6851      	ldr	r1, [r2, #4]
    47c4:	2380      	movs	r3, #128	; 0x80
    47c6:	025b      	lsls	r3, r3, #9
    47c8:	430b      	orrs	r3, r1
    47ca:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    47cc:	4b04      	ldr	r3, [pc, #16]	; (47e0 <system_gclk_gen_enable+0x40>)
    47ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    47d0:	bd10      	pop	{r4, pc}
    47d2:	46c0      	nop			; (mov r8, r8)
    47d4:	40000c00 	.word	0x40000c00
    47d8:	0000382d 	.word	0x0000382d
    47dc:	40000c04 	.word	0x40000c04
    47e0:	0000386d 	.word	0x0000386d

000047e4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    47e4:	b570      	push	{r4, r5, r6, lr}
    47e6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    47e8:	4a1a      	ldr	r2, [pc, #104]	; (4854 <system_gclk_gen_get_hz+0x70>)
    47ea:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    47ec:	b25b      	sxtb	r3, r3
    47ee:	2b00      	cmp	r3, #0
    47f0:	dbfb      	blt.n	47ea <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    47f2:	4b19      	ldr	r3, [pc, #100]	; (4858 <system_gclk_gen_get_hz+0x74>)
    47f4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    47f6:	4b19      	ldr	r3, [pc, #100]	; (485c <system_gclk_gen_get_hz+0x78>)
    47f8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    47fa:	4a16      	ldr	r2, [pc, #88]	; (4854 <system_gclk_gen_get_hz+0x70>)
    47fc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    47fe:	b25b      	sxtb	r3, r3
    4800:	2b00      	cmp	r3, #0
    4802:	dbfb      	blt.n	47fc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4804:	4e13      	ldr	r6, [pc, #76]	; (4854 <system_gclk_gen_get_hz+0x70>)
    4806:	6870      	ldr	r0, [r6, #4]
    4808:	04c0      	lsls	r0, r0, #19
    480a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    480c:	4b14      	ldr	r3, [pc, #80]	; (4860 <system_gclk_gen_get_hz+0x7c>)
    480e:	4798      	blx	r3
    4810:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4812:	4b12      	ldr	r3, [pc, #72]	; (485c <system_gclk_gen_get_hz+0x78>)
    4814:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4816:	6876      	ldr	r6, [r6, #4]
    4818:	02f6      	lsls	r6, r6, #11
    481a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    481c:	4b11      	ldr	r3, [pc, #68]	; (4864 <system_gclk_gen_get_hz+0x80>)
    481e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4820:	4a0c      	ldr	r2, [pc, #48]	; (4854 <system_gclk_gen_get_hz+0x70>)
    4822:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4824:	b25b      	sxtb	r3, r3
    4826:	2b00      	cmp	r3, #0
    4828:	dbfb      	blt.n	4822 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    482a:	4b0a      	ldr	r3, [pc, #40]	; (4854 <system_gclk_gen_get_hz+0x70>)
    482c:	689c      	ldr	r4, [r3, #8]
    482e:	0224      	lsls	r4, r4, #8
    4830:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    4832:	4b0d      	ldr	r3, [pc, #52]	; (4868 <system_gclk_gen_get_hz+0x84>)
    4834:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4836:	2e00      	cmp	r6, #0
    4838:	d107      	bne.n	484a <system_gclk_gen_get_hz+0x66>
    483a:	2c01      	cmp	r4, #1
    483c:	d907      	bls.n	484e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    483e:	0021      	movs	r1, r4
    4840:	0028      	movs	r0, r5
    4842:	4b0a      	ldr	r3, [pc, #40]	; (486c <system_gclk_gen_get_hz+0x88>)
    4844:	4798      	blx	r3
    4846:	0005      	movs	r5, r0
    4848:	e001      	b.n	484e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    484a:	3401      	adds	r4, #1
    484c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    484e:	0028      	movs	r0, r5
    4850:	bd70      	pop	{r4, r5, r6, pc}
    4852:	46c0      	nop			; (mov r8, r8)
    4854:	40000c00 	.word	0x40000c00
    4858:	0000382d 	.word	0x0000382d
    485c:	40000c04 	.word	0x40000c04
    4860:	000044b9 	.word	0x000044b9
    4864:	40000c08 	.word	0x40000c08
    4868:	0000386d 	.word	0x0000386d
    486c:	00004d7d 	.word	0x00004d7d

00004870 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4870:	b510      	push	{r4, lr}
    4872:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4874:	4b06      	ldr	r3, [pc, #24]	; (4890 <system_gclk_chan_enable+0x20>)
    4876:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4878:	4b06      	ldr	r3, [pc, #24]	; (4894 <system_gclk_chan_enable+0x24>)
    487a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    487c:	4a06      	ldr	r2, [pc, #24]	; (4898 <system_gclk_chan_enable+0x28>)
    487e:	8853      	ldrh	r3, [r2, #2]
    4880:	2180      	movs	r1, #128	; 0x80
    4882:	01c9      	lsls	r1, r1, #7
    4884:	430b      	orrs	r3, r1
    4886:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    4888:	4b04      	ldr	r3, [pc, #16]	; (489c <system_gclk_chan_enable+0x2c>)
    488a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    488c:	bd10      	pop	{r4, pc}
    488e:	46c0      	nop			; (mov r8, r8)
    4890:	0000382d 	.word	0x0000382d
    4894:	40000c02 	.word	0x40000c02
    4898:	40000c00 	.word	0x40000c00
    489c:	0000386d 	.word	0x0000386d

000048a0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    48a0:	b510      	push	{r4, lr}
    48a2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    48a4:	4b0f      	ldr	r3, [pc, #60]	; (48e4 <system_gclk_chan_disable+0x44>)
    48a6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    48a8:	4b0f      	ldr	r3, [pc, #60]	; (48e8 <system_gclk_chan_disable+0x48>)
    48aa:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    48ac:	4a0f      	ldr	r2, [pc, #60]	; (48ec <system_gclk_chan_disable+0x4c>)
    48ae:	8853      	ldrh	r3, [r2, #2]
    48b0:	051b      	lsls	r3, r3, #20
    48b2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    48b4:	8853      	ldrh	r3, [r2, #2]
    48b6:	490e      	ldr	r1, [pc, #56]	; (48f0 <system_gclk_chan_disable+0x50>)
    48b8:	400b      	ands	r3, r1
    48ba:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    48bc:	8853      	ldrh	r3, [r2, #2]
    48be:	490d      	ldr	r1, [pc, #52]	; (48f4 <system_gclk_chan_disable+0x54>)
    48c0:	400b      	ands	r3, r1
    48c2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    48c4:	0011      	movs	r1, r2
    48c6:	2280      	movs	r2, #128	; 0x80
    48c8:	01d2      	lsls	r2, r2, #7
    48ca:	884b      	ldrh	r3, [r1, #2]
    48cc:	4213      	tst	r3, r2
    48ce:	d1fc      	bne.n	48ca <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    48d0:	4906      	ldr	r1, [pc, #24]	; (48ec <system_gclk_chan_disable+0x4c>)
    48d2:	884a      	ldrh	r2, [r1, #2]
    48d4:	0203      	lsls	r3, r0, #8
    48d6:	4806      	ldr	r0, [pc, #24]	; (48f0 <system_gclk_chan_disable+0x50>)
    48d8:	4002      	ands	r2, r0
    48da:	4313      	orrs	r3, r2
    48dc:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    48de:	4b06      	ldr	r3, [pc, #24]	; (48f8 <system_gclk_chan_disable+0x58>)
    48e0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    48e2:	bd10      	pop	{r4, pc}
    48e4:	0000382d 	.word	0x0000382d
    48e8:	40000c02 	.word	0x40000c02
    48ec:	40000c00 	.word	0x40000c00
    48f0:	fffff0ff 	.word	0xfffff0ff
    48f4:	ffffbfff 	.word	0xffffbfff
    48f8:	0000386d 	.word	0x0000386d

000048fc <system_gclk_chan_set_config>:
{
    48fc:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    48fe:	780c      	ldrb	r4, [r1, #0]
    4900:	0224      	lsls	r4, r4, #8
    4902:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    4904:	4b02      	ldr	r3, [pc, #8]	; (4910 <system_gclk_chan_set_config+0x14>)
    4906:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4908:	b2a4      	uxth	r4, r4
    490a:	4b02      	ldr	r3, [pc, #8]	; (4914 <system_gclk_chan_set_config+0x18>)
    490c:	805c      	strh	r4, [r3, #2]
}
    490e:	bd10      	pop	{r4, pc}
    4910:	000048a1 	.word	0x000048a1
    4914:	40000c00 	.word	0x40000c00

00004918 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4918:	b510      	push	{r4, lr}
    491a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    491c:	4b06      	ldr	r3, [pc, #24]	; (4938 <system_gclk_chan_get_hz+0x20>)
    491e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4920:	4b06      	ldr	r3, [pc, #24]	; (493c <system_gclk_chan_get_hz+0x24>)
    4922:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4924:	4b06      	ldr	r3, [pc, #24]	; (4940 <system_gclk_chan_get_hz+0x28>)
    4926:	885c      	ldrh	r4, [r3, #2]
    4928:	0524      	lsls	r4, r4, #20
    492a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    492c:	4b05      	ldr	r3, [pc, #20]	; (4944 <system_gclk_chan_get_hz+0x2c>)
    492e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4930:	0020      	movs	r0, r4
    4932:	4b05      	ldr	r3, [pc, #20]	; (4948 <system_gclk_chan_get_hz+0x30>)
    4934:	4798      	blx	r3
}
    4936:	bd10      	pop	{r4, pc}
    4938:	0000382d 	.word	0x0000382d
    493c:	40000c02 	.word	0x40000c02
    4940:	40000c00 	.word	0x40000c00
    4944:	0000386d 	.word	0x0000386d
    4948:	000047e5 	.word	0x000047e5

0000494c <system_interrupt_clear_pending>:
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    494c:	2800      	cmp	r0, #0
    494e:	db08      	blt.n	4962 <system_interrupt_clear_pending+0x16>
		NVIC->ICPR[0] = (1 << vector);
    4950:	2301      	movs	r3, #1
    4952:	4083      	lsls	r3, r0
    4954:	22c0      	movs	r2, #192	; 0xc0
    4956:	0052      	lsls	r2, r2, #1
    4958:	4906      	ldr	r1, [pc, #24]	; (4974 <system_interrupt_clear_pending+0x28>)
    495a:	508b      	str	r3, [r1, r2]
	enum status_code status = STATUS_OK;
    495c:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    495e:	0018      	movs	r0, r3
    4960:	4770      	bx	lr
		status = STATUS_ERR_INVALID_ARG;
    4962:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    4964:	1c42      	adds	r2, r0, #1
    4966:	d1fa      	bne.n	495e <system_interrupt_clear_pending+0x12>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
    4968:	2280      	movs	r2, #128	; 0x80
    496a:	0492      	lsls	r2, r2, #18
    496c:	4b02      	ldr	r3, [pc, #8]	; (4978 <system_interrupt_clear_pending+0x2c>)
    496e:	605a      	str	r2, [r3, #4]
	enum status_code status = STATUS_OK;
    4970:	2300      	movs	r3, #0
    4972:	e7f4      	b.n	495e <system_interrupt_clear_pending+0x12>
    4974:	e000e100 	.word	0xe000e100
    4978:	e000ed00 	.word	0xe000ed00

0000497c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    497c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    497e:	78d3      	ldrb	r3, [r2, #3]
    4980:	2b00      	cmp	r3, #0
    4982:	d135      	bne.n	49f0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4984:	7813      	ldrb	r3, [r2, #0]
    4986:	2b80      	cmp	r3, #128	; 0x80
    4988:	d029      	beq.n	49de <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    498a:	061b      	lsls	r3, r3, #24
    498c:	2480      	movs	r4, #128	; 0x80
    498e:	0264      	lsls	r4, r4, #9
    4990:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4992:	7854      	ldrb	r4, [r2, #1]
    4994:	2502      	movs	r5, #2
    4996:	43ac      	bics	r4, r5
    4998:	d106      	bne.n	49a8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    499a:	7894      	ldrb	r4, [r2, #2]
    499c:	2c00      	cmp	r4, #0
    499e:	d120      	bne.n	49e2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    49a0:	2480      	movs	r4, #128	; 0x80
    49a2:	02a4      	lsls	r4, r4, #10
    49a4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    49a6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    49a8:	7854      	ldrb	r4, [r2, #1]
    49aa:	3c01      	subs	r4, #1
    49ac:	2c01      	cmp	r4, #1
    49ae:	d91c      	bls.n	49ea <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    49b0:	040d      	lsls	r5, r1, #16
    49b2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    49b4:	24a0      	movs	r4, #160	; 0xa0
    49b6:	05e4      	lsls	r4, r4, #23
    49b8:	432c      	orrs	r4, r5
    49ba:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    49bc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    49be:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    49c0:	24d0      	movs	r4, #208	; 0xd0
    49c2:	0624      	lsls	r4, r4, #24
    49c4:	432c      	orrs	r4, r5
    49c6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    49c8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    49ca:	78d4      	ldrb	r4, [r2, #3]
    49cc:	2c00      	cmp	r4, #0
    49ce:	d122      	bne.n	4a16 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    49d0:	035b      	lsls	r3, r3, #13
    49d2:	d51c      	bpl.n	4a0e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    49d4:	7893      	ldrb	r3, [r2, #2]
    49d6:	2b01      	cmp	r3, #1
    49d8:	d01e      	beq.n	4a18 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    49da:	6141      	str	r1, [r0, #20]
    49dc:	e017      	b.n	4a0e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    49de:	2300      	movs	r3, #0
    49e0:	e7d7      	b.n	4992 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    49e2:	24c0      	movs	r4, #192	; 0xc0
    49e4:	02e4      	lsls	r4, r4, #11
    49e6:	4323      	orrs	r3, r4
    49e8:	e7dd      	b.n	49a6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    49ea:	4c0d      	ldr	r4, [pc, #52]	; (4a20 <_system_pinmux_config+0xa4>)
    49ec:	4023      	ands	r3, r4
    49ee:	e7df      	b.n	49b0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    49f0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    49f2:	040c      	lsls	r4, r1, #16
    49f4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    49f6:	23a0      	movs	r3, #160	; 0xa0
    49f8:	05db      	lsls	r3, r3, #23
    49fa:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    49fc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    49fe:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4a00:	23d0      	movs	r3, #208	; 0xd0
    4a02:	061b      	lsls	r3, r3, #24
    4a04:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4a06:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    4a08:	78d3      	ldrb	r3, [r2, #3]
    4a0a:	2b00      	cmp	r3, #0
    4a0c:	d103      	bne.n	4a16 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4a0e:	7853      	ldrb	r3, [r2, #1]
    4a10:	3b01      	subs	r3, #1
    4a12:	2b01      	cmp	r3, #1
    4a14:	d902      	bls.n	4a1c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    4a16:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    4a18:	6181      	str	r1, [r0, #24]
    4a1a:	e7f8      	b.n	4a0e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    4a1c:	6081      	str	r1, [r0, #8]
}
    4a1e:	e7fa      	b.n	4a16 <_system_pinmux_config+0x9a>
    4a20:	fffbffff 	.word	0xfffbffff

00004a24 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4a24:	b510      	push	{r4, lr}
    4a26:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4a28:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4a2a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4a2c:	2900      	cmp	r1, #0
    4a2e:	d104      	bne.n	4a3a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    4a30:	0943      	lsrs	r3, r0, #5
    4a32:	01db      	lsls	r3, r3, #7
    4a34:	4905      	ldr	r1, [pc, #20]	; (4a4c <system_pinmux_pin_set_config+0x28>)
    4a36:	468c      	mov	ip, r1
    4a38:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4a3a:	241f      	movs	r4, #31
    4a3c:	4020      	ands	r0, r4
    4a3e:	2101      	movs	r1, #1
    4a40:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    4a42:	0018      	movs	r0, r3
    4a44:	4b02      	ldr	r3, [pc, #8]	; (4a50 <system_pinmux_pin_set_config+0x2c>)
    4a46:	4798      	blx	r3
}
    4a48:	bd10      	pop	{r4, pc}
    4a4a:	46c0      	nop			; (mov r8, r8)
    4a4c:	41004400 	.word	0x41004400
    4a50:	0000497d 	.word	0x0000497d

00004a54 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4a54:	4770      	bx	lr
	...

00004a58 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4a58:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4a5a:	4b05      	ldr	r3, [pc, #20]	; (4a70 <system_init+0x18>)
    4a5c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4a5e:	4b05      	ldr	r3, [pc, #20]	; (4a74 <system_init+0x1c>)
    4a60:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4a62:	4b05      	ldr	r3, [pc, #20]	; (4a78 <system_init+0x20>)
    4a64:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4a66:	4b05      	ldr	r3, [pc, #20]	; (4a7c <system_init+0x24>)
    4a68:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4a6a:	4b05      	ldr	r3, [pc, #20]	; (4a80 <system_init+0x28>)
    4a6c:	4798      	blx	r3
}
    4a6e:	bd10      	pop	{r4, pc}
    4a70:	0000462d 	.word	0x0000462d
    4a74:	0000389d 	.word	0x0000389d
    4a78:	00004a55 	.word	0x00004a55
    4a7c:	00003941 	.word	0x00003941
    4a80:	00004a55 	.word	0x00004a55

00004a84 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    4a84:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    4a86:	0080      	lsls	r0, r0, #2
    4a88:	4b16      	ldr	r3, [pc, #88]	; (4ae4 <_tc_interrupt_handler+0x60>)
    4a8a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    4a8c:	6823      	ldr	r3, [r4, #0]
    4a8e:	7b9d      	ldrb	r5, [r3, #14]
    4a90:	7e22      	ldrb	r2, [r4, #24]
    4a92:	7e63      	ldrb	r3, [r4, #25]
    4a94:	4013      	ands	r3, r2
    4a96:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    4a98:	07eb      	lsls	r3, r5, #31
    4a9a:	d406      	bmi.n	4aaa <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    4a9c:	07ab      	lsls	r3, r5, #30
    4a9e:	d40b      	bmi.n	4ab8 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    4aa0:	06eb      	lsls	r3, r5, #27
    4aa2:	d410      	bmi.n	4ac6 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    4aa4:	06ab      	lsls	r3, r5, #26
    4aa6:	d415      	bmi.n	4ad4 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    4aa8:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    4aaa:	0020      	movs	r0, r4
    4aac:	68a3      	ldr	r3, [r4, #8]
    4aae:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    4ab0:	2301      	movs	r3, #1
    4ab2:	6822      	ldr	r2, [r4, #0]
    4ab4:	7393      	strb	r3, [r2, #14]
    4ab6:	e7f1      	b.n	4a9c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    4ab8:	0020      	movs	r0, r4
    4aba:	68e3      	ldr	r3, [r4, #12]
    4abc:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    4abe:	2302      	movs	r3, #2
    4ac0:	6822      	ldr	r2, [r4, #0]
    4ac2:	7393      	strb	r3, [r2, #14]
    4ac4:	e7ec      	b.n	4aa0 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    4ac6:	0020      	movs	r0, r4
    4ac8:	6923      	ldr	r3, [r4, #16]
    4aca:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    4acc:	2310      	movs	r3, #16
    4ace:	6822      	ldr	r2, [r4, #0]
    4ad0:	7393      	strb	r3, [r2, #14]
    4ad2:	e7e7      	b.n	4aa4 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    4ad4:	0020      	movs	r0, r4
    4ad6:	6963      	ldr	r3, [r4, #20]
    4ad8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    4ada:	6823      	ldr	r3, [r4, #0]
    4adc:	2220      	movs	r2, #32
    4ade:	739a      	strb	r2, [r3, #14]
}
    4ae0:	e7e2      	b.n	4aa8 <_tc_interrupt_handler+0x24>
    4ae2:	46c0      	nop			; (mov r8, r8)
    4ae4:	20000d58 	.word	0x20000d58

00004ae8 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    4ae8:	b510      	push	{r4, lr}
    4aea:	2000      	movs	r0, #0
    4aec:	4b01      	ldr	r3, [pc, #4]	; (4af4 <TC3_Handler+0xc>)
    4aee:	4798      	blx	r3
    4af0:	bd10      	pop	{r4, pc}
    4af2:	46c0      	nop			; (mov r8, r8)
    4af4:	00004a85 	.word	0x00004a85

00004af8 <TC4_Handler>:
    4af8:	b510      	push	{r4, lr}
    4afa:	2001      	movs	r0, #1
    4afc:	4b01      	ldr	r3, [pc, #4]	; (4b04 <TC4_Handler+0xc>)
    4afe:	4798      	blx	r3
    4b00:	bd10      	pop	{r4, pc}
    4b02:	46c0      	nop			; (mov r8, r8)
    4b04:	00004a85 	.word	0x00004a85

00004b08 <TC5_Handler>:
    4b08:	b510      	push	{r4, lr}
    4b0a:	2002      	movs	r0, #2
    4b0c:	4b01      	ldr	r3, [pc, #4]	; (4b14 <TC5_Handler+0xc>)
    4b0e:	4798      	blx	r3
    4b10:	bd10      	pop	{r4, pc}
    4b12:	46c0      	nop			; (mov r8, r8)
    4b14:	00004a85 	.word	0x00004a85

00004b18 <TC6_Handler>:
    4b18:	b510      	push	{r4, lr}
    4b1a:	2003      	movs	r0, #3
    4b1c:	4b01      	ldr	r3, [pc, #4]	; (4b24 <TC6_Handler+0xc>)
    4b1e:	4798      	blx	r3
    4b20:	bd10      	pop	{r4, pc}
    4b22:	46c0      	nop			; (mov r8, r8)
    4b24:	00004a85 	.word	0x00004a85

00004b28 <TC7_Handler>:
    4b28:	b510      	push	{r4, lr}
    4b2a:	2004      	movs	r0, #4
    4b2c:	4b01      	ldr	r3, [pc, #4]	; (4b34 <TC7_Handler+0xc>)
    4b2e:	4798      	blx	r3
    4b30:	bd10      	pop	{r4, pc}
    4b32:	46c0      	nop			; (mov r8, r8)
    4b34:	00004a85 	.word	0x00004a85

00004b38 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4b38:	e7fe      	b.n	4b38 <Dummy_Handler>
	...

00004b3c <Reset_Handler>:
{
    4b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    4b3e:	4a2a      	ldr	r2, [pc, #168]	; (4be8 <Reset_Handler+0xac>)
    4b40:	4b2a      	ldr	r3, [pc, #168]	; (4bec <Reset_Handler+0xb0>)
    4b42:	429a      	cmp	r2, r3
    4b44:	d011      	beq.n	4b6a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    4b46:	001a      	movs	r2, r3
    4b48:	4b29      	ldr	r3, [pc, #164]	; (4bf0 <Reset_Handler+0xb4>)
    4b4a:	429a      	cmp	r2, r3
    4b4c:	d20d      	bcs.n	4b6a <Reset_Handler+0x2e>
    4b4e:	4a29      	ldr	r2, [pc, #164]	; (4bf4 <Reset_Handler+0xb8>)
    4b50:	3303      	adds	r3, #3
    4b52:	1a9b      	subs	r3, r3, r2
    4b54:	089b      	lsrs	r3, r3, #2
    4b56:	3301      	adds	r3, #1
    4b58:	009b      	lsls	r3, r3, #2
    4b5a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    4b5c:	4823      	ldr	r0, [pc, #140]	; (4bec <Reset_Handler+0xb0>)
    4b5e:	4922      	ldr	r1, [pc, #136]	; (4be8 <Reset_Handler+0xac>)
    4b60:	588c      	ldr	r4, [r1, r2]
    4b62:	5084      	str	r4, [r0, r2]
    4b64:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    4b66:	429a      	cmp	r2, r3
    4b68:	d1fa      	bne.n	4b60 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    4b6a:	4a23      	ldr	r2, [pc, #140]	; (4bf8 <Reset_Handler+0xbc>)
    4b6c:	4b23      	ldr	r3, [pc, #140]	; (4bfc <Reset_Handler+0xc0>)
    4b6e:	429a      	cmp	r2, r3
    4b70:	d20a      	bcs.n	4b88 <Reset_Handler+0x4c>
    4b72:	43d3      	mvns	r3, r2
    4b74:	4921      	ldr	r1, [pc, #132]	; (4bfc <Reset_Handler+0xc0>)
    4b76:	185b      	adds	r3, r3, r1
    4b78:	2103      	movs	r1, #3
    4b7a:	438b      	bics	r3, r1
    4b7c:	3304      	adds	r3, #4
    4b7e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    4b80:	2100      	movs	r1, #0
    4b82:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    4b84:	4293      	cmp	r3, r2
    4b86:	d1fc      	bne.n	4b82 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4b88:	4a1d      	ldr	r2, [pc, #116]	; (4c00 <Reset_Handler+0xc4>)
    4b8a:	21ff      	movs	r1, #255	; 0xff
    4b8c:	4b1d      	ldr	r3, [pc, #116]	; (4c04 <Reset_Handler+0xc8>)
    4b8e:	438b      	bics	r3, r1
    4b90:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4b92:	39fd      	subs	r1, #253	; 0xfd
    4b94:	2390      	movs	r3, #144	; 0x90
    4b96:	005b      	lsls	r3, r3, #1
    4b98:	4a1b      	ldr	r2, [pc, #108]	; (4c08 <Reset_Handler+0xcc>)
    4b9a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4b9c:	4a1b      	ldr	r2, [pc, #108]	; (4c0c <Reset_Handler+0xd0>)
    4b9e:	78d3      	ldrb	r3, [r2, #3]
    4ba0:	2503      	movs	r5, #3
    4ba2:	43ab      	bics	r3, r5
    4ba4:	2402      	movs	r4, #2
    4ba6:	4323      	orrs	r3, r4
    4ba8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4baa:	78d3      	ldrb	r3, [r2, #3]
    4bac:	270c      	movs	r7, #12
    4bae:	43bb      	bics	r3, r7
    4bb0:	2608      	movs	r6, #8
    4bb2:	4333      	orrs	r3, r6
    4bb4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    4bb6:	4b16      	ldr	r3, [pc, #88]	; (4c10 <Reset_Handler+0xd4>)
    4bb8:	7b98      	ldrb	r0, [r3, #14]
    4bba:	2230      	movs	r2, #48	; 0x30
    4bbc:	4390      	bics	r0, r2
    4bbe:	2220      	movs	r2, #32
    4bc0:	4310      	orrs	r0, r2
    4bc2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4bc4:	7b99      	ldrb	r1, [r3, #14]
    4bc6:	43b9      	bics	r1, r7
    4bc8:	4331      	orrs	r1, r6
    4bca:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4bcc:	7b9a      	ldrb	r2, [r3, #14]
    4bce:	43aa      	bics	r2, r5
    4bd0:	4322      	orrs	r2, r4
    4bd2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    4bd4:	4a0f      	ldr	r2, [pc, #60]	; (4c14 <Reset_Handler+0xd8>)
    4bd6:	6853      	ldr	r3, [r2, #4]
    4bd8:	2180      	movs	r1, #128	; 0x80
    4bda:	430b      	orrs	r3, r1
    4bdc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    4bde:	4b0e      	ldr	r3, [pc, #56]	; (4c18 <Reset_Handler+0xdc>)
    4be0:	4798      	blx	r3
        main();
    4be2:	4b0e      	ldr	r3, [pc, #56]	; (4c1c <Reset_Handler+0xe0>)
    4be4:	4798      	blx	r3
    4be6:	e7fe      	b.n	4be6 <Reset_Handler+0xaa>
    4be8:	00008edc 	.word	0x00008edc
    4bec:	20000000 	.word	0x20000000
    4bf0:	20000478 	.word	0x20000478
    4bf4:	20000004 	.word	0x20000004
    4bf8:	20000478 	.word	0x20000478
    4bfc:	20000d7c 	.word	0x20000d7c
    4c00:	e000ed00 	.word	0xe000ed00
    4c04:	00000000 	.word	0x00000000
    4c08:	41007000 	.word	0x41007000
    4c0c:	41005000 	.word	0x41005000
    4c10:	41004800 	.word	0x41004800
    4c14:	41004000 	.word	0x41004000
    4c18:	000067b1 	.word	0x000067b1
    4c1c:	00004cf1 	.word	0x00004cf1

00004c20 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    4c20:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c22:	46c6      	mov	lr, r8
    4c24:	b500      	push	{lr}
    4c26:	000c      	movs	r4, r1
    4c28:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    4c2a:	2800      	cmp	r0, #0
    4c2c:	d10f      	bne.n	4c4e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    4c2e:	2a00      	cmp	r2, #0
    4c30:	dd11      	ble.n	4c56 <_read+0x36>
    4c32:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    4c34:	4e09      	ldr	r6, [pc, #36]	; (4c5c <_read+0x3c>)
    4c36:	4d0a      	ldr	r5, [pc, #40]	; (4c60 <_read+0x40>)
    4c38:	6830      	ldr	r0, [r6, #0]
    4c3a:	0021      	movs	r1, r4
    4c3c:	682b      	ldr	r3, [r5, #0]
    4c3e:	4798      	blx	r3
		ptr++;
    4c40:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    4c42:	42bc      	cmp	r4, r7
    4c44:	d1f8      	bne.n	4c38 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    4c46:	4640      	mov	r0, r8
    4c48:	bc04      	pop	{r2}
    4c4a:	4690      	mov	r8, r2
    4c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    4c4e:	2301      	movs	r3, #1
    4c50:	425b      	negs	r3, r3
    4c52:	4698      	mov	r8, r3
    4c54:	e7f7      	b.n	4c46 <_read+0x26>
	for (; len > 0; --len) {
    4c56:	4680      	mov	r8, r0
    4c58:	e7f5      	b.n	4c46 <_read+0x26>
    4c5a:	46c0      	nop			; (mov r8, r8)
    4c5c:	20000d74 	.word	0x20000d74
    4c60:	20000d6c 	.word	0x20000d6c

00004c64 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    4c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c66:	46c6      	mov	lr, r8
    4c68:	b500      	push	{lr}
    4c6a:	000e      	movs	r6, r1
    4c6c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    4c6e:	3801      	subs	r0, #1
    4c70:	2802      	cmp	r0, #2
    4c72:	d810      	bhi.n	4c96 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    4c74:	2a00      	cmp	r2, #0
    4c76:	d011      	beq.n	4c9c <_write+0x38>
    4c78:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    4c7a:	4b0c      	ldr	r3, [pc, #48]	; (4cac <_write+0x48>)
    4c7c:	4698      	mov	r8, r3
    4c7e:	4f0c      	ldr	r7, [pc, #48]	; (4cb0 <_write+0x4c>)
    4c80:	4643      	mov	r3, r8
    4c82:	6818      	ldr	r0, [r3, #0]
    4c84:	5d31      	ldrb	r1, [r6, r4]
    4c86:	683b      	ldr	r3, [r7, #0]
    4c88:	4798      	blx	r3
    4c8a:	2800      	cmp	r0, #0
    4c8c:	db08      	blt.n	4ca0 <_write+0x3c>
			return -1;
		}
		++nChars;
    4c8e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    4c90:	42a5      	cmp	r5, r4
    4c92:	d1f5      	bne.n	4c80 <_write+0x1c>
    4c94:	e006      	b.n	4ca4 <_write+0x40>
		return -1;
    4c96:	2401      	movs	r4, #1
    4c98:	4264      	negs	r4, r4
    4c9a:	e003      	b.n	4ca4 <_write+0x40>
	for (; len != 0; --len) {
    4c9c:	0014      	movs	r4, r2
    4c9e:	e001      	b.n	4ca4 <_write+0x40>
			return -1;
    4ca0:	2401      	movs	r4, #1
    4ca2:	4264      	negs	r4, r4
	}
	return nChars;
}
    4ca4:	0020      	movs	r0, r4
    4ca6:	bc04      	pop	{r2}
    4ca8:	4690      	mov	r8, r2
    4caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cac:	20000d74 	.word	0x20000d74
    4cb0:	20000d70 	.word	0x20000d70

00004cb4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4cb4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4cb6:	4a06      	ldr	r2, [pc, #24]	; (4cd0 <_sbrk+0x1c>)
    4cb8:	6812      	ldr	r2, [r2, #0]
    4cba:	2a00      	cmp	r2, #0
    4cbc:	d004      	beq.n	4cc8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    4cbe:	4a04      	ldr	r2, [pc, #16]	; (4cd0 <_sbrk+0x1c>)
    4cc0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    4cc2:	18c3      	adds	r3, r0, r3
    4cc4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    4cc6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    4cc8:	4902      	ldr	r1, [pc, #8]	; (4cd4 <_sbrk+0x20>)
    4cca:	4a01      	ldr	r2, [pc, #4]	; (4cd0 <_sbrk+0x1c>)
    4ccc:	6011      	str	r1, [r2, #0]
    4cce:	e7f6      	b.n	4cbe <_sbrk+0xa>
    4cd0:	20000a54 	.word	0x20000a54
    4cd4:	20002d80 	.word	0x20002d80

00004cd8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    4cd8:	2001      	movs	r0, #1
    4cda:	4240      	negs	r0, r0
    4cdc:	4770      	bx	lr

00004cde <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    4cde:	2380      	movs	r3, #128	; 0x80
    4ce0:	019b      	lsls	r3, r3, #6
    4ce2:	604b      	str	r3, [r1, #4]

	return 0;
}
    4ce4:	2000      	movs	r0, #0
    4ce6:	4770      	bx	lr

00004ce8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    4ce8:	2001      	movs	r0, #1
    4cea:	4770      	bx	lr

00004cec <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    4cec:	2000      	movs	r0, #0
    4cee:	4770      	bx	lr

00004cf0 <main>:
#include "cmd-processor.h"
#include "cryptoauthlib.h"


int main(void)
{
    4cf0:	b570      	push	{r4, r5, r6, lr}
    4cf2:	b082      	sub	sp, #8
  static uint8_t status;
  char disp_str[1700];
  int disp_size = sizeof(disp_str);
  
  system_init();
    4cf4:	4b18      	ldr	r3, [pc, #96]	; (4d58 <main+0x68>)
    4cf6:	4798      	blx	r3
  
  delay_init();
    4cf8:	4b18      	ldr	r3, [pc, #96]	; (4d5c <main+0x6c>)
    4cfa:	4798      	blx	r3
  
  // Initialize interrupt vector table support.
  irq_initialize_vectors();
  
  // Enable interrupts
  cpu_irq_enable();
    4cfc:	2201      	movs	r2, #1
    4cfe:	4b18      	ldr	r3, [pc, #96]	; (4d60 <main+0x70>)
    4d00:	701a      	strb	r2, [r3, #0]
    4d02:	f3bf 8f5f 	dmb	sy
    4d06:	b662      	cpsie	i
  
  sio2host_init();
    4d08:	4b16      	ldr	r3, [pc, #88]	; (4d64 <main+0x74>)
    4d0a:	4798      	blx	r3
  
  printf("\f");
    4d0c:	200c      	movs	r0, #12
    4d0e:	4c16      	ldr	r4, [pc, #88]	; (4d68 <main+0x78>)
    4d10:	47a0      	blx	r4
  help();
    4d12:	4b16      	ldr	r3, [pc, #88]	; (4d6c <main+0x7c>)
    4d14:	4798      	blx	r3
  printf("$");
    4d16:	2024      	movs	r0, #36	; 0x24
    4d18:	47a0      	blx	r4
  
  while (true) {
    uint8_t ch = 0;
    4d1a:	466b      	mov	r3, sp
    4d1c:	1ddc      	adds	r4, r3, #7
    4d1e:	2600      	movs	r6, #0
    int back = sio2host_rx(&ch, 1);
    4d20:	4d13      	ldr	r5, [pc, #76]	; (4d70 <main+0x80>)
    4d22:	e007      	b.n	4d34 <main+0x44>
    {
      printf("%c",ch); // echo to output
      if ( ch == 0x0d || ch == 0x0a ) {
        processCmd();
        } else {
        CBUF_Push( cmdQ, ch );  // queue character into circular buffer
    4d24:	4b13      	ldr	r3, [pc, #76]	; (4d74 <main+0x84>)
    4d26:	7859      	ldrb	r1, [r3, #1]
    4d28:	b2c9      	uxtb	r1, r1
    4d2a:	1c48      	adds	r0, r1, #1
    4d2c:	b2c0      	uxtb	r0, r0
    4d2e:	7058      	strb	r0, [r3, #1]
    4d30:	185b      	adds	r3, r3, r1
    4d32:	709a      	strb	r2, [r3, #2]
    uint8_t ch = 0;
    4d34:	7026      	strb	r6, [r4, #0]
    int back = sio2host_rx(&ch, 1);
    4d36:	2101      	movs	r1, #1
    4d38:	0020      	movs	r0, r4
    4d3a:	47a8      	blx	r5
    if (back >= 1)
    4d3c:	2800      	cmp	r0, #0
    4d3e:	ddf9      	ble.n	4d34 <main+0x44>
      printf("%c",ch); // echo to output
    4d40:	7820      	ldrb	r0, [r4, #0]
    4d42:	4b09      	ldr	r3, [pc, #36]	; (4d68 <main+0x78>)
    4d44:	4798      	blx	r3
      if ( ch == 0x0d || ch == 0x0a ) {
    4d46:	7822      	ldrb	r2, [r4, #0]
    4d48:	2a0d      	cmp	r2, #13
    4d4a:	d001      	beq.n	4d50 <main+0x60>
    4d4c:	2a0a      	cmp	r2, #10
    4d4e:	d1e9      	bne.n	4d24 <main+0x34>
        processCmd();
    4d50:	4b09      	ldr	r3, [pc, #36]	; (4d78 <main+0x88>)
    4d52:	4798      	blx	r3
    4d54:	e7ee      	b.n	4d34 <main+0x44>
    4d56:	46c0      	nop			; (mov r8, r8)
    4d58:	00004a59 	.word	0x00004a59
    4d5c:	00003795 	.word	0x00003795
    4d60:	20000410 	.word	0x20000410
    4d64:	000016d9 	.word	0x000016d9
    4d68:	00006a09 	.word	0x00006a09
    4d6c:	00001889 	.word	0x00001889
    4d70:	00001829 	.word	0x00001829
    4d74:	20000ae0 	.word	0x20000ae0
    4d78:	00001995 	.word	0x00001995

00004d7c <__udivsi3>:
    4d7c:	2200      	movs	r2, #0
    4d7e:	0843      	lsrs	r3, r0, #1
    4d80:	428b      	cmp	r3, r1
    4d82:	d374      	bcc.n	4e6e <__udivsi3+0xf2>
    4d84:	0903      	lsrs	r3, r0, #4
    4d86:	428b      	cmp	r3, r1
    4d88:	d35f      	bcc.n	4e4a <__udivsi3+0xce>
    4d8a:	0a03      	lsrs	r3, r0, #8
    4d8c:	428b      	cmp	r3, r1
    4d8e:	d344      	bcc.n	4e1a <__udivsi3+0x9e>
    4d90:	0b03      	lsrs	r3, r0, #12
    4d92:	428b      	cmp	r3, r1
    4d94:	d328      	bcc.n	4de8 <__udivsi3+0x6c>
    4d96:	0c03      	lsrs	r3, r0, #16
    4d98:	428b      	cmp	r3, r1
    4d9a:	d30d      	bcc.n	4db8 <__udivsi3+0x3c>
    4d9c:	22ff      	movs	r2, #255	; 0xff
    4d9e:	0209      	lsls	r1, r1, #8
    4da0:	ba12      	rev	r2, r2
    4da2:	0c03      	lsrs	r3, r0, #16
    4da4:	428b      	cmp	r3, r1
    4da6:	d302      	bcc.n	4dae <__udivsi3+0x32>
    4da8:	1212      	asrs	r2, r2, #8
    4daa:	0209      	lsls	r1, r1, #8
    4dac:	d065      	beq.n	4e7a <__udivsi3+0xfe>
    4dae:	0b03      	lsrs	r3, r0, #12
    4db0:	428b      	cmp	r3, r1
    4db2:	d319      	bcc.n	4de8 <__udivsi3+0x6c>
    4db4:	e000      	b.n	4db8 <__udivsi3+0x3c>
    4db6:	0a09      	lsrs	r1, r1, #8
    4db8:	0bc3      	lsrs	r3, r0, #15
    4dba:	428b      	cmp	r3, r1
    4dbc:	d301      	bcc.n	4dc2 <__udivsi3+0x46>
    4dbe:	03cb      	lsls	r3, r1, #15
    4dc0:	1ac0      	subs	r0, r0, r3
    4dc2:	4152      	adcs	r2, r2
    4dc4:	0b83      	lsrs	r3, r0, #14
    4dc6:	428b      	cmp	r3, r1
    4dc8:	d301      	bcc.n	4dce <__udivsi3+0x52>
    4dca:	038b      	lsls	r3, r1, #14
    4dcc:	1ac0      	subs	r0, r0, r3
    4dce:	4152      	adcs	r2, r2
    4dd0:	0b43      	lsrs	r3, r0, #13
    4dd2:	428b      	cmp	r3, r1
    4dd4:	d301      	bcc.n	4dda <__udivsi3+0x5e>
    4dd6:	034b      	lsls	r3, r1, #13
    4dd8:	1ac0      	subs	r0, r0, r3
    4dda:	4152      	adcs	r2, r2
    4ddc:	0b03      	lsrs	r3, r0, #12
    4dde:	428b      	cmp	r3, r1
    4de0:	d301      	bcc.n	4de6 <__udivsi3+0x6a>
    4de2:	030b      	lsls	r3, r1, #12
    4de4:	1ac0      	subs	r0, r0, r3
    4de6:	4152      	adcs	r2, r2
    4de8:	0ac3      	lsrs	r3, r0, #11
    4dea:	428b      	cmp	r3, r1
    4dec:	d301      	bcc.n	4df2 <__udivsi3+0x76>
    4dee:	02cb      	lsls	r3, r1, #11
    4df0:	1ac0      	subs	r0, r0, r3
    4df2:	4152      	adcs	r2, r2
    4df4:	0a83      	lsrs	r3, r0, #10
    4df6:	428b      	cmp	r3, r1
    4df8:	d301      	bcc.n	4dfe <__udivsi3+0x82>
    4dfa:	028b      	lsls	r3, r1, #10
    4dfc:	1ac0      	subs	r0, r0, r3
    4dfe:	4152      	adcs	r2, r2
    4e00:	0a43      	lsrs	r3, r0, #9
    4e02:	428b      	cmp	r3, r1
    4e04:	d301      	bcc.n	4e0a <__udivsi3+0x8e>
    4e06:	024b      	lsls	r3, r1, #9
    4e08:	1ac0      	subs	r0, r0, r3
    4e0a:	4152      	adcs	r2, r2
    4e0c:	0a03      	lsrs	r3, r0, #8
    4e0e:	428b      	cmp	r3, r1
    4e10:	d301      	bcc.n	4e16 <__udivsi3+0x9a>
    4e12:	020b      	lsls	r3, r1, #8
    4e14:	1ac0      	subs	r0, r0, r3
    4e16:	4152      	adcs	r2, r2
    4e18:	d2cd      	bcs.n	4db6 <__udivsi3+0x3a>
    4e1a:	09c3      	lsrs	r3, r0, #7
    4e1c:	428b      	cmp	r3, r1
    4e1e:	d301      	bcc.n	4e24 <__udivsi3+0xa8>
    4e20:	01cb      	lsls	r3, r1, #7
    4e22:	1ac0      	subs	r0, r0, r3
    4e24:	4152      	adcs	r2, r2
    4e26:	0983      	lsrs	r3, r0, #6
    4e28:	428b      	cmp	r3, r1
    4e2a:	d301      	bcc.n	4e30 <__udivsi3+0xb4>
    4e2c:	018b      	lsls	r3, r1, #6
    4e2e:	1ac0      	subs	r0, r0, r3
    4e30:	4152      	adcs	r2, r2
    4e32:	0943      	lsrs	r3, r0, #5
    4e34:	428b      	cmp	r3, r1
    4e36:	d301      	bcc.n	4e3c <__udivsi3+0xc0>
    4e38:	014b      	lsls	r3, r1, #5
    4e3a:	1ac0      	subs	r0, r0, r3
    4e3c:	4152      	adcs	r2, r2
    4e3e:	0903      	lsrs	r3, r0, #4
    4e40:	428b      	cmp	r3, r1
    4e42:	d301      	bcc.n	4e48 <__udivsi3+0xcc>
    4e44:	010b      	lsls	r3, r1, #4
    4e46:	1ac0      	subs	r0, r0, r3
    4e48:	4152      	adcs	r2, r2
    4e4a:	08c3      	lsrs	r3, r0, #3
    4e4c:	428b      	cmp	r3, r1
    4e4e:	d301      	bcc.n	4e54 <__udivsi3+0xd8>
    4e50:	00cb      	lsls	r3, r1, #3
    4e52:	1ac0      	subs	r0, r0, r3
    4e54:	4152      	adcs	r2, r2
    4e56:	0883      	lsrs	r3, r0, #2
    4e58:	428b      	cmp	r3, r1
    4e5a:	d301      	bcc.n	4e60 <__udivsi3+0xe4>
    4e5c:	008b      	lsls	r3, r1, #2
    4e5e:	1ac0      	subs	r0, r0, r3
    4e60:	4152      	adcs	r2, r2
    4e62:	0843      	lsrs	r3, r0, #1
    4e64:	428b      	cmp	r3, r1
    4e66:	d301      	bcc.n	4e6c <__udivsi3+0xf0>
    4e68:	004b      	lsls	r3, r1, #1
    4e6a:	1ac0      	subs	r0, r0, r3
    4e6c:	4152      	adcs	r2, r2
    4e6e:	1a41      	subs	r1, r0, r1
    4e70:	d200      	bcs.n	4e74 <__udivsi3+0xf8>
    4e72:	4601      	mov	r1, r0
    4e74:	4152      	adcs	r2, r2
    4e76:	4610      	mov	r0, r2
    4e78:	4770      	bx	lr
    4e7a:	e7ff      	b.n	4e7c <__udivsi3+0x100>
    4e7c:	b501      	push	{r0, lr}
    4e7e:	2000      	movs	r0, #0
    4e80:	f000 f806 	bl	4e90 <__aeabi_idiv0>
    4e84:	bd02      	pop	{r1, pc}
    4e86:	46c0      	nop			; (mov r8, r8)

00004e88 <__aeabi_uidivmod>:
    4e88:	2900      	cmp	r1, #0
    4e8a:	d0f7      	beq.n	4e7c <__udivsi3+0x100>
    4e8c:	e776      	b.n	4d7c <__udivsi3>
    4e8e:	4770      	bx	lr

00004e90 <__aeabi_idiv0>:
    4e90:	4770      	bx	lr
    4e92:	46c0      	nop			; (mov r8, r8)

00004e94 <__aeabi_lmul>:
    4e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e96:	46ce      	mov	lr, r9
    4e98:	4647      	mov	r7, r8
    4e9a:	0415      	lsls	r5, r2, #16
    4e9c:	0c2d      	lsrs	r5, r5, #16
    4e9e:	002e      	movs	r6, r5
    4ea0:	b580      	push	{r7, lr}
    4ea2:	0407      	lsls	r7, r0, #16
    4ea4:	0c14      	lsrs	r4, r2, #16
    4ea6:	0c3f      	lsrs	r7, r7, #16
    4ea8:	4699      	mov	r9, r3
    4eaa:	0c03      	lsrs	r3, r0, #16
    4eac:	437e      	muls	r6, r7
    4eae:	435d      	muls	r5, r3
    4eb0:	4367      	muls	r7, r4
    4eb2:	4363      	muls	r3, r4
    4eb4:	197f      	adds	r7, r7, r5
    4eb6:	0c34      	lsrs	r4, r6, #16
    4eb8:	19e4      	adds	r4, r4, r7
    4eba:	469c      	mov	ip, r3
    4ebc:	42a5      	cmp	r5, r4
    4ebe:	d903      	bls.n	4ec8 <__aeabi_lmul+0x34>
    4ec0:	2380      	movs	r3, #128	; 0x80
    4ec2:	025b      	lsls	r3, r3, #9
    4ec4:	4698      	mov	r8, r3
    4ec6:	44c4      	add	ip, r8
    4ec8:	464b      	mov	r3, r9
    4eca:	4351      	muls	r1, r2
    4ecc:	4343      	muls	r3, r0
    4ece:	0436      	lsls	r6, r6, #16
    4ed0:	0c36      	lsrs	r6, r6, #16
    4ed2:	0c25      	lsrs	r5, r4, #16
    4ed4:	0424      	lsls	r4, r4, #16
    4ed6:	4465      	add	r5, ip
    4ed8:	19a4      	adds	r4, r4, r6
    4eda:	1859      	adds	r1, r3, r1
    4edc:	1949      	adds	r1, r1, r5
    4ede:	0020      	movs	r0, r4
    4ee0:	bc0c      	pop	{r2, r3}
    4ee2:	4690      	mov	r8, r2
    4ee4:	4699      	mov	r9, r3
    4ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004ee8 <__aeabi_dadd>:
    4ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4eea:	4645      	mov	r5, r8
    4eec:	46de      	mov	lr, fp
    4eee:	4657      	mov	r7, sl
    4ef0:	464e      	mov	r6, r9
    4ef2:	030c      	lsls	r4, r1, #12
    4ef4:	b5e0      	push	{r5, r6, r7, lr}
    4ef6:	004e      	lsls	r6, r1, #1
    4ef8:	0fc9      	lsrs	r1, r1, #31
    4efa:	4688      	mov	r8, r1
    4efc:	000d      	movs	r5, r1
    4efe:	0a61      	lsrs	r1, r4, #9
    4f00:	0f44      	lsrs	r4, r0, #29
    4f02:	430c      	orrs	r4, r1
    4f04:	00c7      	lsls	r7, r0, #3
    4f06:	0319      	lsls	r1, r3, #12
    4f08:	0058      	lsls	r0, r3, #1
    4f0a:	0fdb      	lsrs	r3, r3, #31
    4f0c:	469b      	mov	fp, r3
    4f0e:	0a4b      	lsrs	r3, r1, #9
    4f10:	0f51      	lsrs	r1, r2, #29
    4f12:	430b      	orrs	r3, r1
    4f14:	0d76      	lsrs	r6, r6, #21
    4f16:	0d40      	lsrs	r0, r0, #21
    4f18:	0019      	movs	r1, r3
    4f1a:	00d2      	lsls	r2, r2, #3
    4f1c:	45d8      	cmp	r8, fp
    4f1e:	d100      	bne.n	4f22 <__aeabi_dadd+0x3a>
    4f20:	e0ae      	b.n	5080 <__aeabi_dadd+0x198>
    4f22:	1a35      	subs	r5, r6, r0
    4f24:	2d00      	cmp	r5, #0
    4f26:	dc00      	bgt.n	4f2a <__aeabi_dadd+0x42>
    4f28:	e0f6      	b.n	5118 <__aeabi_dadd+0x230>
    4f2a:	2800      	cmp	r0, #0
    4f2c:	d10f      	bne.n	4f4e <__aeabi_dadd+0x66>
    4f2e:	4313      	orrs	r3, r2
    4f30:	d100      	bne.n	4f34 <__aeabi_dadd+0x4c>
    4f32:	e0db      	b.n	50ec <__aeabi_dadd+0x204>
    4f34:	1e6b      	subs	r3, r5, #1
    4f36:	2b00      	cmp	r3, #0
    4f38:	d000      	beq.n	4f3c <__aeabi_dadd+0x54>
    4f3a:	e137      	b.n	51ac <__aeabi_dadd+0x2c4>
    4f3c:	1aba      	subs	r2, r7, r2
    4f3e:	4297      	cmp	r7, r2
    4f40:	41bf      	sbcs	r7, r7
    4f42:	1a64      	subs	r4, r4, r1
    4f44:	427f      	negs	r7, r7
    4f46:	1be4      	subs	r4, r4, r7
    4f48:	2601      	movs	r6, #1
    4f4a:	0017      	movs	r7, r2
    4f4c:	e024      	b.n	4f98 <__aeabi_dadd+0xb0>
    4f4e:	4bc6      	ldr	r3, [pc, #792]	; (5268 <__aeabi_dadd+0x380>)
    4f50:	429e      	cmp	r6, r3
    4f52:	d04d      	beq.n	4ff0 <__aeabi_dadd+0x108>
    4f54:	2380      	movs	r3, #128	; 0x80
    4f56:	041b      	lsls	r3, r3, #16
    4f58:	4319      	orrs	r1, r3
    4f5a:	2d38      	cmp	r5, #56	; 0x38
    4f5c:	dd00      	ble.n	4f60 <__aeabi_dadd+0x78>
    4f5e:	e107      	b.n	5170 <__aeabi_dadd+0x288>
    4f60:	2d1f      	cmp	r5, #31
    4f62:	dd00      	ble.n	4f66 <__aeabi_dadd+0x7e>
    4f64:	e138      	b.n	51d8 <__aeabi_dadd+0x2f0>
    4f66:	2020      	movs	r0, #32
    4f68:	1b43      	subs	r3, r0, r5
    4f6a:	469a      	mov	sl, r3
    4f6c:	000b      	movs	r3, r1
    4f6e:	4650      	mov	r0, sl
    4f70:	4083      	lsls	r3, r0
    4f72:	4699      	mov	r9, r3
    4f74:	0013      	movs	r3, r2
    4f76:	4648      	mov	r0, r9
    4f78:	40eb      	lsrs	r3, r5
    4f7a:	4318      	orrs	r0, r3
    4f7c:	0003      	movs	r3, r0
    4f7e:	4650      	mov	r0, sl
    4f80:	4082      	lsls	r2, r0
    4f82:	1e50      	subs	r0, r2, #1
    4f84:	4182      	sbcs	r2, r0
    4f86:	40e9      	lsrs	r1, r5
    4f88:	431a      	orrs	r2, r3
    4f8a:	1aba      	subs	r2, r7, r2
    4f8c:	1a61      	subs	r1, r4, r1
    4f8e:	4297      	cmp	r7, r2
    4f90:	41a4      	sbcs	r4, r4
    4f92:	0017      	movs	r7, r2
    4f94:	4264      	negs	r4, r4
    4f96:	1b0c      	subs	r4, r1, r4
    4f98:	0223      	lsls	r3, r4, #8
    4f9a:	d562      	bpl.n	5062 <__aeabi_dadd+0x17a>
    4f9c:	0264      	lsls	r4, r4, #9
    4f9e:	0a65      	lsrs	r5, r4, #9
    4fa0:	2d00      	cmp	r5, #0
    4fa2:	d100      	bne.n	4fa6 <__aeabi_dadd+0xbe>
    4fa4:	e0df      	b.n	5166 <__aeabi_dadd+0x27e>
    4fa6:	0028      	movs	r0, r5
    4fa8:	f001 fbe4 	bl	6774 <__clzsi2>
    4fac:	0003      	movs	r3, r0
    4fae:	3b08      	subs	r3, #8
    4fb0:	2b1f      	cmp	r3, #31
    4fb2:	dd00      	ble.n	4fb6 <__aeabi_dadd+0xce>
    4fb4:	e0d2      	b.n	515c <__aeabi_dadd+0x274>
    4fb6:	2220      	movs	r2, #32
    4fb8:	003c      	movs	r4, r7
    4fba:	1ad2      	subs	r2, r2, r3
    4fbc:	409d      	lsls	r5, r3
    4fbe:	40d4      	lsrs	r4, r2
    4fc0:	409f      	lsls	r7, r3
    4fc2:	4325      	orrs	r5, r4
    4fc4:	429e      	cmp	r6, r3
    4fc6:	dd00      	ble.n	4fca <__aeabi_dadd+0xe2>
    4fc8:	e0c4      	b.n	5154 <__aeabi_dadd+0x26c>
    4fca:	1b9e      	subs	r6, r3, r6
    4fcc:	1c73      	adds	r3, r6, #1
    4fce:	2b1f      	cmp	r3, #31
    4fd0:	dd00      	ble.n	4fd4 <__aeabi_dadd+0xec>
    4fd2:	e0f1      	b.n	51b8 <__aeabi_dadd+0x2d0>
    4fd4:	2220      	movs	r2, #32
    4fd6:	0038      	movs	r0, r7
    4fd8:	0029      	movs	r1, r5
    4fda:	1ad2      	subs	r2, r2, r3
    4fdc:	40d8      	lsrs	r0, r3
    4fde:	4091      	lsls	r1, r2
    4fe0:	4097      	lsls	r7, r2
    4fe2:	002c      	movs	r4, r5
    4fe4:	4301      	orrs	r1, r0
    4fe6:	1e78      	subs	r0, r7, #1
    4fe8:	4187      	sbcs	r7, r0
    4fea:	40dc      	lsrs	r4, r3
    4fec:	2600      	movs	r6, #0
    4fee:	430f      	orrs	r7, r1
    4ff0:	077b      	lsls	r3, r7, #29
    4ff2:	d009      	beq.n	5008 <__aeabi_dadd+0x120>
    4ff4:	230f      	movs	r3, #15
    4ff6:	403b      	ands	r3, r7
    4ff8:	2b04      	cmp	r3, #4
    4ffa:	d005      	beq.n	5008 <__aeabi_dadd+0x120>
    4ffc:	1d3b      	adds	r3, r7, #4
    4ffe:	42bb      	cmp	r3, r7
    5000:	41bf      	sbcs	r7, r7
    5002:	427f      	negs	r7, r7
    5004:	19e4      	adds	r4, r4, r7
    5006:	001f      	movs	r7, r3
    5008:	0223      	lsls	r3, r4, #8
    500a:	d52c      	bpl.n	5066 <__aeabi_dadd+0x17e>
    500c:	4b96      	ldr	r3, [pc, #600]	; (5268 <__aeabi_dadd+0x380>)
    500e:	3601      	adds	r6, #1
    5010:	429e      	cmp	r6, r3
    5012:	d100      	bne.n	5016 <__aeabi_dadd+0x12e>
    5014:	e09a      	b.n	514c <__aeabi_dadd+0x264>
    5016:	4645      	mov	r5, r8
    5018:	4b94      	ldr	r3, [pc, #592]	; (526c <__aeabi_dadd+0x384>)
    501a:	08ff      	lsrs	r7, r7, #3
    501c:	401c      	ands	r4, r3
    501e:	0760      	lsls	r0, r4, #29
    5020:	0576      	lsls	r6, r6, #21
    5022:	0264      	lsls	r4, r4, #9
    5024:	4307      	orrs	r7, r0
    5026:	0b24      	lsrs	r4, r4, #12
    5028:	0d76      	lsrs	r6, r6, #21
    502a:	2100      	movs	r1, #0
    502c:	0324      	lsls	r4, r4, #12
    502e:	0b23      	lsrs	r3, r4, #12
    5030:	0d0c      	lsrs	r4, r1, #20
    5032:	4a8f      	ldr	r2, [pc, #572]	; (5270 <__aeabi_dadd+0x388>)
    5034:	0524      	lsls	r4, r4, #20
    5036:	431c      	orrs	r4, r3
    5038:	4014      	ands	r4, r2
    503a:	0533      	lsls	r3, r6, #20
    503c:	4323      	orrs	r3, r4
    503e:	005b      	lsls	r3, r3, #1
    5040:	07ed      	lsls	r5, r5, #31
    5042:	085b      	lsrs	r3, r3, #1
    5044:	432b      	orrs	r3, r5
    5046:	0038      	movs	r0, r7
    5048:	0019      	movs	r1, r3
    504a:	bc3c      	pop	{r2, r3, r4, r5}
    504c:	4690      	mov	r8, r2
    504e:	4699      	mov	r9, r3
    5050:	46a2      	mov	sl, r4
    5052:	46ab      	mov	fp, r5
    5054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5056:	4664      	mov	r4, ip
    5058:	4304      	orrs	r4, r0
    505a:	d100      	bne.n	505e <__aeabi_dadd+0x176>
    505c:	e211      	b.n	5482 <__aeabi_dadd+0x59a>
    505e:	0004      	movs	r4, r0
    5060:	4667      	mov	r7, ip
    5062:	077b      	lsls	r3, r7, #29
    5064:	d1c6      	bne.n	4ff4 <__aeabi_dadd+0x10c>
    5066:	4645      	mov	r5, r8
    5068:	0760      	lsls	r0, r4, #29
    506a:	08ff      	lsrs	r7, r7, #3
    506c:	4307      	orrs	r7, r0
    506e:	08e4      	lsrs	r4, r4, #3
    5070:	4b7d      	ldr	r3, [pc, #500]	; (5268 <__aeabi_dadd+0x380>)
    5072:	429e      	cmp	r6, r3
    5074:	d030      	beq.n	50d8 <__aeabi_dadd+0x1f0>
    5076:	0324      	lsls	r4, r4, #12
    5078:	0576      	lsls	r6, r6, #21
    507a:	0b24      	lsrs	r4, r4, #12
    507c:	0d76      	lsrs	r6, r6, #21
    507e:	e7d4      	b.n	502a <__aeabi_dadd+0x142>
    5080:	1a33      	subs	r3, r6, r0
    5082:	469a      	mov	sl, r3
    5084:	2b00      	cmp	r3, #0
    5086:	dd78      	ble.n	517a <__aeabi_dadd+0x292>
    5088:	2800      	cmp	r0, #0
    508a:	d031      	beq.n	50f0 <__aeabi_dadd+0x208>
    508c:	4876      	ldr	r0, [pc, #472]	; (5268 <__aeabi_dadd+0x380>)
    508e:	4286      	cmp	r6, r0
    5090:	d0ae      	beq.n	4ff0 <__aeabi_dadd+0x108>
    5092:	2080      	movs	r0, #128	; 0x80
    5094:	0400      	lsls	r0, r0, #16
    5096:	4301      	orrs	r1, r0
    5098:	4653      	mov	r3, sl
    509a:	2b38      	cmp	r3, #56	; 0x38
    509c:	dc00      	bgt.n	50a0 <__aeabi_dadd+0x1b8>
    509e:	e0e9      	b.n	5274 <__aeabi_dadd+0x38c>
    50a0:	430a      	orrs	r2, r1
    50a2:	1e51      	subs	r1, r2, #1
    50a4:	418a      	sbcs	r2, r1
    50a6:	2100      	movs	r1, #0
    50a8:	19d2      	adds	r2, r2, r7
    50aa:	42ba      	cmp	r2, r7
    50ac:	41bf      	sbcs	r7, r7
    50ae:	1909      	adds	r1, r1, r4
    50b0:	427c      	negs	r4, r7
    50b2:	0017      	movs	r7, r2
    50b4:	190c      	adds	r4, r1, r4
    50b6:	0223      	lsls	r3, r4, #8
    50b8:	d5d3      	bpl.n	5062 <__aeabi_dadd+0x17a>
    50ba:	4b6b      	ldr	r3, [pc, #428]	; (5268 <__aeabi_dadd+0x380>)
    50bc:	3601      	adds	r6, #1
    50be:	429e      	cmp	r6, r3
    50c0:	d100      	bne.n	50c4 <__aeabi_dadd+0x1dc>
    50c2:	e13a      	b.n	533a <__aeabi_dadd+0x452>
    50c4:	2001      	movs	r0, #1
    50c6:	4b69      	ldr	r3, [pc, #420]	; (526c <__aeabi_dadd+0x384>)
    50c8:	401c      	ands	r4, r3
    50ca:	087b      	lsrs	r3, r7, #1
    50cc:	4007      	ands	r7, r0
    50ce:	431f      	orrs	r7, r3
    50d0:	07e0      	lsls	r0, r4, #31
    50d2:	4307      	orrs	r7, r0
    50d4:	0864      	lsrs	r4, r4, #1
    50d6:	e78b      	b.n	4ff0 <__aeabi_dadd+0x108>
    50d8:	0023      	movs	r3, r4
    50da:	433b      	orrs	r3, r7
    50dc:	d100      	bne.n	50e0 <__aeabi_dadd+0x1f8>
    50de:	e1cb      	b.n	5478 <__aeabi_dadd+0x590>
    50e0:	2280      	movs	r2, #128	; 0x80
    50e2:	0312      	lsls	r2, r2, #12
    50e4:	4314      	orrs	r4, r2
    50e6:	0324      	lsls	r4, r4, #12
    50e8:	0b24      	lsrs	r4, r4, #12
    50ea:	e79e      	b.n	502a <__aeabi_dadd+0x142>
    50ec:	002e      	movs	r6, r5
    50ee:	e77f      	b.n	4ff0 <__aeabi_dadd+0x108>
    50f0:	0008      	movs	r0, r1
    50f2:	4310      	orrs	r0, r2
    50f4:	d100      	bne.n	50f8 <__aeabi_dadd+0x210>
    50f6:	e0b4      	b.n	5262 <__aeabi_dadd+0x37a>
    50f8:	1e58      	subs	r0, r3, #1
    50fa:	2800      	cmp	r0, #0
    50fc:	d000      	beq.n	5100 <__aeabi_dadd+0x218>
    50fe:	e0de      	b.n	52be <__aeabi_dadd+0x3d6>
    5100:	18ba      	adds	r2, r7, r2
    5102:	42ba      	cmp	r2, r7
    5104:	419b      	sbcs	r3, r3
    5106:	1864      	adds	r4, r4, r1
    5108:	425b      	negs	r3, r3
    510a:	18e4      	adds	r4, r4, r3
    510c:	0017      	movs	r7, r2
    510e:	2601      	movs	r6, #1
    5110:	0223      	lsls	r3, r4, #8
    5112:	d5a6      	bpl.n	5062 <__aeabi_dadd+0x17a>
    5114:	2602      	movs	r6, #2
    5116:	e7d5      	b.n	50c4 <__aeabi_dadd+0x1dc>
    5118:	2d00      	cmp	r5, #0
    511a:	d16e      	bne.n	51fa <__aeabi_dadd+0x312>
    511c:	1c70      	adds	r0, r6, #1
    511e:	0540      	lsls	r0, r0, #21
    5120:	0d40      	lsrs	r0, r0, #21
    5122:	2801      	cmp	r0, #1
    5124:	dc00      	bgt.n	5128 <__aeabi_dadd+0x240>
    5126:	e0f9      	b.n	531c <__aeabi_dadd+0x434>
    5128:	1ab8      	subs	r0, r7, r2
    512a:	4684      	mov	ip, r0
    512c:	4287      	cmp	r7, r0
    512e:	4180      	sbcs	r0, r0
    5130:	1ae5      	subs	r5, r4, r3
    5132:	4240      	negs	r0, r0
    5134:	1a2d      	subs	r5, r5, r0
    5136:	0228      	lsls	r0, r5, #8
    5138:	d400      	bmi.n	513c <__aeabi_dadd+0x254>
    513a:	e089      	b.n	5250 <__aeabi_dadd+0x368>
    513c:	1bd7      	subs	r7, r2, r7
    513e:	42ba      	cmp	r2, r7
    5140:	4192      	sbcs	r2, r2
    5142:	1b1c      	subs	r4, r3, r4
    5144:	4252      	negs	r2, r2
    5146:	1aa5      	subs	r5, r4, r2
    5148:	46d8      	mov	r8, fp
    514a:	e729      	b.n	4fa0 <__aeabi_dadd+0xb8>
    514c:	4645      	mov	r5, r8
    514e:	2400      	movs	r4, #0
    5150:	2700      	movs	r7, #0
    5152:	e76a      	b.n	502a <__aeabi_dadd+0x142>
    5154:	4c45      	ldr	r4, [pc, #276]	; (526c <__aeabi_dadd+0x384>)
    5156:	1af6      	subs	r6, r6, r3
    5158:	402c      	ands	r4, r5
    515a:	e749      	b.n	4ff0 <__aeabi_dadd+0x108>
    515c:	003d      	movs	r5, r7
    515e:	3828      	subs	r0, #40	; 0x28
    5160:	4085      	lsls	r5, r0
    5162:	2700      	movs	r7, #0
    5164:	e72e      	b.n	4fc4 <__aeabi_dadd+0xdc>
    5166:	0038      	movs	r0, r7
    5168:	f001 fb04 	bl	6774 <__clzsi2>
    516c:	3020      	adds	r0, #32
    516e:	e71d      	b.n	4fac <__aeabi_dadd+0xc4>
    5170:	430a      	orrs	r2, r1
    5172:	1e51      	subs	r1, r2, #1
    5174:	418a      	sbcs	r2, r1
    5176:	2100      	movs	r1, #0
    5178:	e707      	b.n	4f8a <__aeabi_dadd+0xa2>
    517a:	2b00      	cmp	r3, #0
    517c:	d000      	beq.n	5180 <__aeabi_dadd+0x298>
    517e:	e0f3      	b.n	5368 <__aeabi_dadd+0x480>
    5180:	1c70      	adds	r0, r6, #1
    5182:	0543      	lsls	r3, r0, #21
    5184:	0d5b      	lsrs	r3, r3, #21
    5186:	2b01      	cmp	r3, #1
    5188:	dc00      	bgt.n	518c <__aeabi_dadd+0x2a4>
    518a:	e0ad      	b.n	52e8 <__aeabi_dadd+0x400>
    518c:	4b36      	ldr	r3, [pc, #216]	; (5268 <__aeabi_dadd+0x380>)
    518e:	4298      	cmp	r0, r3
    5190:	d100      	bne.n	5194 <__aeabi_dadd+0x2ac>
    5192:	e0d1      	b.n	5338 <__aeabi_dadd+0x450>
    5194:	18ba      	adds	r2, r7, r2
    5196:	42ba      	cmp	r2, r7
    5198:	41bf      	sbcs	r7, r7
    519a:	1864      	adds	r4, r4, r1
    519c:	427f      	negs	r7, r7
    519e:	19e4      	adds	r4, r4, r7
    51a0:	07e7      	lsls	r7, r4, #31
    51a2:	0852      	lsrs	r2, r2, #1
    51a4:	4317      	orrs	r7, r2
    51a6:	0864      	lsrs	r4, r4, #1
    51a8:	0006      	movs	r6, r0
    51aa:	e721      	b.n	4ff0 <__aeabi_dadd+0x108>
    51ac:	482e      	ldr	r0, [pc, #184]	; (5268 <__aeabi_dadd+0x380>)
    51ae:	4285      	cmp	r5, r0
    51b0:	d100      	bne.n	51b4 <__aeabi_dadd+0x2cc>
    51b2:	e093      	b.n	52dc <__aeabi_dadd+0x3f4>
    51b4:	001d      	movs	r5, r3
    51b6:	e6d0      	b.n	4f5a <__aeabi_dadd+0x72>
    51b8:	0029      	movs	r1, r5
    51ba:	3e1f      	subs	r6, #31
    51bc:	40f1      	lsrs	r1, r6
    51be:	2b20      	cmp	r3, #32
    51c0:	d100      	bne.n	51c4 <__aeabi_dadd+0x2dc>
    51c2:	e08d      	b.n	52e0 <__aeabi_dadd+0x3f8>
    51c4:	2240      	movs	r2, #64	; 0x40
    51c6:	1ad3      	subs	r3, r2, r3
    51c8:	409d      	lsls	r5, r3
    51ca:	432f      	orrs	r7, r5
    51cc:	1e7d      	subs	r5, r7, #1
    51ce:	41af      	sbcs	r7, r5
    51d0:	2400      	movs	r4, #0
    51d2:	430f      	orrs	r7, r1
    51d4:	2600      	movs	r6, #0
    51d6:	e744      	b.n	5062 <__aeabi_dadd+0x17a>
    51d8:	002b      	movs	r3, r5
    51da:	0008      	movs	r0, r1
    51dc:	3b20      	subs	r3, #32
    51de:	40d8      	lsrs	r0, r3
    51e0:	0003      	movs	r3, r0
    51e2:	2d20      	cmp	r5, #32
    51e4:	d100      	bne.n	51e8 <__aeabi_dadd+0x300>
    51e6:	e07d      	b.n	52e4 <__aeabi_dadd+0x3fc>
    51e8:	2040      	movs	r0, #64	; 0x40
    51ea:	1b45      	subs	r5, r0, r5
    51ec:	40a9      	lsls	r1, r5
    51ee:	430a      	orrs	r2, r1
    51f0:	1e51      	subs	r1, r2, #1
    51f2:	418a      	sbcs	r2, r1
    51f4:	2100      	movs	r1, #0
    51f6:	431a      	orrs	r2, r3
    51f8:	e6c7      	b.n	4f8a <__aeabi_dadd+0xa2>
    51fa:	2e00      	cmp	r6, #0
    51fc:	d050      	beq.n	52a0 <__aeabi_dadd+0x3b8>
    51fe:	4e1a      	ldr	r6, [pc, #104]	; (5268 <__aeabi_dadd+0x380>)
    5200:	42b0      	cmp	r0, r6
    5202:	d057      	beq.n	52b4 <__aeabi_dadd+0x3cc>
    5204:	2680      	movs	r6, #128	; 0x80
    5206:	426b      	negs	r3, r5
    5208:	4699      	mov	r9, r3
    520a:	0436      	lsls	r6, r6, #16
    520c:	4334      	orrs	r4, r6
    520e:	464b      	mov	r3, r9
    5210:	2b38      	cmp	r3, #56	; 0x38
    5212:	dd00      	ble.n	5216 <__aeabi_dadd+0x32e>
    5214:	e0d6      	b.n	53c4 <__aeabi_dadd+0x4dc>
    5216:	2b1f      	cmp	r3, #31
    5218:	dd00      	ble.n	521c <__aeabi_dadd+0x334>
    521a:	e135      	b.n	5488 <__aeabi_dadd+0x5a0>
    521c:	2620      	movs	r6, #32
    521e:	1af5      	subs	r5, r6, r3
    5220:	0026      	movs	r6, r4
    5222:	40ae      	lsls	r6, r5
    5224:	46b2      	mov	sl, r6
    5226:	003e      	movs	r6, r7
    5228:	40de      	lsrs	r6, r3
    522a:	46ac      	mov	ip, r5
    522c:	0035      	movs	r5, r6
    522e:	4656      	mov	r6, sl
    5230:	432e      	orrs	r6, r5
    5232:	4665      	mov	r5, ip
    5234:	40af      	lsls	r7, r5
    5236:	1e7d      	subs	r5, r7, #1
    5238:	41af      	sbcs	r7, r5
    523a:	40dc      	lsrs	r4, r3
    523c:	4337      	orrs	r7, r6
    523e:	1bd7      	subs	r7, r2, r7
    5240:	42ba      	cmp	r2, r7
    5242:	4192      	sbcs	r2, r2
    5244:	1b0c      	subs	r4, r1, r4
    5246:	4252      	negs	r2, r2
    5248:	1aa4      	subs	r4, r4, r2
    524a:	0006      	movs	r6, r0
    524c:	46d8      	mov	r8, fp
    524e:	e6a3      	b.n	4f98 <__aeabi_dadd+0xb0>
    5250:	4664      	mov	r4, ip
    5252:	4667      	mov	r7, ip
    5254:	432c      	orrs	r4, r5
    5256:	d000      	beq.n	525a <__aeabi_dadd+0x372>
    5258:	e6a2      	b.n	4fa0 <__aeabi_dadd+0xb8>
    525a:	2500      	movs	r5, #0
    525c:	2600      	movs	r6, #0
    525e:	2700      	movs	r7, #0
    5260:	e706      	b.n	5070 <__aeabi_dadd+0x188>
    5262:	001e      	movs	r6, r3
    5264:	e6c4      	b.n	4ff0 <__aeabi_dadd+0x108>
    5266:	46c0      	nop			; (mov r8, r8)
    5268:	000007ff 	.word	0x000007ff
    526c:	ff7fffff 	.word	0xff7fffff
    5270:	800fffff 	.word	0x800fffff
    5274:	2b1f      	cmp	r3, #31
    5276:	dc63      	bgt.n	5340 <__aeabi_dadd+0x458>
    5278:	2020      	movs	r0, #32
    527a:	1ac3      	subs	r3, r0, r3
    527c:	0008      	movs	r0, r1
    527e:	4098      	lsls	r0, r3
    5280:	469c      	mov	ip, r3
    5282:	4683      	mov	fp, r0
    5284:	4653      	mov	r3, sl
    5286:	0010      	movs	r0, r2
    5288:	40d8      	lsrs	r0, r3
    528a:	0003      	movs	r3, r0
    528c:	4658      	mov	r0, fp
    528e:	4318      	orrs	r0, r3
    5290:	4663      	mov	r3, ip
    5292:	409a      	lsls	r2, r3
    5294:	1e53      	subs	r3, r2, #1
    5296:	419a      	sbcs	r2, r3
    5298:	4653      	mov	r3, sl
    529a:	4302      	orrs	r2, r0
    529c:	40d9      	lsrs	r1, r3
    529e:	e703      	b.n	50a8 <__aeabi_dadd+0x1c0>
    52a0:	0026      	movs	r6, r4
    52a2:	433e      	orrs	r6, r7
    52a4:	d006      	beq.n	52b4 <__aeabi_dadd+0x3cc>
    52a6:	43eb      	mvns	r3, r5
    52a8:	4699      	mov	r9, r3
    52aa:	2b00      	cmp	r3, #0
    52ac:	d0c7      	beq.n	523e <__aeabi_dadd+0x356>
    52ae:	4e94      	ldr	r6, [pc, #592]	; (5500 <__aeabi_dadd+0x618>)
    52b0:	42b0      	cmp	r0, r6
    52b2:	d1ac      	bne.n	520e <__aeabi_dadd+0x326>
    52b4:	000c      	movs	r4, r1
    52b6:	0017      	movs	r7, r2
    52b8:	0006      	movs	r6, r0
    52ba:	46d8      	mov	r8, fp
    52bc:	e698      	b.n	4ff0 <__aeabi_dadd+0x108>
    52be:	4b90      	ldr	r3, [pc, #576]	; (5500 <__aeabi_dadd+0x618>)
    52c0:	459a      	cmp	sl, r3
    52c2:	d00b      	beq.n	52dc <__aeabi_dadd+0x3f4>
    52c4:	4682      	mov	sl, r0
    52c6:	e6e7      	b.n	5098 <__aeabi_dadd+0x1b0>
    52c8:	2800      	cmp	r0, #0
    52ca:	d000      	beq.n	52ce <__aeabi_dadd+0x3e6>
    52cc:	e09e      	b.n	540c <__aeabi_dadd+0x524>
    52ce:	0018      	movs	r0, r3
    52d0:	4310      	orrs	r0, r2
    52d2:	d100      	bne.n	52d6 <__aeabi_dadd+0x3ee>
    52d4:	e0e9      	b.n	54aa <__aeabi_dadd+0x5c2>
    52d6:	001c      	movs	r4, r3
    52d8:	0017      	movs	r7, r2
    52da:	46d8      	mov	r8, fp
    52dc:	4e88      	ldr	r6, [pc, #544]	; (5500 <__aeabi_dadd+0x618>)
    52de:	e687      	b.n	4ff0 <__aeabi_dadd+0x108>
    52e0:	2500      	movs	r5, #0
    52e2:	e772      	b.n	51ca <__aeabi_dadd+0x2e2>
    52e4:	2100      	movs	r1, #0
    52e6:	e782      	b.n	51ee <__aeabi_dadd+0x306>
    52e8:	0023      	movs	r3, r4
    52ea:	433b      	orrs	r3, r7
    52ec:	2e00      	cmp	r6, #0
    52ee:	d000      	beq.n	52f2 <__aeabi_dadd+0x40a>
    52f0:	e0ab      	b.n	544a <__aeabi_dadd+0x562>
    52f2:	2b00      	cmp	r3, #0
    52f4:	d100      	bne.n	52f8 <__aeabi_dadd+0x410>
    52f6:	e0e7      	b.n	54c8 <__aeabi_dadd+0x5e0>
    52f8:	000b      	movs	r3, r1
    52fa:	4313      	orrs	r3, r2
    52fc:	d100      	bne.n	5300 <__aeabi_dadd+0x418>
    52fe:	e677      	b.n	4ff0 <__aeabi_dadd+0x108>
    5300:	18ba      	adds	r2, r7, r2
    5302:	42ba      	cmp	r2, r7
    5304:	41bf      	sbcs	r7, r7
    5306:	1864      	adds	r4, r4, r1
    5308:	427f      	negs	r7, r7
    530a:	19e4      	adds	r4, r4, r7
    530c:	0223      	lsls	r3, r4, #8
    530e:	d400      	bmi.n	5312 <__aeabi_dadd+0x42a>
    5310:	e0f2      	b.n	54f8 <__aeabi_dadd+0x610>
    5312:	4b7c      	ldr	r3, [pc, #496]	; (5504 <__aeabi_dadd+0x61c>)
    5314:	0017      	movs	r7, r2
    5316:	401c      	ands	r4, r3
    5318:	0006      	movs	r6, r0
    531a:	e669      	b.n	4ff0 <__aeabi_dadd+0x108>
    531c:	0020      	movs	r0, r4
    531e:	4338      	orrs	r0, r7
    5320:	2e00      	cmp	r6, #0
    5322:	d1d1      	bne.n	52c8 <__aeabi_dadd+0x3e0>
    5324:	2800      	cmp	r0, #0
    5326:	d15b      	bne.n	53e0 <__aeabi_dadd+0x4f8>
    5328:	001c      	movs	r4, r3
    532a:	4314      	orrs	r4, r2
    532c:	d100      	bne.n	5330 <__aeabi_dadd+0x448>
    532e:	e0a8      	b.n	5482 <__aeabi_dadd+0x59a>
    5330:	001c      	movs	r4, r3
    5332:	0017      	movs	r7, r2
    5334:	46d8      	mov	r8, fp
    5336:	e65b      	b.n	4ff0 <__aeabi_dadd+0x108>
    5338:	0006      	movs	r6, r0
    533a:	2400      	movs	r4, #0
    533c:	2700      	movs	r7, #0
    533e:	e697      	b.n	5070 <__aeabi_dadd+0x188>
    5340:	4650      	mov	r0, sl
    5342:	000b      	movs	r3, r1
    5344:	3820      	subs	r0, #32
    5346:	40c3      	lsrs	r3, r0
    5348:	4699      	mov	r9, r3
    534a:	4653      	mov	r3, sl
    534c:	2b20      	cmp	r3, #32
    534e:	d100      	bne.n	5352 <__aeabi_dadd+0x46a>
    5350:	e095      	b.n	547e <__aeabi_dadd+0x596>
    5352:	2340      	movs	r3, #64	; 0x40
    5354:	4650      	mov	r0, sl
    5356:	1a1b      	subs	r3, r3, r0
    5358:	4099      	lsls	r1, r3
    535a:	430a      	orrs	r2, r1
    535c:	1e51      	subs	r1, r2, #1
    535e:	418a      	sbcs	r2, r1
    5360:	464b      	mov	r3, r9
    5362:	2100      	movs	r1, #0
    5364:	431a      	orrs	r2, r3
    5366:	e69f      	b.n	50a8 <__aeabi_dadd+0x1c0>
    5368:	2e00      	cmp	r6, #0
    536a:	d130      	bne.n	53ce <__aeabi_dadd+0x4e6>
    536c:	0026      	movs	r6, r4
    536e:	433e      	orrs	r6, r7
    5370:	d067      	beq.n	5442 <__aeabi_dadd+0x55a>
    5372:	43db      	mvns	r3, r3
    5374:	469a      	mov	sl, r3
    5376:	2b00      	cmp	r3, #0
    5378:	d01c      	beq.n	53b4 <__aeabi_dadd+0x4cc>
    537a:	4e61      	ldr	r6, [pc, #388]	; (5500 <__aeabi_dadd+0x618>)
    537c:	42b0      	cmp	r0, r6
    537e:	d060      	beq.n	5442 <__aeabi_dadd+0x55a>
    5380:	4653      	mov	r3, sl
    5382:	2b38      	cmp	r3, #56	; 0x38
    5384:	dd00      	ble.n	5388 <__aeabi_dadd+0x4a0>
    5386:	e096      	b.n	54b6 <__aeabi_dadd+0x5ce>
    5388:	2b1f      	cmp	r3, #31
    538a:	dd00      	ble.n	538e <__aeabi_dadd+0x4a6>
    538c:	e09f      	b.n	54ce <__aeabi_dadd+0x5e6>
    538e:	2620      	movs	r6, #32
    5390:	1af3      	subs	r3, r6, r3
    5392:	0026      	movs	r6, r4
    5394:	409e      	lsls	r6, r3
    5396:	469c      	mov	ip, r3
    5398:	46b3      	mov	fp, r6
    539a:	4653      	mov	r3, sl
    539c:	003e      	movs	r6, r7
    539e:	40de      	lsrs	r6, r3
    53a0:	0033      	movs	r3, r6
    53a2:	465e      	mov	r6, fp
    53a4:	431e      	orrs	r6, r3
    53a6:	4663      	mov	r3, ip
    53a8:	409f      	lsls	r7, r3
    53aa:	1e7b      	subs	r3, r7, #1
    53ac:	419f      	sbcs	r7, r3
    53ae:	4653      	mov	r3, sl
    53b0:	40dc      	lsrs	r4, r3
    53b2:	4337      	orrs	r7, r6
    53b4:	18bf      	adds	r7, r7, r2
    53b6:	4297      	cmp	r7, r2
    53b8:	4192      	sbcs	r2, r2
    53ba:	1864      	adds	r4, r4, r1
    53bc:	4252      	negs	r2, r2
    53be:	18a4      	adds	r4, r4, r2
    53c0:	0006      	movs	r6, r0
    53c2:	e678      	b.n	50b6 <__aeabi_dadd+0x1ce>
    53c4:	4327      	orrs	r7, r4
    53c6:	1e7c      	subs	r4, r7, #1
    53c8:	41a7      	sbcs	r7, r4
    53ca:	2400      	movs	r4, #0
    53cc:	e737      	b.n	523e <__aeabi_dadd+0x356>
    53ce:	4e4c      	ldr	r6, [pc, #304]	; (5500 <__aeabi_dadd+0x618>)
    53d0:	42b0      	cmp	r0, r6
    53d2:	d036      	beq.n	5442 <__aeabi_dadd+0x55a>
    53d4:	2680      	movs	r6, #128	; 0x80
    53d6:	425b      	negs	r3, r3
    53d8:	0436      	lsls	r6, r6, #16
    53da:	469a      	mov	sl, r3
    53dc:	4334      	orrs	r4, r6
    53de:	e7cf      	b.n	5380 <__aeabi_dadd+0x498>
    53e0:	0018      	movs	r0, r3
    53e2:	4310      	orrs	r0, r2
    53e4:	d100      	bne.n	53e8 <__aeabi_dadd+0x500>
    53e6:	e603      	b.n	4ff0 <__aeabi_dadd+0x108>
    53e8:	1ab8      	subs	r0, r7, r2
    53ea:	4684      	mov	ip, r0
    53ec:	4567      	cmp	r7, ip
    53ee:	41ad      	sbcs	r5, r5
    53f0:	1ae0      	subs	r0, r4, r3
    53f2:	426d      	negs	r5, r5
    53f4:	1b40      	subs	r0, r0, r5
    53f6:	0205      	lsls	r5, r0, #8
    53f8:	d400      	bmi.n	53fc <__aeabi_dadd+0x514>
    53fa:	e62c      	b.n	5056 <__aeabi_dadd+0x16e>
    53fc:	1bd7      	subs	r7, r2, r7
    53fe:	42ba      	cmp	r2, r7
    5400:	4192      	sbcs	r2, r2
    5402:	1b1c      	subs	r4, r3, r4
    5404:	4252      	negs	r2, r2
    5406:	1aa4      	subs	r4, r4, r2
    5408:	46d8      	mov	r8, fp
    540a:	e5f1      	b.n	4ff0 <__aeabi_dadd+0x108>
    540c:	0018      	movs	r0, r3
    540e:	4310      	orrs	r0, r2
    5410:	d100      	bne.n	5414 <__aeabi_dadd+0x52c>
    5412:	e763      	b.n	52dc <__aeabi_dadd+0x3f4>
    5414:	08f8      	lsrs	r0, r7, #3
    5416:	0767      	lsls	r7, r4, #29
    5418:	4307      	orrs	r7, r0
    541a:	2080      	movs	r0, #128	; 0x80
    541c:	08e4      	lsrs	r4, r4, #3
    541e:	0300      	lsls	r0, r0, #12
    5420:	4204      	tst	r4, r0
    5422:	d008      	beq.n	5436 <__aeabi_dadd+0x54e>
    5424:	08dd      	lsrs	r5, r3, #3
    5426:	4205      	tst	r5, r0
    5428:	d105      	bne.n	5436 <__aeabi_dadd+0x54e>
    542a:	08d2      	lsrs	r2, r2, #3
    542c:	0759      	lsls	r1, r3, #29
    542e:	4311      	orrs	r1, r2
    5430:	000f      	movs	r7, r1
    5432:	002c      	movs	r4, r5
    5434:	46d8      	mov	r8, fp
    5436:	0f7b      	lsrs	r3, r7, #29
    5438:	00e4      	lsls	r4, r4, #3
    543a:	431c      	orrs	r4, r3
    543c:	00ff      	lsls	r7, r7, #3
    543e:	4e30      	ldr	r6, [pc, #192]	; (5500 <__aeabi_dadd+0x618>)
    5440:	e5d6      	b.n	4ff0 <__aeabi_dadd+0x108>
    5442:	000c      	movs	r4, r1
    5444:	0017      	movs	r7, r2
    5446:	0006      	movs	r6, r0
    5448:	e5d2      	b.n	4ff0 <__aeabi_dadd+0x108>
    544a:	2b00      	cmp	r3, #0
    544c:	d038      	beq.n	54c0 <__aeabi_dadd+0x5d8>
    544e:	000b      	movs	r3, r1
    5450:	4313      	orrs	r3, r2
    5452:	d100      	bne.n	5456 <__aeabi_dadd+0x56e>
    5454:	e742      	b.n	52dc <__aeabi_dadd+0x3f4>
    5456:	08f8      	lsrs	r0, r7, #3
    5458:	0767      	lsls	r7, r4, #29
    545a:	4307      	orrs	r7, r0
    545c:	2080      	movs	r0, #128	; 0x80
    545e:	08e4      	lsrs	r4, r4, #3
    5460:	0300      	lsls	r0, r0, #12
    5462:	4204      	tst	r4, r0
    5464:	d0e7      	beq.n	5436 <__aeabi_dadd+0x54e>
    5466:	08cb      	lsrs	r3, r1, #3
    5468:	4203      	tst	r3, r0
    546a:	d1e4      	bne.n	5436 <__aeabi_dadd+0x54e>
    546c:	08d2      	lsrs	r2, r2, #3
    546e:	0749      	lsls	r1, r1, #29
    5470:	4311      	orrs	r1, r2
    5472:	000f      	movs	r7, r1
    5474:	001c      	movs	r4, r3
    5476:	e7de      	b.n	5436 <__aeabi_dadd+0x54e>
    5478:	2700      	movs	r7, #0
    547a:	2400      	movs	r4, #0
    547c:	e5d5      	b.n	502a <__aeabi_dadd+0x142>
    547e:	2100      	movs	r1, #0
    5480:	e76b      	b.n	535a <__aeabi_dadd+0x472>
    5482:	2500      	movs	r5, #0
    5484:	2700      	movs	r7, #0
    5486:	e5f3      	b.n	5070 <__aeabi_dadd+0x188>
    5488:	464e      	mov	r6, r9
    548a:	0025      	movs	r5, r4
    548c:	3e20      	subs	r6, #32
    548e:	40f5      	lsrs	r5, r6
    5490:	464b      	mov	r3, r9
    5492:	002e      	movs	r6, r5
    5494:	2b20      	cmp	r3, #32
    5496:	d02d      	beq.n	54f4 <__aeabi_dadd+0x60c>
    5498:	2540      	movs	r5, #64	; 0x40
    549a:	1aed      	subs	r5, r5, r3
    549c:	40ac      	lsls	r4, r5
    549e:	4327      	orrs	r7, r4
    54a0:	1e7c      	subs	r4, r7, #1
    54a2:	41a7      	sbcs	r7, r4
    54a4:	2400      	movs	r4, #0
    54a6:	4337      	orrs	r7, r6
    54a8:	e6c9      	b.n	523e <__aeabi_dadd+0x356>
    54aa:	2480      	movs	r4, #128	; 0x80
    54ac:	2500      	movs	r5, #0
    54ae:	0324      	lsls	r4, r4, #12
    54b0:	4e13      	ldr	r6, [pc, #76]	; (5500 <__aeabi_dadd+0x618>)
    54b2:	2700      	movs	r7, #0
    54b4:	e5dc      	b.n	5070 <__aeabi_dadd+0x188>
    54b6:	4327      	orrs	r7, r4
    54b8:	1e7c      	subs	r4, r7, #1
    54ba:	41a7      	sbcs	r7, r4
    54bc:	2400      	movs	r4, #0
    54be:	e779      	b.n	53b4 <__aeabi_dadd+0x4cc>
    54c0:	000c      	movs	r4, r1
    54c2:	0017      	movs	r7, r2
    54c4:	4e0e      	ldr	r6, [pc, #56]	; (5500 <__aeabi_dadd+0x618>)
    54c6:	e593      	b.n	4ff0 <__aeabi_dadd+0x108>
    54c8:	000c      	movs	r4, r1
    54ca:	0017      	movs	r7, r2
    54cc:	e590      	b.n	4ff0 <__aeabi_dadd+0x108>
    54ce:	4656      	mov	r6, sl
    54d0:	0023      	movs	r3, r4
    54d2:	3e20      	subs	r6, #32
    54d4:	40f3      	lsrs	r3, r6
    54d6:	4699      	mov	r9, r3
    54d8:	4653      	mov	r3, sl
    54da:	2b20      	cmp	r3, #32
    54dc:	d00e      	beq.n	54fc <__aeabi_dadd+0x614>
    54de:	2340      	movs	r3, #64	; 0x40
    54e0:	4656      	mov	r6, sl
    54e2:	1b9b      	subs	r3, r3, r6
    54e4:	409c      	lsls	r4, r3
    54e6:	4327      	orrs	r7, r4
    54e8:	1e7c      	subs	r4, r7, #1
    54ea:	41a7      	sbcs	r7, r4
    54ec:	464b      	mov	r3, r9
    54ee:	2400      	movs	r4, #0
    54f0:	431f      	orrs	r7, r3
    54f2:	e75f      	b.n	53b4 <__aeabi_dadd+0x4cc>
    54f4:	2400      	movs	r4, #0
    54f6:	e7d2      	b.n	549e <__aeabi_dadd+0x5b6>
    54f8:	0017      	movs	r7, r2
    54fa:	e5b2      	b.n	5062 <__aeabi_dadd+0x17a>
    54fc:	2400      	movs	r4, #0
    54fe:	e7f2      	b.n	54e6 <__aeabi_dadd+0x5fe>
    5500:	000007ff 	.word	0x000007ff
    5504:	ff7fffff 	.word	0xff7fffff

00005508 <__aeabi_ddiv>:
    5508:	b5f0      	push	{r4, r5, r6, r7, lr}
    550a:	4657      	mov	r7, sl
    550c:	4645      	mov	r5, r8
    550e:	46de      	mov	lr, fp
    5510:	464e      	mov	r6, r9
    5512:	b5e0      	push	{r5, r6, r7, lr}
    5514:	004c      	lsls	r4, r1, #1
    5516:	030e      	lsls	r6, r1, #12
    5518:	b087      	sub	sp, #28
    551a:	4683      	mov	fp, r0
    551c:	4692      	mov	sl, r2
    551e:	001d      	movs	r5, r3
    5520:	4680      	mov	r8, r0
    5522:	0b36      	lsrs	r6, r6, #12
    5524:	0d64      	lsrs	r4, r4, #21
    5526:	0fcf      	lsrs	r7, r1, #31
    5528:	2c00      	cmp	r4, #0
    552a:	d04f      	beq.n	55cc <__aeabi_ddiv+0xc4>
    552c:	4b6f      	ldr	r3, [pc, #444]	; (56ec <__aeabi_ddiv+0x1e4>)
    552e:	429c      	cmp	r4, r3
    5530:	d035      	beq.n	559e <__aeabi_ddiv+0x96>
    5532:	2380      	movs	r3, #128	; 0x80
    5534:	0f42      	lsrs	r2, r0, #29
    5536:	041b      	lsls	r3, r3, #16
    5538:	00f6      	lsls	r6, r6, #3
    553a:	4313      	orrs	r3, r2
    553c:	4333      	orrs	r3, r6
    553e:	4699      	mov	r9, r3
    5540:	00c3      	lsls	r3, r0, #3
    5542:	4698      	mov	r8, r3
    5544:	4b6a      	ldr	r3, [pc, #424]	; (56f0 <__aeabi_ddiv+0x1e8>)
    5546:	2600      	movs	r6, #0
    5548:	469c      	mov	ip, r3
    554a:	2300      	movs	r3, #0
    554c:	4464      	add	r4, ip
    554e:	9303      	str	r3, [sp, #12]
    5550:	032b      	lsls	r3, r5, #12
    5552:	0b1b      	lsrs	r3, r3, #12
    5554:	469b      	mov	fp, r3
    5556:	006b      	lsls	r3, r5, #1
    5558:	0fed      	lsrs	r5, r5, #31
    555a:	4650      	mov	r0, sl
    555c:	0d5b      	lsrs	r3, r3, #21
    555e:	9501      	str	r5, [sp, #4]
    5560:	d05e      	beq.n	5620 <__aeabi_ddiv+0x118>
    5562:	4a62      	ldr	r2, [pc, #392]	; (56ec <__aeabi_ddiv+0x1e4>)
    5564:	4293      	cmp	r3, r2
    5566:	d053      	beq.n	5610 <__aeabi_ddiv+0x108>
    5568:	465a      	mov	r2, fp
    556a:	00d1      	lsls	r1, r2, #3
    556c:	2280      	movs	r2, #128	; 0x80
    556e:	0f40      	lsrs	r0, r0, #29
    5570:	0412      	lsls	r2, r2, #16
    5572:	4302      	orrs	r2, r0
    5574:	430a      	orrs	r2, r1
    5576:	4693      	mov	fp, r2
    5578:	4652      	mov	r2, sl
    557a:	00d1      	lsls	r1, r2, #3
    557c:	4a5c      	ldr	r2, [pc, #368]	; (56f0 <__aeabi_ddiv+0x1e8>)
    557e:	4694      	mov	ip, r2
    5580:	2200      	movs	r2, #0
    5582:	4463      	add	r3, ip
    5584:	0038      	movs	r0, r7
    5586:	4068      	eors	r0, r5
    5588:	4684      	mov	ip, r0
    558a:	9002      	str	r0, [sp, #8]
    558c:	1ae4      	subs	r4, r4, r3
    558e:	4316      	orrs	r6, r2
    5590:	2e0f      	cmp	r6, #15
    5592:	d900      	bls.n	5596 <__aeabi_ddiv+0x8e>
    5594:	e0b4      	b.n	5700 <__aeabi_ddiv+0x1f8>
    5596:	4b57      	ldr	r3, [pc, #348]	; (56f4 <__aeabi_ddiv+0x1ec>)
    5598:	00b6      	lsls	r6, r6, #2
    559a:	599b      	ldr	r3, [r3, r6]
    559c:	469f      	mov	pc, r3
    559e:	0003      	movs	r3, r0
    55a0:	4333      	orrs	r3, r6
    55a2:	4699      	mov	r9, r3
    55a4:	d16c      	bne.n	5680 <__aeabi_ddiv+0x178>
    55a6:	2300      	movs	r3, #0
    55a8:	4698      	mov	r8, r3
    55aa:	3302      	adds	r3, #2
    55ac:	2608      	movs	r6, #8
    55ae:	9303      	str	r3, [sp, #12]
    55b0:	e7ce      	b.n	5550 <__aeabi_ddiv+0x48>
    55b2:	46cb      	mov	fp, r9
    55b4:	4641      	mov	r1, r8
    55b6:	9a03      	ldr	r2, [sp, #12]
    55b8:	9701      	str	r7, [sp, #4]
    55ba:	2a02      	cmp	r2, #2
    55bc:	d165      	bne.n	568a <__aeabi_ddiv+0x182>
    55be:	9b01      	ldr	r3, [sp, #4]
    55c0:	4c4a      	ldr	r4, [pc, #296]	; (56ec <__aeabi_ddiv+0x1e4>)
    55c2:	469c      	mov	ip, r3
    55c4:	2300      	movs	r3, #0
    55c6:	2200      	movs	r2, #0
    55c8:	4698      	mov	r8, r3
    55ca:	e06b      	b.n	56a4 <__aeabi_ddiv+0x19c>
    55cc:	0003      	movs	r3, r0
    55ce:	4333      	orrs	r3, r6
    55d0:	4699      	mov	r9, r3
    55d2:	d04e      	beq.n	5672 <__aeabi_ddiv+0x16a>
    55d4:	2e00      	cmp	r6, #0
    55d6:	d100      	bne.n	55da <__aeabi_ddiv+0xd2>
    55d8:	e1bc      	b.n	5954 <__aeabi_ddiv+0x44c>
    55da:	0030      	movs	r0, r6
    55dc:	f001 f8ca 	bl	6774 <__clzsi2>
    55e0:	0003      	movs	r3, r0
    55e2:	3b0b      	subs	r3, #11
    55e4:	2b1c      	cmp	r3, #28
    55e6:	dd00      	ble.n	55ea <__aeabi_ddiv+0xe2>
    55e8:	e1ac      	b.n	5944 <__aeabi_ddiv+0x43c>
    55ea:	221d      	movs	r2, #29
    55ec:	1ad3      	subs	r3, r2, r3
    55ee:	465a      	mov	r2, fp
    55f0:	0001      	movs	r1, r0
    55f2:	40da      	lsrs	r2, r3
    55f4:	3908      	subs	r1, #8
    55f6:	408e      	lsls	r6, r1
    55f8:	0013      	movs	r3, r2
    55fa:	4333      	orrs	r3, r6
    55fc:	4699      	mov	r9, r3
    55fe:	465b      	mov	r3, fp
    5600:	408b      	lsls	r3, r1
    5602:	4698      	mov	r8, r3
    5604:	2300      	movs	r3, #0
    5606:	4c3c      	ldr	r4, [pc, #240]	; (56f8 <__aeabi_ddiv+0x1f0>)
    5608:	2600      	movs	r6, #0
    560a:	1a24      	subs	r4, r4, r0
    560c:	9303      	str	r3, [sp, #12]
    560e:	e79f      	b.n	5550 <__aeabi_ddiv+0x48>
    5610:	4651      	mov	r1, sl
    5612:	465a      	mov	r2, fp
    5614:	4311      	orrs	r1, r2
    5616:	d129      	bne.n	566c <__aeabi_ddiv+0x164>
    5618:	2200      	movs	r2, #0
    561a:	4693      	mov	fp, r2
    561c:	3202      	adds	r2, #2
    561e:	e7b1      	b.n	5584 <__aeabi_ddiv+0x7c>
    5620:	4659      	mov	r1, fp
    5622:	4301      	orrs	r1, r0
    5624:	d01e      	beq.n	5664 <__aeabi_ddiv+0x15c>
    5626:	465b      	mov	r3, fp
    5628:	2b00      	cmp	r3, #0
    562a:	d100      	bne.n	562e <__aeabi_ddiv+0x126>
    562c:	e19e      	b.n	596c <__aeabi_ddiv+0x464>
    562e:	4658      	mov	r0, fp
    5630:	f001 f8a0 	bl	6774 <__clzsi2>
    5634:	0003      	movs	r3, r0
    5636:	3b0b      	subs	r3, #11
    5638:	2b1c      	cmp	r3, #28
    563a:	dd00      	ble.n	563e <__aeabi_ddiv+0x136>
    563c:	e18f      	b.n	595e <__aeabi_ddiv+0x456>
    563e:	0002      	movs	r2, r0
    5640:	4659      	mov	r1, fp
    5642:	3a08      	subs	r2, #8
    5644:	4091      	lsls	r1, r2
    5646:	468b      	mov	fp, r1
    5648:	211d      	movs	r1, #29
    564a:	1acb      	subs	r3, r1, r3
    564c:	4651      	mov	r1, sl
    564e:	40d9      	lsrs	r1, r3
    5650:	000b      	movs	r3, r1
    5652:	4659      	mov	r1, fp
    5654:	430b      	orrs	r3, r1
    5656:	4651      	mov	r1, sl
    5658:	469b      	mov	fp, r3
    565a:	4091      	lsls	r1, r2
    565c:	4b26      	ldr	r3, [pc, #152]	; (56f8 <__aeabi_ddiv+0x1f0>)
    565e:	2200      	movs	r2, #0
    5660:	1a1b      	subs	r3, r3, r0
    5662:	e78f      	b.n	5584 <__aeabi_ddiv+0x7c>
    5664:	2300      	movs	r3, #0
    5666:	2201      	movs	r2, #1
    5668:	469b      	mov	fp, r3
    566a:	e78b      	b.n	5584 <__aeabi_ddiv+0x7c>
    566c:	4651      	mov	r1, sl
    566e:	2203      	movs	r2, #3
    5670:	e788      	b.n	5584 <__aeabi_ddiv+0x7c>
    5672:	2300      	movs	r3, #0
    5674:	4698      	mov	r8, r3
    5676:	3301      	adds	r3, #1
    5678:	2604      	movs	r6, #4
    567a:	2400      	movs	r4, #0
    567c:	9303      	str	r3, [sp, #12]
    567e:	e767      	b.n	5550 <__aeabi_ddiv+0x48>
    5680:	2303      	movs	r3, #3
    5682:	46b1      	mov	r9, r6
    5684:	9303      	str	r3, [sp, #12]
    5686:	260c      	movs	r6, #12
    5688:	e762      	b.n	5550 <__aeabi_ddiv+0x48>
    568a:	2a03      	cmp	r2, #3
    568c:	d100      	bne.n	5690 <__aeabi_ddiv+0x188>
    568e:	e25c      	b.n	5b4a <__aeabi_ddiv+0x642>
    5690:	9b01      	ldr	r3, [sp, #4]
    5692:	2a01      	cmp	r2, #1
    5694:	d000      	beq.n	5698 <__aeabi_ddiv+0x190>
    5696:	e1e4      	b.n	5a62 <__aeabi_ddiv+0x55a>
    5698:	4013      	ands	r3, r2
    569a:	469c      	mov	ip, r3
    569c:	2300      	movs	r3, #0
    569e:	2400      	movs	r4, #0
    56a0:	2200      	movs	r2, #0
    56a2:	4698      	mov	r8, r3
    56a4:	2100      	movs	r1, #0
    56a6:	0312      	lsls	r2, r2, #12
    56a8:	0b13      	lsrs	r3, r2, #12
    56aa:	0d0a      	lsrs	r2, r1, #20
    56ac:	0512      	lsls	r2, r2, #20
    56ae:	431a      	orrs	r2, r3
    56b0:	0523      	lsls	r3, r4, #20
    56b2:	4c12      	ldr	r4, [pc, #72]	; (56fc <__aeabi_ddiv+0x1f4>)
    56b4:	4640      	mov	r0, r8
    56b6:	4022      	ands	r2, r4
    56b8:	4313      	orrs	r3, r2
    56ba:	4662      	mov	r2, ip
    56bc:	005b      	lsls	r3, r3, #1
    56be:	07d2      	lsls	r2, r2, #31
    56c0:	085b      	lsrs	r3, r3, #1
    56c2:	4313      	orrs	r3, r2
    56c4:	0019      	movs	r1, r3
    56c6:	b007      	add	sp, #28
    56c8:	bc3c      	pop	{r2, r3, r4, r5}
    56ca:	4690      	mov	r8, r2
    56cc:	4699      	mov	r9, r3
    56ce:	46a2      	mov	sl, r4
    56d0:	46ab      	mov	fp, r5
    56d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56d4:	2300      	movs	r3, #0
    56d6:	2280      	movs	r2, #128	; 0x80
    56d8:	469c      	mov	ip, r3
    56da:	0312      	lsls	r2, r2, #12
    56dc:	4698      	mov	r8, r3
    56de:	4c03      	ldr	r4, [pc, #12]	; (56ec <__aeabi_ddiv+0x1e4>)
    56e0:	e7e0      	b.n	56a4 <__aeabi_ddiv+0x19c>
    56e2:	2300      	movs	r3, #0
    56e4:	4c01      	ldr	r4, [pc, #4]	; (56ec <__aeabi_ddiv+0x1e4>)
    56e6:	2200      	movs	r2, #0
    56e8:	4698      	mov	r8, r3
    56ea:	e7db      	b.n	56a4 <__aeabi_ddiv+0x19c>
    56ec:	000007ff 	.word	0x000007ff
    56f0:	fffffc01 	.word	0xfffffc01
    56f4:	00008da4 	.word	0x00008da4
    56f8:	fffffc0d 	.word	0xfffffc0d
    56fc:	800fffff 	.word	0x800fffff
    5700:	45d9      	cmp	r9, fp
    5702:	d900      	bls.n	5706 <__aeabi_ddiv+0x1fe>
    5704:	e139      	b.n	597a <__aeabi_ddiv+0x472>
    5706:	d100      	bne.n	570a <__aeabi_ddiv+0x202>
    5708:	e134      	b.n	5974 <__aeabi_ddiv+0x46c>
    570a:	2300      	movs	r3, #0
    570c:	4646      	mov	r6, r8
    570e:	464d      	mov	r5, r9
    5710:	469a      	mov	sl, r3
    5712:	3c01      	subs	r4, #1
    5714:	465b      	mov	r3, fp
    5716:	0e0a      	lsrs	r2, r1, #24
    5718:	021b      	lsls	r3, r3, #8
    571a:	431a      	orrs	r2, r3
    571c:	020b      	lsls	r3, r1, #8
    571e:	0c17      	lsrs	r7, r2, #16
    5720:	9303      	str	r3, [sp, #12]
    5722:	0413      	lsls	r3, r2, #16
    5724:	0c1b      	lsrs	r3, r3, #16
    5726:	0039      	movs	r1, r7
    5728:	0028      	movs	r0, r5
    572a:	4690      	mov	r8, r2
    572c:	9301      	str	r3, [sp, #4]
    572e:	f7ff fb25 	bl	4d7c <__udivsi3>
    5732:	0002      	movs	r2, r0
    5734:	9b01      	ldr	r3, [sp, #4]
    5736:	4683      	mov	fp, r0
    5738:	435a      	muls	r2, r3
    573a:	0028      	movs	r0, r5
    573c:	0039      	movs	r1, r7
    573e:	4691      	mov	r9, r2
    5740:	f7ff fba2 	bl	4e88 <__aeabi_uidivmod>
    5744:	0c35      	lsrs	r5, r6, #16
    5746:	0409      	lsls	r1, r1, #16
    5748:	430d      	orrs	r5, r1
    574a:	45a9      	cmp	r9, r5
    574c:	d90d      	bls.n	576a <__aeabi_ddiv+0x262>
    574e:	465b      	mov	r3, fp
    5750:	4445      	add	r5, r8
    5752:	3b01      	subs	r3, #1
    5754:	45a8      	cmp	r8, r5
    5756:	d900      	bls.n	575a <__aeabi_ddiv+0x252>
    5758:	e13a      	b.n	59d0 <__aeabi_ddiv+0x4c8>
    575a:	45a9      	cmp	r9, r5
    575c:	d800      	bhi.n	5760 <__aeabi_ddiv+0x258>
    575e:	e137      	b.n	59d0 <__aeabi_ddiv+0x4c8>
    5760:	2302      	movs	r3, #2
    5762:	425b      	negs	r3, r3
    5764:	469c      	mov	ip, r3
    5766:	4445      	add	r5, r8
    5768:	44e3      	add	fp, ip
    576a:	464b      	mov	r3, r9
    576c:	1aeb      	subs	r3, r5, r3
    576e:	0039      	movs	r1, r7
    5770:	0018      	movs	r0, r3
    5772:	9304      	str	r3, [sp, #16]
    5774:	f7ff fb02 	bl	4d7c <__udivsi3>
    5778:	9b01      	ldr	r3, [sp, #4]
    577a:	0005      	movs	r5, r0
    577c:	4343      	muls	r3, r0
    577e:	0039      	movs	r1, r7
    5780:	9804      	ldr	r0, [sp, #16]
    5782:	4699      	mov	r9, r3
    5784:	f7ff fb80 	bl	4e88 <__aeabi_uidivmod>
    5788:	0433      	lsls	r3, r6, #16
    578a:	0409      	lsls	r1, r1, #16
    578c:	0c1b      	lsrs	r3, r3, #16
    578e:	430b      	orrs	r3, r1
    5790:	4599      	cmp	r9, r3
    5792:	d909      	bls.n	57a8 <__aeabi_ddiv+0x2a0>
    5794:	4443      	add	r3, r8
    5796:	1e6a      	subs	r2, r5, #1
    5798:	4598      	cmp	r8, r3
    579a:	d900      	bls.n	579e <__aeabi_ddiv+0x296>
    579c:	e11a      	b.n	59d4 <__aeabi_ddiv+0x4cc>
    579e:	4599      	cmp	r9, r3
    57a0:	d800      	bhi.n	57a4 <__aeabi_ddiv+0x29c>
    57a2:	e117      	b.n	59d4 <__aeabi_ddiv+0x4cc>
    57a4:	3d02      	subs	r5, #2
    57a6:	4443      	add	r3, r8
    57a8:	464a      	mov	r2, r9
    57aa:	1a9b      	subs	r3, r3, r2
    57ac:	465a      	mov	r2, fp
    57ae:	0412      	lsls	r2, r2, #16
    57b0:	432a      	orrs	r2, r5
    57b2:	9903      	ldr	r1, [sp, #12]
    57b4:	4693      	mov	fp, r2
    57b6:	0c10      	lsrs	r0, r2, #16
    57b8:	0c0a      	lsrs	r2, r1, #16
    57ba:	4691      	mov	r9, r2
    57bc:	0409      	lsls	r1, r1, #16
    57be:	465a      	mov	r2, fp
    57c0:	0c09      	lsrs	r1, r1, #16
    57c2:	464e      	mov	r6, r9
    57c4:	000d      	movs	r5, r1
    57c6:	0412      	lsls	r2, r2, #16
    57c8:	0c12      	lsrs	r2, r2, #16
    57ca:	4345      	muls	r5, r0
    57cc:	9105      	str	r1, [sp, #20]
    57ce:	4351      	muls	r1, r2
    57d0:	4372      	muls	r2, r6
    57d2:	4370      	muls	r0, r6
    57d4:	1952      	adds	r2, r2, r5
    57d6:	0c0e      	lsrs	r6, r1, #16
    57d8:	18b2      	adds	r2, r6, r2
    57da:	4295      	cmp	r5, r2
    57dc:	d903      	bls.n	57e6 <__aeabi_ddiv+0x2de>
    57de:	2580      	movs	r5, #128	; 0x80
    57e0:	026d      	lsls	r5, r5, #9
    57e2:	46ac      	mov	ip, r5
    57e4:	4460      	add	r0, ip
    57e6:	0c15      	lsrs	r5, r2, #16
    57e8:	0409      	lsls	r1, r1, #16
    57ea:	0412      	lsls	r2, r2, #16
    57ec:	0c09      	lsrs	r1, r1, #16
    57ee:	1828      	adds	r0, r5, r0
    57f0:	1852      	adds	r2, r2, r1
    57f2:	4283      	cmp	r3, r0
    57f4:	d200      	bcs.n	57f8 <__aeabi_ddiv+0x2f0>
    57f6:	e0ce      	b.n	5996 <__aeabi_ddiv+0x48e>
    57f8:	d100      	bne.n	57fc <__aeabi_ddiv+0x2f4>
    57fa:	e0c8      	b.n	598e <__aeabi_ddiv+0x486>
    57fc:	1a1d      	subs	r5, r3, r0
    57fe:	4653      	mov	r3, sl
    5800:	1a9e      	subs	r6, r3, r2
    5802:	45b2      	cmp	sl, r6
    5804:	4192      	sbcs	r2, r2
    5806:	4252      	negs	r2, r2
    5808:	1aab      	subs	r3, r5, r2
    580a:	469a      	mov	sl, r3
    580c:	4598      	cmp	r8, r3
    580e:	d100      	bne.n	5812 <__aeabi_ddiv+0x30a>
    5810:	e117      	b.n	5a42 <__aeabi_ddiv+0x53a>
    5812:	0039      	movs	r1, r7
    5814:	0018      	movs	r0, r3
    5816:	f7ff fab1 	bl	4d7c <__udivsi3>
    581a:	9b01      	ldr	r3, [sp, #4]
    581c:	0005      	movs	r5, r0
    581e:	4343      	muls	r3, r0
    5820:	0039      	movs	r1, r7
    5822:	4650      	mov	r0, sl
    5824:	9304      	str	r3, [sp, #16]
    5826:	f7ff fb2f 	bl	4e88 <__aeabi_uidivmod>
    582a:	9804      	ldr	r0, [sp, #16]
    582c:	040b      	lsls	r3, r1, #16
    582e:	0c31      	lsrs	r1, r6, #16
    5830:	4319      	orrs	r1, r3
    5832:	4288      	cmp	r0, r1
    5834:	d909      	bls.n	584a <__aeabi_ddiv+0x342>
    5836:	4441      	add	r1, r8
    5838:	1e6b      	subs	r3, r5, #1
    583a:	4588      	cmp	r8, r1
    583c:	d900      	bls.n	5840 <__aeabi_ddiv+0x338>
    583e:	e107      	b.n	5a50 <__aeabi_ddiv+0x548>
    5840:	4288      	cmp	r0, r1
    5842:	d800      	bhi.n	5846 <__aeabi_ddiv+0x33e>
    5844:	e104      	b.n	5a50 <__aeabi_ddiv+0x548>
    5846:	3d02      	subs	r5, #2
    5848:	4441      	add	r1, r8
    584a:	9b04      	ldr	r3, [sp, #16]
    584c:	1acb      	subs	r3, r1, r3
    584e:	0018      	movs	r0, r3
    5850:	0039      	movs	r1, r7
    5852:	9304      	str	r3, [sp, #16]
    5854:	f7ff fa92 	bl	4d7c <__udivsi3>
    5858:	9b01      	ldr	r3, [sp, #4]
    585a:	4682      	mov	sl, r0
    585c:	4343      	muls	r3, r0
    585e:	0039      	movs	r1, r7
    5860:	9804      	ldr	r0, [sp, #16]
    5862:	9301      	str	r3, [sp, #4]
    5864:	f7ff fb10 	bl	4e88 <__aeabi_uidivmod>
    5868:	9801      	ldr	r0, [sp, #4]
    586a:	040b      	lsls	r3, r1, #16
    586c:	0431      	lsls	r1, r6, #16
    586e:	0c09      	lsrs	r1, r1, #16
    5870:	4319      	orrs	r1, r3
    5872:	4288      	cmp	r0, r1
    5874:	d90d      	bls.n	5892 <__aeabi_ddiv+0x38a>
    5876:	4653      	mov	r3, sl
    5878:	4441      	add	r1, r8
    587a:	3b01      	subs	r3, #1
    587c:	4588      	cmp	r8, r1
    587e:	d900      	bls.n	5882 <__aeabi_ddiv+0x37a>
    5880:	e0e8      	b.n	5a54 <__aeabi_ddiv+0x54c>
    5882:	4288      	cmp	r0, r1
    5884:	d800      	bhi.n	5888 <__aeabi_ddiv+0x380>
    5886:	e0e5      	b.n	5a54 <__aeabi_ddiv+0x54c>
    5888:	2302      	movs	r3, #2
    588a:	425b      	negs	r3, r3
    588c:	469c      	mov	ip, r3
    588e:	4441      	add	r1, r8
    5890:	44e2      	add	sl, ip
    5892:	9b01      	ldr	r3, [sp, #4]
    5894:	042d      	lsls	r5, r5, #16
    5896:	1ace      	subs	r6, r1, r3
    5898:	4651      	mov	r1, sl
    589a:	4329      	orrs	r1, r5
    589c:	9d05      	ldr	r5, [sp, #20]
    589e:	464f      	mov	r7, r9
    58a0:	002a      	movs	r2, r5
    58a2:	040b      	lsls	r3, r1, #16
    58a4:	0c08      	lsrs	r0, r1, #16
    58a6:	0c1b      	lsrs	r3, r3, #16
    58a8:	435a      	muls	r2, r3
    58aa:	4345      	muls	r5, r0
    58ac:	437b      	muls	r3, r7
    58ae:	4378      	muls	r0, r7
    58b0:	195b      	adds	r3, r3, r5
    58b2:	0c17      	lsrs	r7, r2, #16
    58b4:	18fb      	adds	r3, r7, r3
    58b6:	429d      	cmp	r5, r3
    58b8:	d903      	bls.n	58c2 <__aeabi_ddiv+0x3ba>
    58ba:	2580      	movs	r5, #128	; 0x80
    58bc:	026d      	lsls	r5, r5, #9
    58be:	46ac      	mov	ip, r5
    58c0:	4460      	add	r0, ip
    58c2:	0c1d      	lsrs	r5, r3, #16
    58c4:	0412      	lsls	r2, r2, #16
    58c6:	041b      	lsls	r3, r3, #16
    58c8:	0c12      	lsrs	r2, r2, #16
    58ca:	1828      	adds	r0, r5, r0
    58cc:	189b      	adds	r3, r3, r2
    58ce:	4286      	cmp	r6, r0
    58d0:	d200      	bcs.n	58d4 <__aeabi_ddiv+0x3cc>
    58d2:	e093      	b.n	59fc <__aeabi_ddiv+0x4f4>
    58d4:	d100      	bne.n	58d8 <__aeabi_ddiv+0x3d0>
    58d6:	e08e      	b.n	59f6 <__aeabi_ddiv+0x4ee>
    58d8:	2301      	movs	r3, #1
    58da:	4319      	orrs	r1, r3
    58dc:	4ba0      	ldr	r3, [pc, #640]	; (5b60 <__aeabi_ddiv+0x658>)
    58de:	18e3      	adds	r3, r4, r3
    58e0:	2b00      	cmp	r3, #0
    58e2:	dc00      	bgt.n	58e6 <__aeabi_ddiv+0x3de>
    58e4:	e099      	b.n	5a1a <__aeabi_ddiv+0x512>
    58e6:	074a      	lsls	r2, r1, #29
    58e8:	d000      	beq.n	58ec <__aeabi_ddiv+0x3e4>
    58ea:	e09e      	b.n	5a2a <__aeabi_ddiv+0x522>
    58ec:	465a      	mov	r2, fp
    58ee:	01d2      	lsls	r2, r2, #7
    58f0:	d506      	bpl.n	5900 <__aeabi_ddiv+0x3f8>
    58f2:	465a      	mov	r2, fp
    58f4:	4b9b      	ldr	r3, [pc, #620]	; (5b64 <__aeabi_ddiv+0x65c>)
    58f6:	401a      	ands	r2, r3
    58f8:	2380      	movs	r3, #128	; 0x80
    58fa:	4693      	mov	fp, r2
    58fc:	00db      	lsls	r3, r3, #3
    58fe:	18e3      	adds	r3, r4, r3
    5900:	4a99      	ldr	r2, [pc, #612]	; (5b68 <__aeabi_ddiv+0x660>)
    5902:	4293      	cmp	r3, r2
    5904:	dd68      	ble.n	59d8 <__aeabi_ddiv+0x4d0>
    5906:	2301      	movs	r3, #1
    5908:	9a02      	ldr	r2, [sp, #8]
    590a:	4c98      	ldr	r4, [pc, #608]	; (5b6c <__aeabi_ddiv+0x664>)
    590c:	401a      	ands	r2, r3
    590e:	2300      	movs	r3, #0
    5910:	4694      	mov	ip, r2
    5912:	4698      	mov	r8, r3
    5914:	2200      	movs	r2, #0
    5916:	e6c5      	b.n	56a4 <__aeabi_ddiv+0x19c>
    5918:	2280      	movs	r2, #128	; 0x80
    591a:	464b      	mov	r3, r9
    591c:	0312      	lsls	r2, r2, #12
    591e:	4213      	tst	r3, r2
    5920:	d00a      	beq.n	5938 <__aeabi_ddiv+0x430>
    5922:	465b      	mov	r3, fp
    5924:	4213      	tst	r3, r2
    5926:	d106      	bne.n	5936 <__aeabi_ddiv+0x42e>
    5928:	431a      	orrs	r2, r3
    592a:	0312      	lsls	r2, r2, #12
    592c:	0b12      	lsrs	r2, r2, #12
    592e:	46ac      	mov	ip, r5
    5930:	4688      	mov	r8, r1
    5932:	4c8e      	ldr	r4, [pc, #568]	; (5b6c <__aeabi_ddiv+0x664>)
    5934:	e6b6      	b.n	56a4 <__aeabi_ddiv+0x19c>
    5936:	464b      	mov	r3, r9
    5938:	431a      	orrs	r2, r3
    593a:	0312      	lsls	r2, r2, #12
    593c:	0b12      	lsrs	r2, r2, #12
    593e:	46bc      	mov	ip, r7
    5940:	4c8a      	ldr	r4, [pc, #552]	; (5b6c <__aeabi_ddiv+0x664>)
    5942:	e6af      	b.n	56a4 <__aeabi_ddiv+0x19c>
    5944:	0003      	movs	r3, r0
    5946:	465a      	mov	r2, fp
    5948:	3b28      	subs	r3, #40	; 0x28
    594a:	409a      	lsls	r2, r3
    594c:	2300      	movs	r3, #0
    594e:	4691      	mov	r9, r2
    5950:	4698      	mov	r8, r3
    5952:	e657      	b.n	5604 <__aeabi_ddiv+0xfc>
    5954:	4658      	mov	r0, fp
    5956:	f000 ff0d 	bl	6774 <__clzsi2>
    595a:	3020      	adds	r0, #32
    595c:	e640      	b.n	55e0 <__aeabi_ddiv+0xd8>
    595e:	0003      	movs	r3, r0
    5960:	4652      	mov	r2, sl
    5962:	3b28      	subs	r3, #40	; 0x28
    5964:	409a      	lsls	r2, r3
    5966:	2100      	movs	r1, #0
    5968:	4693      	mov	fp, r2
    596a:	e677      	b.n	565c <__aeabi_ddiv+0x154>
    596c:	f000 ff02 	bl	6774 <__clzsi2>
    5970:	3020      	adds	r0, #32
    5972:	e65f      	b.n	5634 <__aeabi_ddiv+0x12c>
    5974:	4588      	cmp	r8, r1
    5976:	d200      	bcs.n	597a <__aeabi_ddiv+0x472>
    5978:	e6c7      	b.n	570a <__aeabi_ddiv+0x202>
    597a:	464b      	mov	r3, r9
    597c:	07de      	lsls	r6, r3, #31
    597e:	085d      	lsrs	r5, r3, #1
    5980:	4643      	mov	r3, r8
    5982:	085b      	lsrs	r3, r3, #1
    5984:	431e      	orrs	r6, r3
    5986:	4643      	mov	r3, r8
    5988:	07db      	lsls	r3, r3, #31
    598a:	469a      	mov	sl, r3
    598c:	e6c2      	b.n	5714 <__aeabi_ddiv+0x20c>
    598e:	2500      	movs	r5, #0
    5990:	4592      	cmp	sl, r2
    5992:	d300      	bcc.n	5996 <__aeabi_ddiv+0x48e>
    5994:	e733      	b.n	57fe <__aeabi_ddiv+0x2f6>
    5996:	9e03      	ldr	r6, [sp, #12]
    5998:	4659      	mov	r1, fp
    599a:	46b4      	mov	ip, r6
    599c:	44e2      	add	sl, ip
    599e:	45b2      	cmp	sl, r6
    59a0:	41ad      	sbcs	r5, r5
    59a2:	426d      	negs	r5, r5
    59a4:	4445      	add	r5, r8
    59a6:	18eb      	adds	r3, r5, r3
    59a8:	3901      	subs	r1, #1
    59aa:	4598      	cmp	r8, r3
    59ac:	d207      	bcs.n	59be <__aeabi_ddiv+0x4b6>
    59ae:	4298      	cmp	r0, r3
    59b0:	d900      	bls.n	59b4 <__aeabi_ddiv+0x4ac>
    59b2:	e07f      	b.n	5ab4 <__aeabi_ddiv+0x5ac>
    59b4:	d100      	bne.n	59b8 <__aeabi_ddiv+0x4b0>
    59b6:	e0bc      	b.n	5b32 <__aeabi_ddiv+0x62a>
    59b8:	1a1d      	subs	r5, r3, r0
    59ba:	468b      	mov	fp, r1
    59bc:	e71f      	b.n	57fe <__aeabi_ddiv+0x2f6>
    59be:	4598      	cmp	r8, r3
    59c0:	d1fa      	bne.n	59b8 <__aeabi_ddiv+0x4b0>
    59c2:	9d03      	ldr	r5, [sp, #12]
    59c4:	4555      	cmp	r5, sl
    59c6:	d9f2      	bls.n	59ae <__aeabi_ddiv+0x4a6>
    59c8:	4643      	mov	r3, r8
    59ca:	468b      	mov	fp, r1
    59cc:	1a1d      	subs	r5, r3, r0
    59ce:	e716      	b.n	57fe <__aeabi_ddiv+0x2f6>
    59d0:	469b      	mov	fp, r3
    59d2:	e6ca      	b.n	576a <__aeabi_ddiv+0x262>
    59d4:	0015      	movs	r5, r2
    59d6:	e6e7      	b.n	57a8 <__aeabi_ddiv+0x2a0>
    59d8:	465a      	mov	r2, fp
    59da:	08c9      	lsrs	r1, r1, #3
    59dc:	0752      	lsls	r2, r2, #29
    59de:	430a      	orrs	r2, r1
    59e0:	055b      	lsls	r3, r3, #21
    59e2:	4690      	mov	r8, r2
    59e4:	0d5c      	lsrs	r4, r3, #21
    59e6:	465a      	mov	r2, fp
    59e8:	2301      	movs	r3, #1
    59ea:	9902      	ldr	r1, [sp, #8]
    59ec:	0252      	lsls	r2, r2, #9
    59ee:	4019      	ands	r1, r3
    59f0:	0b12      	lsrs	r2, r2, #12
    59f2:	468c      	mov	ip, r1
    59f4:	e656      	b.n	56a4 <__aeabi_ddiv+0x19c>
    59f6:	2b00      	cmp	r3, #0
    59f8:	d100      	bne.n	59fc <__aeabi_ddiv+0x4f4>
    59fa:	e76f      	b.n	58dc <__aeabi_ddiv+0x3d4>
    59fc:	4446      	add	r6, r8
    59fe:	1e4a      	subs	r2, r1, #1
    5a00:	45b0      	cmp	r8, r6
    5a02:	d929      	bls.n	5a58 <__aeabi_ddiv+0x550>
    5a04:	0011      	movs	r1, r2
    5a06:	4286      	cmp	r6, r0
    5a08:	d000      	beq.n	5a0c <__aeabi_ddiv+0x504>
    5a0a:	e765      	b.n	58d8 <__aeabi_ddiv+0x3d0>
    5a0c:	9a03      	ldr	r2, [sp, #12]
    5a0e:	4293      	cmp	r3, r2
    5a10:	d000      	beq.n	5a14 <__aeabi_ddiv+0x50c>
    5a12:	e761      	b.n	58d8 <__aeabi_ddiv+0x3d0>
    5a14:	e762      	b.n	58dc <__aeabi_ddiv+0x3d4>
    5a16:	2101      	movs	r1, #1
    5a18:	4249      	negs	r1, r1
    5a1a:	2001      	movs	r0, #1
    5a1c:	1ac2      	subs	r2, r0, r3
    5a1e:	2a38      	cmp	r2, #56	; 0x38
    5a20:	dd21      	ble.n	5a66 <__aeabi_ddiv+0x55e>
    5a22:	9b02      	ldr	r3, [sp, #8]
    5a24:	4003      	ands	r3, r0
    5a26:	469c      	mov	ip, r3
    5a28:	e638      	b.n	569c <__aeabi_ddiv+0x194>
    5a2a:	220f      	movs	r2, #15
    5a2c:	400a      	ands	r2, r1
    5a2e:	2a04      	cmp	r2, #4
    5a30:	d100      	bne.n	5a34 <__aeabi_ddiv+0x52c>
    5a32:	e75b      	b.n	58ec <__aeabi_ddiv+0x3e4>
    5a34:	000a      	movs	r2, r1
    5a36:	1d11      	adds	r1, r2, #4
    5a38:	4291      	cmp	r1, r2
    5a3a:	4192      	sbcs	r2, r2
    5a3c:	4252      	negs	r2, r2
    5a3e:	4493      	add	fp, r2
    5a40:	e754      	b.n	58ec <__aeabi_ddiv+0x3e4>
    5a42:	4b47      	ldr	r3, [pc, #284]	; (5b60 <__aeabi_ddiv+0x658>)
    5a44:	18e3      	adds	r3, r4, r3
    5a46:	2b00      	cmp	r3, #0
    5a48:	dde5      	ble.n	5a16 <__aeabi_ddiv+0x50e>
    5a4a:	2201      	movs	r2, #1
    5a4c:	4252      	negs	r2, r2
    5a4e:	e7f2      	b.n	5a36 <__aeabi_ddiv+0x52e>
    5a50:	001d      	movs	r5, r3
    5a52:	e6fa      	b.n	584a <__aeabi_ddiv+0x342>
    5a54:	469a      	mov	sl, r3
    5a56:	e71c      	b.n	5892 <__aeabi_ddiv+0x38a>
    5a58:	42b0      	cmp	r0, r6
    5a5a:	d839      	bhi.n	5ad0 <__aeabi_ddiv+0x5c8>
    5a5c:	d06e      	beq.n	5b3c <__aeabi_ddiv+0x634>
    5a5e:	0011      	movs	r1, r2
    5a60:	e73a      	b.n	58d8 <__aeabi_ddiv+0x3d0>
    5a62:	9302      	str	r3, [sp, #8]
    5a64:	e73a      	b.n	58dc <__aeabi_ddiv+0x3d4>
    5a66:	2a1f      	cmp	r2, #31
    5a68:	dc3c      	bgt.n	5ae4 <__aeabi_ddiv+0x5dc>
    5a6a:	2320      	movs	r3, #32
    5a6c:	1a9b      	subs	r3, r3, r2
    5a6e:	000c      	movs	r4, r1
    5a70:	4658      	mov	r0, fp
    5a72:	4099      	lsls	r1, r3
    5a74:	4098      	lsls	r0, r3
    5a76:	1e4b      	subs	r3, r1, #1
    5a78:	4199      	sbcs	r1, r3
    5a7a:	465b      	mov	r3, fp
    5a7c:	40d4      	lsrs	r4, r2
    5a7e:	40d3      	lsrs	r3, r2
    5a80:	4320      	orrs	r0, r4
    5a82:	4308      	orrs	r0, r1
    5a84:	001a      	movs	r2, r3
    5a86:	0743      	lsls	r3, r0, #29
    5a88:	d009      	beq.n	5a9e <__aeabi_ddiv+0x596>
    5a8a:	230f      	movs	r3, #15
    5a8c:	4003      	ands	r3, r0
    5a8e:	2b04      	cmp	r3, #4
    5a90:	d005      	beq.n	5a9e <__aeabi_ddiv+0x596>
    5a92:	0001      	movs	r1, r0
    5a94:	1d08      	adds	r0, r1, #4
    5a96:	4288      	cmp	r0, r1
    5a98:	419b      	sbcs	r3, r3
    5a9a:	425b      	negs	r3, r3
    5a9c:	18d2      	adds	r2, r2, r3
    5a9e:	0213      	lsls	r3, r2, #8
    5aa0:	d53a      	bpl.n	5b18 <__aeabi_ddiv+0x610>
    5aa2:	2301      	movs	r3, #1
    5aa4:	9a02      	ldr	r2, [sp, #8]
    5aa6:	2401      	movs	r4, #1
    5aa8:	401a      	ands	r2, r3
    5aaa:	2300      	movs	r3, #0
    5aac:	4694      	mov	ip, r2
    5aae:	4698      	mov	r8, r3
    5ab0:	2200      	movs	r2, #0
    5ab2:	e5f7      	b.n	56a4 <__aeabi_ddiv+0x19c>
    5ab4:	2102      	movs	r1, #2
    5ab6:	4249      	negs	r1, r1
    5ab8:	468c      	mov	ip, r1
    5aba:	9d03      	ldr	r5, [sp, #12]
    5abc:	44e3      	add	fp, ip
    5abe:	46ac      	mov	ip, r5
    5ac0:	44e2      	add	sl, ip
    5ac2:	45aa      	cmp	sl, r5
    5ac4:	41ad      	sbcs	r5, r5
    5ac6:	426d      	negs	r5, r5
    5ac8:	4445      	add	r5, r8
    5aca:	18ed      	adds	r5, r5, r3
    5acc:	1a2d      	subs	r5, r5, r0
    5ace:	e696      	b.n	57fe <__aeabi_ddiv+0x2f6>
    5ad0:	1e8a      	subs	r2, r1, #2
    5ad2:	9903      	ldr	r1, [sp, #12]
    5ad4:	004d      	lsls	r5, r1, #1
    5ad6:	428d      	cmp	r5, r1
    5ad8:	4189      	sbcs	r1, r1
    5ada:	4249      	negs	r1, r1
    5adc:	4441      	add	r1, r8
    5ade:	1876      	adds	r6, r6, r1
    5ae0:	9503      	str	r5, [sp, #12]
    5ae2:	e78f      	b.n	5a04 <__aeabi_ddiv+0x4fc>
    5ae4:	201f      	movs	r0, #31
    5ae6:	4240      	negs	r0, r0
    5ae8:	1ac3      	subs	r3, r0, r3
    5aea:	4658      	mov	r0, fp
    5aec:	40d8      	lsrs	r0, r3
    5aee:	0003      	movs	r3, r0
    5af0:	2a20      	cmp	r2, #32
    5af2:	d028      	beq.n	5b46 <__aeabi_ddiv+0x63e>
    5af4:	2040      	movs	r0, #64	; 0x40
    5af6:	465d      	mov	r5, fp
    5af8:	1a82      	subs	r2, r0, r2
    5afa:	4095      	lsls	r5, r2
    5afc:	4329      	orrs	r1, r5
    5afe:	1e4a      	subs	r2, r1, #1
    5b00:	4191      	sbcs	r1, r2
    5b02:	4319      	orrs	r1, r3
    5b04:	2307      	movs	r3, #7
    5b06:	2200      	movs	r2, #0
    5b08:	400b      	ands	r3, r1
    5b0a:	d009      	beq.n	5b20 <__aeabi_ddiv+0x618>
    5b0c:	230f      	movs	r3, #15
    5b0e:	2200      	movs	r2, #0
    5b10:	400b      	ands	r3, r1
    5b12:	0008      	movs	r0, r1
    5b14:	2b04      	cmp	r3, #4
    5b16:	d1bd      	bne.n	5a94 <__aeabi_ddiv+0x58c>
    5b18:	0001      	movs	r1, r0
    5b1a:	0753      	lsls	r3, r2, #29
    5b1c:	0252      	lsls	r2, r2, #9
    5b1e:	0b12      	lsrs	r2, r2, #12
    5b20:	08c9      	lsrs	r1, r1, #3
    5b22:	4319      	orrs	r1, r3
    5b24:	2301      	movs	r3, #1
    5b26:	4688      	mov	r8, r1
    5b28:	9902      	ldr	r1, [sp, #8]
    5b2a:	2400      	movs	r4, #0
    5b2c:	4019      	ands	r1, r3
    5b2e:	468c      	mov	ip, r1
    5b30:	e5b8      	b.n	56a4 <__aeabi_ddiv+0x19c>
    5b32:	4552      	cmp	r2, sl
    5b34:	d8be      	bhi.n	5ab4 <__aeabi_ddiv+0x5ac>
    5b36:	468b      	mov	fp, r1
    5b38:	2500      	movs	r5, #0
    5b3a:	e660      	b.n	57fe <__aeabi_ddiv+0x2f6>
    5b3c:	9d03      	ldr	r5, [sp, #12]
    5b3e:	429d      	cmp	r5, r3
    5b40:	d3c6      	bcc.n	5ad0 <__aeabi_ddiv+0x5c8>
    5b42:	0011      	movs	r1, r2
    5b44:	e762      	b.n	5a0c <__aeabi_ddiv+0x504>
    5b46:	2500      	movs	r5, #0
    5b48:	e7d8      	b.n	5afc <__aeabi_ddiv+0x5f4>
    5b4a:	2280      	movs	r2, #128	; 0x80
    5b4c:	465b      	mov	r3, fp
    5b4e:	0312      	lsls	r2, r2, #12
    5b50:	431a      	orrs	r2, r3
    5b52:	9b01      	ldr	r3, [sp, #4]
    5b54:	0312      	lsls	r2, r2, #12
    5b56:	0b12      	lsrs	r2, r2, #12
    5b58:	469c      	mov	ip, r3
    5b5a:	4688      	mov	r8, r1
    5b5c:	4c03      	ldr	r4, [pc, #12]	; (5b6c <__aeabi_ddiv+0x664>)
    5b5e:	e5a1      	b.n	56a4 <__aeabi_ddiv+0x19c>
    5b60:	000003ff 	.word	0x000003ff
    5b64:	feffffff 	.word	0xfeffffff
    5b68:	000007fe 	.word	0x000007fe
    5b6c:	000007ff 	.word	0x000007ff

00005b70 <__aeabi_dmul>:
    5b70:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b72:	4657      	mov	r7, sl
    5b74:	4645      	mov	r5, r8
    5b76:	46de      	mov	lr, fp
    5b78:	464e      	mov	r6, r9
    5b7a:	b5e0      	push	{r5, r6, r7, lr}
    5b7c:	030c      	lsls	r4, r1, #12
    5b7e:	4698      	mov	r8, r3
    5b80:	004e      	lsls	r6, r1, #1
    5b82:	0b23      	lsrs	r3, r4, #12
    5b84:	b087      	sub	sp, #28
    5b86:	0007      	movs	r7, r0
    5b88:	4692      	mov	sl, r2
    5b8a:	469b      	mov	fp, r3
    5b8c:	0d76      	lsrs	r6, r6, #21
    5b8e:	0fcd      	lsrs	r5, r1, #31
    5b90:	2e00      	cmp	r6, #0
    5b92:	d06b      	beq.n	5c6c <__aeabi_dmul+0xfc>
    5b94:	4b6d      	ldr	r3, [pc, #436]	; (5d4c <__aeabi_dmul+0x1dc>)
    5b96:	429e      	cmp	r6, r3
    5b98:	d035      	beq.n	5c06 <__aeabi_dmul+0x96>
    5b9a:	2480      	movs	r4, #128	; 0x80
    5b9c:	465b      	mov	r3, fp
    5b9e:	0f42      	lsrs	r2, r0, #29
    5ba0:	0424      	lsls	r4, r4, #16
    5ba2:	00db      	lsls	r3, r3, #3
    5ba4:	4314      	orrs	r4, r2
    5ba6:	431c      	orrs	r4, r3
    5ba8:	00c3      	lsls	r3, r0, #3
    5baa:	4699      	mov	r9, r3
    5bac:	4b68      	ldr	r3, [pc, #416]	; (5d50 <__aeabi_dmul+0x1e0>)
    5bae:	46a3      	mov	fp, r4
    5bb0:	469c      	mov	ip, r3
    5bb2:	2300      	movs	r3, #0
    5bb4:	2700      	movs	r7, #0
    5bb6:	4466      	add	r6, ip
    5bb8:	9302      	str	r3, [sp, #8]
    5bba:	4643      	mov	r3, r8
    5bbc:	031c      	lsls	r4, r3, #12
    5bbe:	005a      	lsls	r2, r3, #1
    5bc0:	0fdb      	lsrs	r3, r3, #31
    5bc2:	4650      	mov	r0, sl
    5bc4:	0b24      	lsrs	r4, r4, #12
    5bc6:	0d52      	lsrs	r2, r2, #21
    5bc8:	4698      	mov	r8, r3
    5bca:	d100      	bne.n	5bce <__aeabi_dmul+0x5e>
    5bcc:	e076      	b.n	5cbc <__aeabi_dmul+0x14c>
    5bce:	4b5f      	ldr	r3, [pc, #380]	; (5d4c <__aeabi_dmul+0x1dc>)
    5bd0:	429a      	cmp	r2, r3
    5bd2:	d06d      	beq.n	5cb0 <__aeabi_dmul+0x140>
    5bd4:	2380      	movs	r3, #128	; 0x80
    5bd6:	0f41      	lsrs	r1, r0, #29
    5bd8:	041b      	lsls	r3, r3, #16
    5bda:	430b      	orrs	r3, r1
    5bdc:	495c      	ldr	r1, [pc, #368]	; (5d50 <__aeabi_dmul+0x1e0>)
    5bde:	00e4      	lsls	r4, r4, #3
    5be0:	468c      	mov	ip, r1
    5be2:	431c      	orrs	r4, r3
    5be4:	00c3      	lsls	r3, r0, #3
    5be6:	2000      	movs	r0, #0
    5be8:	4462      	add	r2, ip
    5bea:	4641      	mov	r1, r8
    5bec:	18b6      	adds	r6, r6, r2
    5bee:	4069      	eors	r1, r5
    5bf0:	1c72      	adds	r2, r6, #1
    5bf2:	9101      	str	r1, [sp, #4]
    5bf4:	4694      	mov	ip, r2
    5bf6:	4307      	orrs	r7, r0
    5bf8:	2f0f      	cmp	r7, #15
    5bfa:	d900      	bls.n	5bfe <__aeabi_dmul+0x8e>
    5bfc:	e0b0      	b.n	5d60 <__aeabi_dmul+0x1f0>
    5bfe:	4a55      	ldr	r2, [pc, #340]	; (5d54 <__aeabi_dmul+0x1e4>)
    5c00:	00bf      	lsls	r7, r7, #2
    5c02:	59d2      	ldr	r2, [r2, r7]
    5c04:	4697      	mov	pc, r2
    5c06:	465b      	mov	r3, fp
    5c08:	4303      	orrs	r3, r0
    5c0a:	4699      	mov	r9, r3
    5c0c:	d000      	beq.n	5c10 <__aeabi_dmul+0xa0>
    5c0e:	e087      	b.n	5d20 <__aeabi_dmul+0x1b0>
    5c10:	2300      	movs	r3, #0
    5c12:	469b      	mov	fp, r3
    5c14:	3302      	adds	r3, #2
    5c16:	2708      	movs	r7, #8
    5c18:	9302      	str	r3, [sp, #8]
    5c1a:	e7ce      	b.n	5bba <__aeabi_dmul+0x4a>
    5c1c:	4642      	mov	r2, r8
    5c1e:	9201      	str	r2, [sp, #4]
    5c20:	2802      	cmp	r0, #2
    5c22:	d067      	beq.n	5cf4 <__aeabi_dmul+0x184>
    5c24:	2803      	cmp	r0, #3
    5c26:	d100      	bne.n	5c2a <__aeabi_dmul+0xba>
    5c28:	e20e      	b.n	6048 <__aeabi_dmul+0x4d8>
    5c2a:	2801      	cmp	r0, #1
    5c2c:	d000      	beq.n	5c30 <__aeabi_dmul+0xc0>
    5c2e:	e162      	b.n	5ef6 <__aeabi_dmul+0x386>
    5c30:	2300      	movs	r3, #0
    5c32:	2400      	movs	r4, #0
    5c34:	2200      	movs	r2, #0
    5c36:	4699      	mov	r9, r3
    5c38:	9901      	ldr	r1, [sp, #4]
    5c3a:	4001      	ands	r1, r0
    5c3c:	b2cd      	uxtb	r5, r1
    5c3e:	2100      	movs	r1, #0
    5c40:	0312      	lsls	r2, r2, #12
    5c42:	0d0b      	lsrs	r3, r1, #20
    5c44:	0b12      	lsrs	r2, r2, #12
    5c46:	051b      	lsls	r3, r3, #20
    5c48:	4313      	orrs	r3, r2
    5c4a:	4a43      	ldr	r2, [pc, #268]	; (5d58 <__aeabi_dmul+0x1e8>)
    5c4c:	0524      	lsls	r4, r4, #20
    5c4e:	4013      	ands	r3, r2
    5c50:	431c      	orrs	r4, r3
    5c52:	0064      	lsls	r4, r4, #1
    5c54:	07ed      	lsls	r5, r5, #31
    5c56:	0864      	lsrs	r4, r4, #1
    5c58:	432c      	orrs	r4, r5
    5c5a:	4648      	mov	r0, r9
    5c5c:	0021      	movs	r1, r4
    5c5e:	b007      	add	sp, #28
    5c60:	bc3c      	pop	{r2, r3, r4, r5}
    5c62:	4690      	mov	r8, r2
    5c64:	4699      	mov	r9, r3
    5c66:	46a2      	mov	sl, r4
    5c68:	46ab      	mov	fp, r5
    5c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c6c:	4303      	orrs	r3, r0
    5c6e:	4699      	mov	r9, r3
    5c70:	d04f      	beq.n	5d12 <__aeabi_dmul+0x1a2>
    5c72:	465b      	mov	r3, fp
    5c74:	2b00      	cmp	r3, #0
    5c76:	d100      	bne.n	5c7a <__aeabi_dmul+0x10a>
    5c78:	e189      	b.n	5f8e <__aeabi_dmul+0x41e>
    5c7a:	4658      	mov	r0, fp
    5c7c:	f000 fd7a 	bl	6774 <__clzsi2>
    5c80:	0003      	movs	r3, r0
    5c82:	3b0b      	subs	r3, #11
    5c84:	2b1c      	cmp	r3, #28
    5c86:	dd00      	ble.n	5c8a <__aeabi_dmul+0x11a>
    5c88:	e17a      	b.n	5f80 <__aeabi_dmul+0x410>
    5c8a:	221d      	movs	r2, #29
    5c8c:	1ad3      	subs	r3, r2, r3
    5c8e:	003a      	movs	r2, r7
    5c90:	0001      	movs	r1, r0
    5c92:	465c      	mov	r4, fp
    5c94:	40da      	lsrs	r2, r3
    5c96:	3908      	subs	r1, #8
    5c98:	408c      	lsls	r4, r1
    5c9a:	0013      	movs	r3, r2
    5c9c:	408f      	lsls	r7, r1
    5c9e:	4323      	orrs	r3, r4
    5ca0:	469b      	mov	fp, r3
    5ca2:	46b9      	mov	r9, r7
    5ca4:	2300      	movs	r3, #0
    5ca6:	4e2d      	ldr	r6, [pc, #180]	; (5d5c <__aeabi_dmul+0x1ec>)
    5ca8:	2700      	movs	r7, #0
    5caa:	1a36      	subs	r6, r6, r0
    5cac:	9302      	str	r3, [sp, #8]
    5cae:	e784      	b.n	5bba <__aeabi_dmul+0x4a>
    5cb0:	4653      	mov	r3, sl
    5cb2:	4323      	orrs	r3, r4
    5cb4:	d12a      	bne.n	5d0c <__aeabi_dmul+0x19c>
    5cb6:	2400      	movs	r4, #0
    5cb8:	2002      	movs	r0, #2
    5cba:	e796      	b.n	5bea <__aeabi_dmul+0x7a>
    5cbc:	4653      	mov	r3, sl
    5cbe:	4323      	orrs	r3, r4
    5cc0:	d020      	beq.n	5d04 <__aeabi_dmul+0x194>
    5cc2:	2c00      	cmp	r4, #0
    5cc4:	d100      	bne.n	5cc8 <__aeabi_dmul+0x158>
    5cc6:	e157      	b.n	5f78 <__aeabi_dmul+0x408>
    5cc8:	0020      	movs	r0, r4
    5cca:	f000 fd53 	bl	6774 <__clzsi2>
    5cce:	0003      	movs	r3, r0
    5cd0:	3b0b      	subs	r3, #11
    5cd2:	2b1c      	cmp	r3, #28
    5cd4:	dd00      	ble.n	5cd8 <__aeabi_dmul+0x168>
    5cd6:	e149      	b.n	5f6c <__aeabi_dmul+0x3fc>
    5cd8:	211d      	movs	r1, #29
    5cda:	1acb      	subs	r3, r1, r3
    5cdc:	4651      	mov	r1, sl
    5cde:	0002      	movs	r2, r0
    5ce0:	40d9      	lsrs	r1, r3
    5ce2:	4653      	mov	r3, sl
    5ce4:	3a08      	subs	r2, #8
    5ce6:	4094      	lsls	r4, r2
    5ce8:	4093      	lsls	r3, r2
    5cea:	430c      	orrs	r4, r1
    5cec:	4a1b      	ldr	r2, [pc, #108]	; (5d5c <__aeabi_dmul+0x1ec>)
    5cee:	1a12      	subs	r2, r2, r0
    5cf0:	2000      	movs	r0, #0
    5cf2:	e77a      	b.n	5bea <__aeabi_dmul+0x7a>
    5cf4:	2501      	movs	r5, #1
    5cf6:	9b01      	ldr	r3, [sp, #4]
    5cf8:	4c14      	ldr	r4, [pc, #80]	; (5d4c <__aeabi_dmul+0x1dc>)
    5cfa:	401d      	ands	r5, r3
    5cfc:	2300      	movs	r3, #0
    5cfe:	2200      	movs	r2, #0
    5d00:	4699      	mov	r9, r3
    5d02:	e79c      	b.n	5c3e <__aeabi_dmul+0xce>
    5d04:	2400      	movs	r4, #0
    5d06:	2200      	movs	r2, #0
    5d08:	2001      	movs	r0, #1
    5d0a:	e76e      	b.n	5bea <__aeabi_dmul+0x7a>
    5d0c:	4653      	mov	r3, sl
    5d0e:	2003      	movs	r0, #3
    5d10:	e76b      	b.n	5bea <__aeabi_dmul+0x7a>
    5d12:	2300      	movs	r3, #0
    5d14:	469b      	mov	fp, r3
    5d16:	3301      	adds	r3, #1
    5d18:	2704      	movs	r7, #4
    5d1a:	2600      	movs	r6, #0
    5d1c:	9302      	str	r3, [sp, #8]
    5d1e:	e74c      	b.n	5bba <__aeabi_dmul+0x4a>
    5d20:	2303      	movs	r3, #3
    5d22:	4681      	mov	r9, r0
    5d24:	270c      	movs	r7, #12
    5d26:	9302      	str	r3, [sp, #8]
    5d28:	e747      	b.n	5bba <__aeabi_dmul+0x4a>
    5d2a:	2280      	movs	r2, #128	; 0x80
    5d2c:	2300      	movs	r3, #0
    5d2e:	2500      	movs	r5, #0
    5d30:	0312      	lsls	r2, r2, #12
    5d32:	4699      	mov	r9, r3
    5d34:	4c05      	ldr	r4, [pc, #20]	; (5d4c <__aeabi_dmul+0x1dc>)
    5d36:	e782      	b.n	5c3e <__aeabi_dmul+0xce>
    5d38:	465c      	mov	r4, fp
    5d3a:	464b      	mov	r3, r9
    5d3c:	9802      	ldr	r0, [sp, #8]
    5d3e:	e76f      	b.n	5c20 <__aeabi_dmul+0xb0>
    5d40:	465c      	mov	r4, fp
    5d42:	464b      	mov	r3, r9
    5d44:	9501      	str	r5, [sp, #4]
    5d46:	9802      	ldr	r0, [sp, #8]
    5d48:	e76a      	b.n	5c20 <__aeabi_dmul+0xb0>
    5d4a:	46c0      	nop			; (mov r8, r8)
    5d4c:	000007ff 	.word	0x000007ff
    5d50:	fffffc01 	.word	0xfffffc01
    5d54:	00008de4 	.word	0x00008de4
    5d58:	800fffff 	.word	0x800fffff
    5d5c:	fffffc0d 	.word	0xfffffc0d
    5d60:	464a      	mov	r2, r9
    5d62:	4649      	mov	r1, r9
    5d64:	0c17      	lsrs	r7, r2, #16
    5d66:	0c1a      	lsrs	r2, r3, #16
    5d68:	041b      	lsls	r3, r3, #16
    5d6a:	0c1b      	lsrs	r3, r3, #16
    5d6c:	0408      	lsls	r0, r1, #16
    5d6e:	0019      	movs	r1, r3
    5d70:	0c00      	lsrs	r0, r0, #16
    5d72:	4341      	muls	r1, r0
    5d74:	0015      	movs	r5, r2
    5d76:	4688      	mov	r8, r1
    5d78:	0019      	movs	r1, r3
    5d7a:	437d      	muls	r5, r7
    5d7c:	4379      	muls	r1, r7
    5d7e:	9503      	str	r5, [sp, #12]
    5d80:	4689      	mov	r9, r1
    5d82:	0029      	movs	r1, r5
    5d84:	0015      	movs	r5, r2
    5d86:	4345      	muls	r5, r0
    5d88:	444d      	add	r5, r9
    5d8a:	9502      	str	r5, [sp, #8]
    5d8c:	4645      	mov	r5, r8
    5d8e:	0c2d      	lsrs	r5, r5, #16
    5d90:	46aa      	mov	sl, r5
    5d92:	9d02      	ldr	r5, [sp, #8]
    5d94:	4455      	add	r5, sl
    5d96:	45a9      	cmp	r9, r5
    5d98:	d906      	bls.n	5da8 <__aeabi_dmul+0x238>
    5d9a:	468a      	mov	sl, r1
    5d9c:	2180      	movs	r1, #128	; 0x80
    5d9e:	0249      	lsls	r1, r1, #9
    5da0:	4689      	mov	r9, r1
    5da2:	44ca      	add	sl, r9
    5da4:	4651      	mov	r1, sl
    5da6:	9103      	str	r1, [sp, #12]
    5da8:	0c29      	lsrs	r1, r5, #16
    5daa:	9104      	str	r1, [sp, #16]
    5dac:	4641      	mov	r1, r8
    5dae:	0409      	lsls	r1, r1, #16
    5db0:	042d      	lsls	r5, r5, #16
    5db2:	0c09      	lsrs	r1, r1, #16
    5db4:	4688      	mov	r8, r1
    5db6:	0029      	movs	r1, r5
    5db8:	0c25      	lsrs	r5, r4, #16
    5dba:	0424      	lsls	r4, r4, #16
    5dbc:	4441      	add	r1, r8
    5dbe:	0c24      	lsrs	r4, r4, #16
    5dc0:	9105      	str	r1, [sp, #20]
    5dc2:	0021      	movs	r1, r4
    5dc4:	4341      	muls	r1, r0
    5dc6:	4688      	mov	r8, r1
    5dc8:	0021      	movs	r1, r4
    5dca:	4379      	muls	r1, r7
    5dcc:	468a      	mov	sl, r1
    5dce:	4368      	muls	r0, r5
    5dd0:	4641      	mov	r1, r8
    5dd2:	4450      	add	r0, sl
    5dd4:	4681      	mov	r9, r0
    5dd6:	0c08      	lsrs	r0, r1, #16
    5dd8:	4448      	add	r0, r9
    5dda:	436f      	muls	r7, r5
    5ddc:	4582      	cmp	sl, r0
    5dde:	d903      	bls.n	5de8 <__aeabi_dmul+0x278>
    5de0:	2180      	movs	r1, #128	; 0x80
    5de2:	0249      	lsls	r1, r1, #9
    5de4:	4689      	mov	r9, r1
    5de6:	444f      	add	r7, r9
    5de8:	0c01      	lsrs	r1, r0, #16
    5dea:	4689      	mov	r9, r1
    5dec:	0039      	movs	r1, r7
    5dee:	4449      	add	r1, r9
    5df0:	9102      	str	r1, [sp, #8]
    5df2:	4641      	mov	r1, r8
    5df4:	040f      	lsls	r7, r1, #16
    5df6:	9904      	ldr	r1, [sp, #16]
    5df8:	0c3f      	lsrs	r7, r7, #16
    5dfa:	4688      	mov	r8, r1
    5dfc:	0400      	lsls	r0, r0, #16
    5dfe:	19c0      	adds	r0, r0, r7
    5e00:	4480      	add	r8, r0
    5e02:	4641      	mov	r1, r8
    5e04:	9104      	str	r1, [sp, #16]
    5e06:	4659      	mov	r1, fp
    5e08:	0c0f      	lsrs	r7, r1, #16
    5e0a:	0409      	lsls	r1, r1, #16
    5e0c:	0c09      	lsrs	r1, r1, #16
    5e0e:	4688      	mov	r8, r1
    5e10:	4359      	muls	r1, r3
    5e12:	468a      	mov	sl, r1
    5e14:	0039      	movs	r1, r7
    5e16:	4351      	muls	r1, r2
    5e18:	4689      	mov	r9, r1
    5e1a:	4641      	mov	r1, r8
    5e1c:	434a      	muls	r2, r1
    5e1e:	4651      	mov	r1, sl
    5e20:	0c09      	lsrs	r1, r1, #16
    5e22:	468b      	mov	fp, r1
    5e24:	437b      	muls	r3, r7
    5e26:	18d2      	adds	r2, r2, r3
    5e28:	445a      	add	r2, fp
    5e2a:	4293      	cmp	r3, r2
    5e2c:	d903      	bls.n	5e36 <__aeabi_dmul+0x2c6>
    5e2e:	2380      	movs	r3, #128	; 0x80
    5e30:	025b      	lsls	r3, r3, #9
    5e32:	469b      	mov	fp, r3
    5e34:	44d9      	add	r9, fp
    5e36:	4651      	mov	r1, sl
    5e38:	0409      	lsls	r1, r1, #16
    5e3a:	0c09      	lsrs	r1, r1, #16
    5e3c:	468a      	mov	sl, r1
    5e3e:	4641      	mov	r1, r8
    5e40:	4361      	muls	r1, r4
    5e42:	437c      	muls	r4, r7
    5e44:	0c13      	lsrs	r3, r2, #16
    5e46:	0412      	lsls	r2, r2, #16
    5e48:	444b      	add	r3, r9
    5e4a:	4452      	add	r2, sl
    5e4c:	46a1      	mov	r9, r4
    5e4e:	468a      	mov	sl, r1
    5e50:	003c      	movs	r4, r7
    5e52:	4641      	mov	r1, r8
    5e54:	436c      	muls	r4, r5
    5e56:	434d      	muls	r5, r1
    5e58:	4651      	mov	r1, sl
    5e5a:	444d      	add	r5, r9
    5e5c:	0c0f      	lsrs	r7, r1, #16
    5e5e:	197d      	adds	r5, r7, r5
    5e60:	45a9      	cmp	r9, r5
    5e62:	d903      	bls.n	5e6c <__aeabi_dmul+0x2fc>
    5e64:	2180      	movs	r1, #128	; 0x80
    5e66:	0249      	lsls	r1, r1, #9
    5e68:	4688      	mov	r8, r1
    5e6a:	4444      	add	r4, r8
    5e6c:	9f04      	ldr	r7, [sp, #16]
    5e6e:	9903      	ldr	r1, [sp, #12]
    5e70:	46b8      	mov	r8, r7
    5e72:	4441      	add	r1, r8
    5e74:	468b      	mov	fp, r1
    5e76:	4583      	cmp	fp, r0
    5e78:	4180      	sbcs	r0, r0
    5e7a:	4241      	negs	r1, r0
    5e7c:	4688      	mov	r8, r1
    5e7e:	4651      	mov	r1, sl
    5e80:	0408      	lsls	r0, r1, #16
    5e82:	042f      	lsls	r7, r5, #16
    5e84:	0c00      	lsrs	r0, r0, #16
    5e86:	183f      	adds	r7, r7, r0
    5e88:	4658      	mov	r0, fp
    5e8a:	9902      	ldr	r1, [sp, #8]
    5e8c:	1810      	adds	r0, r2, r0
    5e8e:	4689      	mov	r9, r1
    5e90:	4290      	cmp	r0, r2
    5e92:	4192      	sbcs	r2, r2
    5e94:	444f      	add	r7, r9
    5e96:	46ba      	mov	sl, r7
    5e98:	4252      	negs	r2, r2
    5e9a:	4699      	mov	r9, r3
    5e9c:	4693      	mov	fp, r2
    5e9e:	44c2      	add	sl, r8
    5ea0:	44d1      	add	r9, sl
    5ea2:	44cb      	add	fp, r9
    5ea4:	428f      	cmp	r7, r1
    5ea6:	41bf      	sbcs	r7, r7
    5ea8:	45c2      	cmp	sl, r8
    5eaa:	4189      	sbcs	r1, r1
    5eac:	4599      	cmp	r9, r3
    5eae:	419b      	sbcs	r3, r3
    5eb0:	4593      	cmp	fp, r2
    5eb2:	4192      	sbcs	r2, r2
    5eb4:	427f      	negs	r7, r7
    5eb6:	4249      	negs	r1, r1
    5eb8:	0c2d      	lsrs	r5, r5, #16
    5eba:	4252      	negs	r2, r2
    5ebc:	430f      	orrs	r7, r1
    5ebe:	425b      	negs	r3, r3
    5ec0:	4313      	orrs	r3, r2
    5ec2:	197f      	adds	r7, r7, r5
    5ec4:	18ff      	adds	r7, r7, r3
    5ec6:	465b      	mov	r3, fp
    5ec8:	193c      	adds	r4, r7, r4
    5eca:	0ddb      	lsrs	r3, r3, #23
    5ecc:	9a05      	ldr	r2, [sp, #20]
    5ece:	0264      	lsls	r4, r4, #9
    5ed0:	431c      	orrs	r4, r3
    5ed2:	0243      	lsls	r3, r0, #9
    5ed4:	4313      	orrs	r3, r2
    5ed6:	1e5d      	subs	r5, r3, #1
    5ed8:	41ab      	sbcs	r3, r5
    5eda:	465a      	mov	r2, fp
    5edc:	0dc0      	lsrs	r0, r0, #23
    5ede:	4303      	orrs	r3, r0
    5ee0:	0252      	lsls	r2, r2, #9
    5ee2:	4313      	orrs	r3, r2
    5ee4:	01e2      	lsls	r2, r4, #7
    5ee6:	d556      	bpl.n	5f96 <__aeabi_dmul+0x426>
    5ee8:	2001      	movs	r0, #1
    5eea:	085a      	lsrs	r2, r3, #1
    5eec:	4003      	ands	r3, r0
    5eee:	4313      	orrs	r3, r2
    5ef0:	07e2      	lsls	r2, r4, #31
    5ef2:	4313      	orrs	r3, r2
    5ef4:	0864      	lsrs	r4, r4, #1
    5ef6:	485a      	ldr	r0, [pc, #360]	; (6060 <__aeabi_dmul+0x4f0>)
    5ef8:	4460      	add	r0, ip
    5efa:	2800      	cmp	r0, #0
    5efc:	dd4d      	ble.n	5f9a <__aeabi_dmul+0x42a>
    5efe:	075a      	lsls	r2, r3, #29
    5f00:	d009      	beq.n	5f16 <__aeabi_dmul+0x3a6>
    5f02:	220f      	movs	r2, #15
    5f04:	401a      	ands	r2, r3
    5f06:	2a04      	cmp	r2, #4
    5f08:	d005      	beq.n	5f16 <__aeabi_dmul+0x3a6>
    5f0a:	1d1a      	adds	r2, r3, #4
    5f0c:	429a      	cmp	r2, r3
    5f0e:	419b      	sbcs	r3, r3
    5f10:	425b      	negs	r3, r3
    5f12:	18e4      	adds	r4, r4, r3
    5f14:	0013      	movs	r3, r2
    5f16:	01e2      	lsls	r2, r4, #7
    5f18:	d504      	bpl.n	5f24 <__aeabi_dmul+0x3b4>
    5f1a:	2080      	movs	r0, #128	; 0x80
    5f1c:	4a51      	ldr	r2, [pc, #324]	; (6064 <__aeabi_dmul+0x4f4>)
    5f1e:	00c0      	lsls	r0, r0, #3
    5f20:	4014      	ands	r4, r2
    5f22:	4460      	add	r0, ip
    5f24:	4a50      	ldr	r2, [pc, #320]	; (6068 <__aeabi_dmul+0x4f8>)
    5f26:	4290      	cmp	r0, r2
    5f28:	dd00      	ble.n	5f2c <__aeabi_dmul+0x3bc>
    5f2a:	e6e3      	b.n	5cf4 <__aeabi_dmul+0x184>
    5f2c:	2501      	movs	r5, #1
    5f2e:	08db      	lsrs	r3, r3, #3
    5f30:	0762      	lsls	r2, r4, #29
    5f32:	431a      	orrs	r2, r3
    5f34:	0264      	lsls	r4, r4, #9
    5f36:	9b01      	ldr	r3, [sp, #4]
    5f38:	4691      	mov	r9, r2
    5f3a:	0b22      	lsrs	r2, r4, #12
    5f3c:	0544      	lsls	r4, r0, #21
    5f3e:	0d64      	lsrs	r4, r4, #21
    5f40:	401d      	ands	r5, r3
    5f42:	e67c      	b.n	5c3e <__aeabi_dmul+0xce>
    5f44:	2280      	movs	r2, #128	; 0x80
    5f46:	4659      	mov	r1, fp
    5f48:	0312      	lsls	r2, r2, #12
    5f4a:	4211      	tst	r1, r2
    5f4c:	d008      	beq.n	5f60 <__aeabi_dmul+0x3f0>
    5f4e:	4214      	tst	r4, r2
    5f50:	d106      	bne.n	5f60 <__aeabi_dmul+0x3f0>
    5f52:	4322      	orrs	r2, r4
    5f54:	0312      	lsls	r2, r2, #12
    5f56:	0b12      	lsrs	r2, r2, #12
    5f58:	4645      	mov	r5, r8
    5f5a:	4699      	mov	r9, r3
    5f5c:	4c43      	ldr	r4, [pc, #268]	; (606c <__aeabi_dmul+0x4fc>)
    5f5e:	e66e      	b.n	5c3e <__aeabi_dmul+0xce>
    5f60:	465b      	mov	r3, fp
    5f62:	431a      	orrs	r2, r3
    5f64:	0312      	lsls	r2, r2, #12
    5f66:	0b12      	lsrs	r2, r2, #12
    5f68:	4c40      	ldr	r4, [pc, #256]	; (606c <__aeabi_dmul+0x4fc>)
    5f6a:	e668      	b.n	5c3e <__aeabi_dmul+0xce>
    5f6c:	0003      	movs	r3, r0
    5f6e:	4654      	mov	r4, sl
    5f70:	3b28      	subs	r3, #40	; 0x28
    5f72:	409c      	lsls	r4, r3
    5f74:	2300      	movs	r3, #0
    5f76:	e6b9      	b.n	5cec <__aeabi_dmul+0x17c>
    5f78:	f000 fbfc 	bl	6774 <__clzsi2>
    5f7c:	3020      	adds	r0, #32
    5f7e:	e6a6      	b.n	5cce <__aeabi_dmul+0x15e>
    5f80:	0003      	movs	r3, r0
    5f82:	3b28      	subs	r3, #40	; 0x28
    5f84:	409f      	lsls	r7, r3
    5f86:	2300      	movs	r3, #0
    5f88:	46bb      	mov	fp, r7
    5f8a:	4699      	mov	r9, r3
    5f8c:	e68a      	b.n	5ca4 <__aeabi_dmul+0x134>
    5f8e:	f000 fbf1 	bl	6774 <__clzsi2>
    5f92:	3020      	adds	r0, #32
    5f94:	e674      	b.n	5c80 <__aeabi_dmul+0x110>
    5f96:	46b4      	mov	ip, r6
    5f98:	e7ad      	b.n	5ef6 <__aeabi_dmul+0x386>
    5f9a:	2501      	movs	r5, #1
    5f9c:	1a2a      	subs	r2, r5, r0
    5f9e:	2a38      	cmp	r2, #56	; 0x38
    5fa0:	dd06      	ble.n	5fb0 <__aeabi_dmul+0x440>
    5fa2:	9b01      	ldr	r3, [sp, #4]
    5fa4:	2400      	movs	r4, #0
    5fa6:	401d      	ands	r5, r3
    5fa8:	2300      	movs	r3, #0
    5faa:	2200      	movs	r2, #0
    5fac:	4699      	mov	r9, r3
    5fae:	e646      	b.n	5c3e <__aeabi_dmul+0xce>
    5fb0:	2a1f      	cmp	r2, #31
    5fb2:	dc21      	bgt.n	5ff8 <__aeabi_dmul+0x488>
    5fb4:	2520      	movs	r5, #32
    5fb6:	0020      	movs	r0, r4
    5fb8:	1aad      	subs	r5, r5, r2
    5fba:	001e      	movs	r6, r3
    5fbc:	40ab      	lsls	r3, r5
    5fbe:	40a8      	lsls	r0, r5
    5fc0:	40d6      	lsrs	r6, r2
    5fc2:	1e5d      	subs	r5, r3, #1
    5fc4:	41ab      	sbcs	r3, r5
    5fc6:	4330      	orrs	r0, r6
    5fc8:	4318      	orrs	r0, r3
    5fca:	40d4      	lsrs	r4, r2
    5fcc:	0743      	lsls	r3, r0, #29
    5fce:	d009      	beq.n	5fe4 <__aeabi_dmul+0x474>
    5fd0:	230f      	movs	r3, #15
    5fd2:	4003      	ands	r3, r0
    5fd4:	2b04      	cmp	r3, #4
    5fd6:	d005      	beq.n	5fe4 <__aeabi_dmul+0x474>
    5fd8:	0003      	movs	r3, r0
    5fda:	1d18      	adds	r0, r3, #4
    5fdc:	4298      	cmp	r0, r3
    5fde:	419b      	sbcs	r3, r3
    5fe0:	425b      	negs	r3, r3
    5fe2:	18e4      	adds	r4, r4, r3
    5fe4:	0223      	lsls	r3, r4, #8
    5fe6:	d521      	bpl.n	602c <__aeabi_dmul+0x4bc>
    5fe8:	2501      	movs	r5, #1
    5fea:	9b01      	ldr	r3, [sp, #4]
    5fec:	2401      	movs	r4, #1
    5fee:	401d      	ands	r5, r3
    5ff0:	2300      	movs	r3, #0
    5ff2:	2200      	movs	r2, #0
    5ff4:	4699      	mov	r9, r3
    5ff6:	e622      	b.n	5c3e <__aeabi_dmul+0xce>
    5ff8:	251f      	movs	r5, #31
    5ffa:	0021      	movs	r1, r4
    5ffc:	426d      	negs	r5, r5
    5ffe:	1a28      	subs	r0, r5, r0
    6000:	40c1      	lsrs	r1, r0
    6002:	0008      	movs	r0, r1
    6004:	2a20      	cmp	r2, #32
    6006:	d01d      	beq.n	6044 <__aeabi_dmul+0x4d4>
    6008:	355f      	adds	r5, #95	; 0x5f
    600a:	1aaa      	subs	r2, r5, r2
    600c:	4094      	lsls	r4, r2
    600e:	4323      	orrs	r3, r4
    6010:	1e5c      	subs	r4, r3, #1
    6012:	41a3      	sbcs	r3, r4
    6014:	2507      	movs	r5, #7
    6016:	4303      	orrs	r3, r0
    6018:	401d      	ands	r5, r3
    601a:	2200      	movs	r2, #0
    601c:	2d00      	cmp	r5, #0
    601e:	d009      	beq.n	6034 <__aeabi_dmul+0x4c4>
    6020:	220f      	movs	r2, #15
    6022:	2400      	movs	r4, #0
    6024:	401a      	ands	r2, r3
    6026:	0018      	movs	r0, r3
    6028:	2a04      	cmp	r2, #4
    602a:	d1d6      	bne.n	5fda <__aeabi_dmul+0x46a>
    602c:	0003      	movs	r3, r0
    602e:	0765      	lsls	r5, r4, #29
    6030:	0264      	lsls	r4, r4, #9
    6032:	0b22      	lsrs	r2, r4, #12
    6034:	08db      	lsrs	r3, r3, #3
    6036:	432b      	orrs	r3, r5
    6038:	2501      	movs	r5, #1
    603a:	4699      	mov	r9, r3
    603c:	9b01      	ldr	r3, [sp, #4]
    603e:	2400      	movs	r4, #0
    6040:	401d      	ands	r5, r3
    6042:	e5fc      	b.n	5c3e <__aeabi_dmul+0xce>
    6044:	2400      	movs	r4, #0
    6046:	e7e2      	b.n	600e <__aeabi_dmul+0x49e>
    6048:	2280      	movs	r2, #128	; 0x80
    604a:	2501      	movs	r5, #1
    604c:	0312      	lsls	r2, r2, #12
    604e:	4322      	orrs	r2, r4
    6050:	9901      	ldr	r1, [sp, #4]
    6052:	0312      	lsls	r2, r2, #12
    6054:	0b12      	lsrs	r2, r2, #12
    6056:	400d      	ands	r5, r1
    6058:	4699      	mov	r9, r3
    605a:	4c04      	ldr	r4, [pc, #16]	; (606c <__aeabi_dmul+0x4fc>)
    605c:	e5ef      	b.n	5c3e <__aeabi_dmul+0xce>
    605e:	46c0      	nop			; (mov r8, r8)
    6060:	000003ff 	.word	0x000003ff
    6064:	feffffff 	.word	0xfeffffff
    6068:	000007fe 	.word	0x000007fe
    606c:	000007ff 	.word	0x000007ff

00006070 <__aeabi_dsub>:
    6070:	b5f0      	push	{r4, r5, r6, r7, lr}
    6072:	4646      	mov	r6, r8
    6074:	46d6      	mov	lr, sl
    6076:	464f      	mov	r7, r9
    6078:	030c      	lsls	r4, r1, #12
    607a:	b5c0      	push	{r6, r7, lr}
    607c:	0fcd      	lsrs	r5, r1, #31
    607e:	004e      	lsls	r6, r1, #1
    6080:	0a61      	lsrs	r1, r4, #9
    6082:	0f44      	lsrs	r4, r0, #29
    6084:	430c      	orrs	r4, r1
    6086:	00c1      	lsls	r1, r0, #3
    6088:	0058      	lsls	r0, r3, #1
    608a:	0d40      	lsrs	r0, r0, #21
    608c:	4684      	mov	ip, r0
    608e:	468a      	mov	sl, r1
    6090:	000f      	movs	r7, r1
    6092:	0319      	lsls	r1, r3, #12
    6094:	0f50      	lsrs	r0, r2, #29
    6096:	0a49      	lsrs	r1, r1, #9
    6098:	4301      	orrs	r1, r0
    609a:	48c6      	ldr	r0, [pc, #792]	; (63b4 <__aeabi_dsub+0x344>)
    609c:	0d76      	lsrs	r6, r6, #21
    609e:	46a8      	mov	r8, r5
    60a0:	0fdb      	lsrs	r3, r3, #31
    60a2:	00d2      	lsls	r2, r2, #3
    60a4:	4584      	cmp	ip, r0
    60a6:	d100      	bne.n	60aa <__aeabi_dsub+0x3a>
    60a8:	e0d8      	b.n	625c <__aeabi_dsub+0x1ec>
    60aa:	2001      	movs	r0, #1
    60ac:	4043      	eors	r3, r0
    60ae:	42ab      	cmp	r3, r5
    60b0:	d100      	bne.n	60b4 <__aeabi_dsub+0x44>
    60b2:	e0a6      	b.n	6202 <__aeabi_dsub+0x192>
    60b4:	4660      	mov	r0, ip
    60b6:	1a35      	subs	r5, r6, r0
    60b8:	2d00      	cmp	r5, #0
    60ba:	dc00      	bgt.n	60be <__aeabi_dsub+0x4e>
    60bc:	e105      	b.n	62ca <__aeabi_dsub+0x25a>
    60be:	2800      	cmp	r0, #0
    60c0:	d110      	bne.n	60e4 <__aeabi_dsub+0x74>
    60c2:	000b      	movs	r3, r1
    60c4:	4313      	orrs	r3, r2
    60c6:	d100      	bne.n	60ca <__aeabi_dsub+0x5a>
    60c8:	e0d7      	b.n	627a <__aeabi_dsub+0x20a>
    60ca:	1e6b      	subs	r3, r5, #1
    60cc:	2b00      	cmp	r3, #0
    60ce:	d000      	beq.n	60d2 <__aeabi_dsub+0x62>
    60d0:	e14b      	b.n	636a <__aeabi_dsub+0x2fa>
    60d2:	4653      	mov	r3, sl
    60d4:	1a9f      	subs	r7, r3, r2
    60d6:	45ba      	cmp	sl, r7
    60d8:	4180      	sbcs	r0, r0
    60da:	1a64      	subs	r4, r4, r1
    60dc:	4240      	negs	r0, r0
    60de:	1a24      	subs	r4, r4, r0
    60e0:	2601      	movs	r6, #1
    60e2:	e01e      	b.n	6122 <__aeabi_dsub+0xb2>
    60e4:	4bb3      	ldr	r3, [pc, #716]	; (63b4 <__aeabi_dsub+0x344>)
    60e6:	429e      	cmp	r6, r3
    60e8:	d048      	beq.n	617c <__aeabi_dsub+0x10c>
    60ea:	2380      	movs	r3, #128	; 0x80
    60ec:	041b      	lsls	r3, r3, #16
    60ee:	4319      	orrs	r1, r3
    60f0:	2d38      	cmp	r5, #56	; 0x38
    60f2:	dd00      	ble.n	60f6 <__aeabi_dsub+0x86>
    60f4:	e119      	b.n	632a <__aeabi_dsub+0x2ba>
    60f6:	2d1f      	cmp	r5, #31
    60f8:	dd00      	ble.n	60fc <__aeabi_dsub+0x8c>
    60fa:	e14c      	b.n	6396 <__aeabi_dsub+0x326>
    60fc:	2320      	movs	r3, #32
    60fe:	000f      	movs	r7, r1
    6100:	1b5b      	subs	r3, r3, r5
    6102:	0010      	movs	r0, r2
    6104:	409a      	lsls	r2, r3
    6106:	409f      	lsls	r7, r3
    6108:	40e8      	lsrs	r0, r5
    610a:	1e53      	subs	r3, r2, #1
    610c:	419a      	sbcs	r2, r3
    610e:	40e9      	lsrs	r1, r5
    6110:	4307      	orrs	r7, r0
    6112:	4317      	orrs	r7, r2
    6114:	4653      	mov	r3, sl
    6116:	1bdf      	subs	r7, r3, r7
    6118:	1a61      	subs	r1, r4, r1
    611a:	45ba      	cmp	sl, r7
    611c:	41a4      	sbcs	r4, r4
    611e:	4264      	negs	r4, r4
    6120:	1b0c      	subs	r4, r1, r4
    6122:	0223      	lsls	r3, r4, #8
    6124:	d400      	bmi.n	6128 <__aeabi_dsub+0xb8>
    6126:	e0c5      	b.n	62b4 <__aeabi_dsub+0x244>
    6128:	0264      	lsls	r4, r4, #9
    612a:	0a65      	lsrs	r5, r4, #9
    612c:	2d00      	cmp	r5, #0
    612e:	d100      	bne.n	6132 <__aeabi_dsub+0xc2>
    6130:	e0f6      	b.n	6320 <__aeabi_dsub+0x2b0>
    6132:	0028      	movs	r0, r5
    6134:	f000 fb1e 	bl	6774 <__clzsi2>
    6138:	0003      	movs	r3, r0
    613a:	3b08      	subs	r3, #8
    613c:	2b1f      	cmp	r3, #31
    613e:	dd00      	ble.n	6142 <__aeabi_dsub+0xd2>
    6140:	e0e9      	b.n	6316 <__aeabi_dsub+0x2a6>
    6142:	2220      	movs	r2, #32
    6144:	003c      	movs	r4, r7
    6146:	1ad2      	subs	r2, r2, r3
    6148:	409d      	lsls	r5, r3
    614a:	40d4      	lsrs	r4, r2
    614c:	409f      	lsls	r7, r3
    614e:	4325      	orrs	r5, r4
    6150:	429e      	cmp	r6, r3
    6152:	dd00      	ble.n	6156 <__aeabi_dsub+0xe6>
    6154:	e0db      	b.n	630e <__aeabi_dsub+0x29e>
    6156:	1b9e      	subs	r6, r3, r6
    6158:	1c73      	adds	r3, r6, #1
    615a:	2b1f      	cmp	r3, #31
    615c:	dd00      	ble.n	6160 <__aeabi_dsub+0xf0>
    615e:	e10a      	b.n	6376 <__aeabi_dsub+0x306>
    6160:	2220      	movs	r2, #32
    6162:	0038      	movs	r0, r7
    6164:	1ad2      	subs	r2, r2, r3
    6166:	0029      	movs	r1, r5
    6168:	4097      	lsls	r7, r2
    616a:	002c      	movs	r4, r5
    616c:	4091      	lsls	r1, r2
    616e:	40d8      	lsrs	r0, r3
    6170:	1e7a      	subs	r2, r7, #1
    6172:	4197      	sbcs	r7, r2
    6174:	40dc      	lsrs	r4, r3
    6176:	2600      	movs	r6, #0
    6178:	4301      	orrs	r1, r0
    617a:	430f      	orrs	r7, r1
    617c:	077b      	lsls	r3, r7, #29
    617e:	d009      	beq.n	6194 <__aeabi_dsub+0x124>
    6180:	230f      	movs	r3, #15
    6182:	403b      	ands	r3, r7
    6184:	2b04      	cmp	r3, #4
    6186:	d005      	beq.n	6194 <__aeabi_dsub+0x124>
    6188:	1d3b      	adds	r3, r7, #4
    618a:	42bb      	cmp	r3, r7
    618c:	41bf      	sbcs	r7, r7
    618e:	427f      	negs	r7, r7
    6190:	19e4      	adds	r4, r4, r7
    6192:	001f      	movs	r7, r3
    6194:	0223      	lsls	r3, r4, #8
    6196:	d525      	bpl.n	61e4 <__aeabi_dsub+0x174>
    6198:	4b86      	ldr	r3, [pc, #536]	; (63b4 <__aeabi_dsub+0x344>)
    619a:	3601      	adds	r6, #1
    619c:	429e      	cmp	r6, r3
    619e:	d100      	bne.n	61a2 <__aeabi_dsub+0x132>
    61a0:	e0af      	b.n	6302 <__aeabi_dsub+0x292>
    61a2:	4b85      	ldr	r3, [pc, #532]	; (63b8 <__aeabi_dsub+0x348>)
    61a4:	2501      	movs	r5, #1
    61a6:	401c      	ands	r4, r3
    61a8:	4643      	mov	r3, r8
    61aa:	0762      	lsls	r2, r4, #29
    61ac:	08ff      	lsrs	r7, r7, #3
    61ae:	0264      	lsls	r4, r4, #9
    61b0:	0576      	lsls	r6, r6, #21
    61b2:	4317      	orrs	r7, r2
    61b4:	0b24      	lsrs	r4, r4, #12
    61b6:	0d76      	lsrs	r6, r6, #21
    61b8:	401d      	ands	r5, r3
    61ba:	2100      	movs	r1, #0
    61bc:	0324      	lsls	r4, r4, #12
    61be:	0b23      	lsrs	r3, r4, #12
    61c0:	0d0c      	lsrs	r4, r1, #20
    61c2:	4a7e      	ldr	r2, [pc, #504]	; (63bc <__aeabi_dsub+0x34c>)
    61c4:	0524      	lsls	r4, r4, #20
    61c6:	431c      	orrs	r4, r3
    61c8:	4014      	ands	r4, r2
    61ca:	0533      	lsls	r3, r6, #20
    61cc:	4323      	orrs	r3, r4
    61ce:	005b      	lsls	r3, r3, #1
    61d0:	07ed      	lsls	r5, r5, #31
    61d2:	085b      	lsrs	r3, r3, #1
    61d4:	432b      	orrs	r3, r5
    61d6:	0038      	movs	r0, r7
    61d8:	0019      	movs	r1, r3
    61da:	bc1c      	pop	{r2, r3, r4}
    61dc:	4690      	mov	r8, r2
    61de:	4699      	mov	r9, r3
    61e0:	46a2      	mov	sl, r4
    61e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61e4:	2501      	movs	r5, #1
    61e6:	4643      	mov	r3, r8
    61e8:	0762      	lsls	r2, r4, #29
    61ea:	08ff      	lsrs	r7, r7, #3
    61ec:	4317      	orrs	r7, r2
    61ee:	08e4      	lsrs	r4, r4, #3
    61f0:	401d      	ands	r5, r3
    61f2:	4b70      	ldr	r3, [pc, #448]	; (63b4 <__aeabi_dsub+0x344>)
    61f4:	429e      	cmp	r6, r3
    61f6:	d036      	beq.n	6266 <__aeabi_dsub+0x1f6>
    61f8:	0324      	lsls	r4, r4, #12
    61fa:	0576      	lsls	r6, r6, #21
    61fc:	0b24      	lsrs	r4, r4, #12
    61fe:	0d76      	lsrs	r6, r6, #21
    6200:	e7db      	b.n	61ba <__aeabi_dsub+0x14a>
    6202:	4663      	mov	r3, ip
    6204:	1af3      	subs	r3, r6, r3
    6206:	2b00      	cmp	r3, #0
    6208:	dc00      	bgt.n	620c <__aeabi_dsub+0x19c>
    620a:	e094      	b.n	6336 <__aeabi_dsub+0x2c6>
    620c:	4660      	mov	r0, ip
    620e:	2800      	cmp	r0, #0
    6210:	d035      	beq.n	627e <__aeabi_dsub+0x20e>
    6212:	4868      	ldr	r0, [pc, #416]	; (63b4 <__aeabi_dsub+0x344>)
    6214:	4286      	cmp	r6, r0
    6216:	d0b1      	beq.n	617c <__aeabi_dsub+0x10c>
    6218:	2780      	movs	r7, #128	; 0x80
    621a:	043f      	lsls	r7, r7, #16
    621c:	4339      	orrs	r1, r7
    621e:	2b38      	cmp	r3, #56	; 0x38
    6220:	dc00      	bgt.n	6224 <__aeabi_dsub+0x1b4>
    6222:	e0fd      	b.n	6420 <__aeabi_dsub+0x3b0>
    6224:	430a      	orrs	r2, r1
    6226:	0017      	movs	r7, r2
    6228:	2100      	movs	r1, #0
    622a:	1e7a      	subs	r2, r7, #1
    622c:	4197      	sbcs	r7, r2
    622e:	4457      	add	r7, sl
    6230:	4557      	cmp	r7, sl
    6232:	4180      	sbcs	r0, r0
    6234:	1909      	adds	r1, r1, r4
    6236:	4244      	negs	r4, r0
    6238:	190c      	adds	r4, r1, r4
    623a:	0223      	lsls	r3, r4, #8
    623c:	d53a      	bpl.n	62b4 <__aeabi_dsub+0x244>
    623e:	4b5d      	ldr	r3, [pc, #372]	; (63b4 <__aeabi_dsub+0x344>)
    6240:	3601      	adds	r6, #1
    6242:	429e      	cmp	r6, r3
    6244:	d100      	bne.n	6248 <__aeabi_dsub+0x1d8>
    6246:	e14b      	b.n	64e0 <__aeabi_dsub+0x470>
    6248:	2201      	movs	r2, #1
    624a:	4b5b      	ldr	r3, [pc, #364]	; (63b8 <__aeabi_dsub+0x348>)
    624c:	401c      	ands	r4, r3
    624e:	087b      	lsrs	r3, r7, #1
    6250:	4017      	ands	r7, r2
    6252:	431f      	orrs	r7, r3
    6254:	07e2      	lsls	r2, r4, #31
    6256:	4317      	orrs	r7, r2
    6258:	0864      	lsrs	r4, r4, #1
    625a:	e78f      	b.n	617c <__aeabi_dsub+0x10c>
    625c:	0008      	movs	r0, r1
    625e:	4310      	orrs	r0, r2
    6260:	d000      	beq.n	6264 <__aeabi_dsub+0x1f4>
    6262:	e724      	b.n	60ae <__aeabi_dsub+0x3e>
    6264:	e721      	b.n	60aa <__aeabi_dsub+0x3a>
    6266:	0023      	movs	r3, r4
    6268:	433b      	orrs	r3, r7
    626a:	d100      	bne.n	626e <__aeabi_dsub+0x1fe>
    626c:	e1b9      	b.n	65e2 <__aeabi_dsub+0x572>
    626e:	2280      	movs	r2, #128	; 0x80
    6270:	0312      	lsls	r2, r2, #12
    6272:	4314      	orrs	r4, r2
    6274:	0324      	lsls	r4, r4, #12
    6276:	0b24      	lsrs	r4, r4, #12
    6278:	e79f      	b.n	61ba <__aeabi_dsub+0x14a>
    627a:	002e      	movs	r6, r5
    627c:	e77e      	b.n	617c <__aeabi_dsub+0x10c>
    627e:	0008      	movs	r0, r1
    6280:	4310      	orrs	r0, r2
    6282:	d100      	bne.n	6286 <__aeabi_dsub+0x216>
    6284:	e0ca      	b.n	641c <__aeabi_dsub+0x3ac>
    6286:	1e58      	subs	r0, r3, #1
    6288:	4684      	mov	ip, r0
    628a:	2800      	cmp	r0, #0
    628c:	d000      	beq.n	6290 <__aeabi_dsub+0x220>
    628e:	e0e7      	b.n	6460 <__aeabi_dsub+0x3f0>
    6290:	4452      	add	r2, sl
    6292:	4552      	cmp	r2, sl
    6294:	4180      	sbcs	r0, r0
    6296:	1864      	adds	r4, r4, r1
    6298:	4240      	negs	r0, r0
    629a:	1824      	adds	r4, r4, r0
    629c:	0017      	movs	r7, r2
    629e:	2601      	movs	r6, #1
    62a0:	0223      	lsls	r3, r4, #8
    62a2:	d507      	bpl.n	62b4 <__aeabi_dsub+0x244>
    62a4:	2602      	movs	r6, #2
    62a6:	e7cf      	b.n	6248 <__aeabi_dsub+0x1d8>
    62a8:	4664      	mov	r4, ip
    62aa:	432c      	orrs	r4, r5
    62ac:	d100      	bne.n	62b0 <__aeabi_dsub+0x240>
    62ae:	e1b3      	b.n	6618 <__aeabi_dsub+0x5a8>
    62b0:	002c      	movs	r4, r5
    62b2:	4667      	mov	r7, ip
    62b4:	077b      	lsls	r3, r7, #29
    62b6:	d000      	beq.n	62ba <__aeabi_dsub+0x24a>
    62b8:	e762      	b.n	6180 <__aeabi_dsub+0x110>
    62ba:	0763      	lsls	r3, r4, #29
    62bc:	08ff      	lsrs	r7, r7, #3
    62be:	431f      	orrs	r7, r3
    62c0:	2501      	movs	r5, #1
    62c2:	4643      	mov	r3, r8
    62c4:	08e4      	lsrs	r4, r4, #3
    62c6:	401d      	ands	r5, r3
    62c8:	e793      	b.n	61f2 <__aeabi_dsub+0x182>
    62ca:	2d00      	cmp	r5, #0
    62cc:	d178      	bne.n	63c0 <__aeabi_dsub+0x350>
    62ce:	1c75      	adds	r5, r6, #1
    62d0:	056d      	lsls	r5, r5, #21
    62d2:	0d6d      	lsrs	r5, r5, #21
    62d4:	2d01      	cmp	r5, #1
    62d6:	dc00      	bgt.n	62da <__aeabi_dsub+0x26a>
    62d8:	e0f2      	b.n	64c0 <__aeabi_dsub+0x450>
    62da:	4650      	mov	r0, sl
    62dc:	1a80      	subs	r0, r0, r2
    62de:	4582      	cmp	sl, r0
    62e0:	41bf      	sbcs	r7, r7
    62e2:	1a65      	subs	r5, r4, r1
    62e4:	427f      	negs	r7, r7
    62e6:	1bed      	subs	r5, r5, r7
    62e8:	4684      	mov	ip, r0
    62ea:	0228      	lsls	r0, r5, #8
    62ec:	d400      	bmi.n	62f0 <__aeabi_dsub+0x280>
    62ee:	e08c      	b.n	640a <__aeabi_dsub+0x39a>
    62f0:	4650      	mov	r0, sl
    62f2:	1a17      	subs	r7, r2, r0
    62f4:	42ba      	cmp	r2, r7
    62f6:	4192      	sbcs	r2, r2
    62f8:	1b0c      	subs	r4, r1, r4
    62fa:	4255      	negs	r5, r2
    62fc:	1b65      	subs	r5, r4, r5
    62fe:	4698      	mov	r8, r3
    6300:	e714      	b.n	612c <__aeabi_dsub+0xbc>
    6302:	2501      	movs	r5, #1
    6304:	4643      	mov	r3, r8
    6306:	2400      	movs	r4, #0
    6308:	401d      	ands	r5, r3
    630a:	2700      	movs	r7, #0
    630c:	e755      	b.n	61ba <__aeabi_dsub+0x14a>
    630e:	4c2a      	ldr	r4, [pc, #168]	; (63b8 <__aeabi_dsub+0x348>)
    6310:	1af6      	subs	r6, r6, r3
    6312:	402c      	ands	r4, r5
    6314:	e732      	b.n	617c <__aeabi_dsub+0x10c>
    6316:	003d      	movs	r5, r7
    6318:	3828      	subs	r0, #40	; 0x28
    631a:	4085      	lsls	r5, r0
    631c:	2700      	movs	r7, #0
    631e:	e717      	b.n	6150 <__aeabi_dsub+0xe0>
    6320:	0038      	movs	r0, r7
    6322:	f000 fa27 	bl	6774 <__clzsi2>
    6326:	3020      	adds	r0, #32
    6328:	e706      	b.n	6138 <__aeabi_dsub+0xc8>
    632a:	430a      	orrs	r2, r1
    632c:	0017      	movs	r7, r2
    632e:	2100      	movs	r1, #0
    6330:	1e7a      	subs	r2, r7, #1
    6332:	4197      	sbcs	r7, r2
    6334:	e6ee      	b.n	6114 <__aeabi_dsub+0xa4>
    6336:	2b00      	cmp	r3, #0
    6338:	d000      	beq.n	633c <__aeabi_dsub+0x2cc>
    633a:	e0e5      	b.n	6508 <__aeabi_dsub+0x498>
    633c:	1c73      	adds	r3, r6, #1
    633e:	469c      	mov	ip, r3
    6340:	055b      	lsls	r3, r3, #21
    6342:	0d5b      	lsrs	r3, r3, #21
    6344:	2b01      	cmp	r3, #1
    6346:	dc00      	bgt.n	634a <__aeabi_dsub+0x2da>
    6348:	e09f      	b.n	648a <__aeabi_dsub+0x41a>
    634a:	4b1a      	ldr	r3, [pc, #104]	; (63b4 <__aeabi_dsub+0x344>)
    634c:	459c      	cmp	ip, r3
    634e:	d100      	bne.n	6352 <__aeabi_dsub+0x2e2>
    6350:	e0c5      	b.n	64de <__aeabi_dsub+0x46e>
    6352:	4452      	add	r2, sl
    6354:	4552      	cmp	r2, sl
    6356:	4180      	sbcs	r0, r0
    6358:	1864      	adds	r4, r4, r1
    635a:	4240      	negs	r0, r0
    635c:	1824      	adds	r4, r4, r0
    635e:	07e7      	lsls	r7, r4, #31
    6360:	0852      	lsrs	r2, r2, #1
    6362:	4317      	orrs	r7, r2
    6364:	0864      	lsrs	r4, r4, #1
    6366:	4666      	mov	r6, ip
    6368:	e708      	b.n	617c <__aeabi_dsub+0x10c>
    636a:	4812      	ldr	r0, [pc, #72]	; (63b4 <__aeabi_dsub+0x344>)
    636c:	4285      	cmp	r5, r0
    636e:	d100      	bne.n	6372 <__aeabi_dsub+0x302>
    6370:	e085      	b.n	647e <__aeabi_dsub+0x40e>
    6372:	001d      	movs	r5, r3
    6374:	e6bc      	b.n	60f0 <__aeabi_dsub+0x80>
    6376:	0029      	movs	r1, r5
    6378:	3e1f      	subs	r6, #31
    637a:	40f1      	lsrs	r1, r6
    637c:	2b20      	cmp	r3, #32
    637e:	d100      	bne.n	6382 <__aeabi_dsub+0x312>
    6380:	e07f      	b.n	6482 <__aeabi_dsub+0x412>
    6382:	2240      	movs	r2, #64	; 0x40
    6384:	1ad3      	subs	r3, r2, r3
    6386:	409d      	lsls	r5, r3
    6388:	432f      	orrs	r7, r5
    638a:	1e7d      	subs	r5, r7, #1
    638c:	41af      	sbcs	r7, r5
    638e:	2400      	movs	r4, #0
    6390:	430f      	orrs	r7, r1
    6392:	2600      	movs	r6, #0
    6394:	e78e      	b.n	62b4 <__aeabi_dsub+0x244>
    6396:	002b      	movs	r3, r5
    6398:	000f      	movs	r7, r1
    639a:	3b20      	subs	r3, #32
    639c:	40df      	lsrs	r7, r3
    639e:	2d20      	cmp	r5, #32
    63a0:	d071      	beq.n	6486 <__aeabi_dsub+0x416>
    63a2:	2340      	movs	r3, #64	; 0x40
    63a4:	1b5d      	subs	r5, r3, r5
    63a6:	40a9      	lsls	r1, r5
    63a8:	430a      	orrs	r2, r1
    63aa:	1e51      	subs	r1, r2, #1
    63ac:	418a      	sbcs	r2, r1
    63ae:	2100      	movs	r1, #0
    63b0:	4317      	orrs	r7, r2
    63b2:	e6af      	b.n	6114 <__aeabi_dsub+0xa4>
    63b4:	000007ff 	.word	0x000007ff
    63b8:	ff7fffff 	.word	0xff7fffff
    63bc:	800fffff 	.word	0x800fffff
    63c0:	2e00      	cmp	r6, #0
    63c2:	d03e      	beq.n	6442 <__aeabi_dsub+0x3d2>
    63c4:	4eb3      	ldr	r6, [pc, #716]	; (6694 <__aeabi_dsub+0x624>)
    63c6:	45b4      	cmp	ip, r6
    63c8:	d045      	beq.n	6456 <__aeabi_dsub+0x3e6>
    63ca:	2680      	movs	r6, #128	; 0x80
    63cc:	0436      	lsls	r6, r6, #16
    63ce:	426d      	negs	r5, r5
    63d0:	4334      	orrs	r4, r6
    63d2:	2d38      	cmp	r5, #56	; 0x38
    63d4:	dd00      	ble.n	63d8 <__aeabi_dsub+0x368>
    63d6:	e0a8      	b.n	652a <__aeabi_dsub+0x4ba>
    63d8:	2d1f      	cmp	r5, #31
    63da:	dd00      	ble.n	63de <__aeabi_dsub+0x36e>
    63dc:	e11f      	b.n	661e <__aeabi_dsub+0x5ae>
    63de:	2620      	movs	r6, #32
    63e0:	0027      	movs	r7, r4
    63e2:	4650      	mov	r0, sl
    63e4:	1b76      	subs	r6, r6, r5
    63e6:	40b7      	lsls	r7, r6
    63e8:	40e8      	lsrs	r0, r5
    63ea:	4307      	orrs	r7, r0
    63ec:	4650      	mov	r0, sl
    63ee:	40b0      	lsls	r0, r6
    63f0:	1e46      	subs	r6, r0, #1
    63f2:	41b0      	sbcs	r0, r6
    63f4:	40ec      	lsrs	r4, r5
    63f6:	4338      	orrs	r0, r7
    63f8:	1a17      	subs	r7, r2, r0
    63fa:	42ba      	cmp	r2, r7
    63fc:	4192      	sbcs	r2, r2
    63fe:	1b0c      	subs	r4, r1, r4
    6400:	4252      	negs	r2, r2
    6402:	1aa4      	subs	r4, r4, r2
    6404:	4666      	mov	r6, ip
    6406:	4698      	mov	r8, r3
    6408:	e68b      	b.n	6122 <__aeabi_dsub+0xb2>
    640a:	4664      	mov	r4, ip
    640c:	4667      	mov	r7, ip
    640e:	432c      	orrs	r4, r5
    6410:	d000      	beq.n	6414 <__aeabi_dsub+0x3a4>
    6412:	e68b      	b.n	612c <__aeabi_dsub+0xbc>
    6414:	2500      	movs	r5, #0
    6416:	2600      	movs	r6, #0
    6418:	2700      	movs	r7, #0
    641a:	e6ea      	b.n	61f2 <__aeabi_dsub+0x182>
    641c:	001e      	movs	r6, r3
    641e:	e6ad      	b.n	617c <__aeabi_dsub+0x10c>
    6420:	2b1f      	cmp	r3, #31
    6422:	dc60      	bgt.n	64e6 <__aeabi_dsub+0x476>
    6424:	2720      	movs	r7, #32
    6426:	1af8      	subs	r0, r7, r3
    6428:	000f      	movs	r7, r1
    642a:	4684      	mov	ip, r0
    642c:	4087      	lsls	r7, r0
    642e:	0010      	movs	r0, r2
    6430:	40d8      	lsrs	r0, r3
    6432:	4307      	orrs	r7, r0
    6434:	4660      	mov	r0, ip
    6436:	4082      	lsls	r2, r0
    6438:	1e50      	subs	r0, r2, #1
    643a:	4182      	sbcs	r2, r0
    643c:	40d9      	lsrs	r1, r3
    643e:	4317      	orrs	r7, r2
    6440:	e6f5      	b.n	622e <__aeabi_dsub+0x1be>
    6442:	0026      	movs	r6, r4
    6444:	4650      	mov	r0, sl
    6446:	4306      	orrs	r6, r0
    6448:	d005      	beq.n	6456 <__aeabi_dsub+0x3e6>
    644a:	43ed      	mvns	r5, r5
    644c:	2d00      	cmp	r5, #0
    644e:	d0d3      	beq.n	63f8 <__aeabi_dsub+0x388>
    6450:	4e90      	ldr	r6, [pc, #576]	; (6694 <__aeabi_dsub+0x624>)
    6452:	45b4      	cmp	ip, r6
    6454:	d1bd      	bne.n	63d2 <__aeabi_dsub+0x362>
    6456:	000c      	movs	r4, r1
    6458:	0017      	movs	r7, r2
    645a:	4666      	mov	r6, ip
    645c:	4698      	mov	r8, r3
    645e:	e68d      	b.n	617c <__aeabi_dsub+0x10c>
    6460:	488c      	ldr	r0, [pc, #560]	; (6694 <__aeabi_dsub+0x624>)
    6462:	4283      	cmp	r3, r0
    6464:	d00b      	beq.n	647e <__aeabi_dsub+0x40e>
    6466:	4663      	mov	r3, ip
    6468:	e6d9      	b.n	621e <__aeabi_dsub+0x1ae>
    646a:	2d00      	cmp	r5, #0
    646c:	d000      	beq.n	6470 <__aeabi_dsub+0x400>
    646e:	e096      	b.n	659e <__aeabi_dsub+0x52e>
    6470:	0008      	movs	r0, r1
    6472:	4310      	orrs	r0, r2
    6474:	d100      	bne.n	6478 <__aeabi_dsub+0x408>
    6476:	e0e2      	b.n	663e <__aeabi_dsub+0x5ce>
    6478:	000c      	movs	r4, r1
    647a:	0017      	movs	r7, r2
    647c:	4698      	mov	r8, r3
    647e:	4e85      	ldr	r6, [pc, #532]	; (6694 <__aeabi_dsub+0x624>)
    6480:	e67c      	b.n	617c <__aeabi_dsub+0x10c>
    6482:	2500      	movs	r5, #0
    6484:	e780      	b.n	6388 <__aeabi_dsub+0x318>
    6486:	2100      	movs	r1, #0
    6488:	e78e      	b.n	63a8 <__aeabi_dsub+0x338>
    648a:	0023      	movs	r3, r4
    648c:	4650      	mov	r0, sl
    648e:	4303      	orrs	r3, r0
    6490:	2e00      	cmp	r6, #0
    6492:	d000      	beq.n	6496 <__aeabi_dsub+0x426>
    6494:	e0a8      	b.n	65e8 <__aeabi_dsub+0x578>
    6496:	2b00      	cmp	r3, #0
    6498:	d100      	bne.n	649c <__aeabi_dsub+0x42c>
    649a:	e0de      	b.n	665a <__aeabi_dsub+0x5ea>
    649c:	000b      	movs	r3, r1
    649e:	4313      	orrs	r3, r2
    64a0:	d100      	bne.n	64a4 <__aeabi_dsub+0x434>
    64a2:	e66b      	b.n	617c <__aeabi_dsub+0x10c>
    64a4:	4452      	add	r2, sl
    64a6:	4552      	cmp	r2, sl
    64a8:	4180      	sbcs	r0, r0
    64aa:	1864      	adds	r4, r4, r1
    64ac:	4240      	negs	r0, r0
    64ae:	1824      	adds	r4, r4, r0
    64b0:	0017      	movs	r7, r2
    64b2:	0223      	lsls	r3, r4, #8
    64b4:	d400      	bmi.n	64b8 <__aeabi_dsub+0x448>
    64b6:	e6fd      	b.n	62b4 <__aeabi_dsub+0x244>
    64b8:	4b77      	ldr	r3, [pc, #476]	; (6698 <__aeabi_dsub+0x628>)
    64ba:	4666      	mov	r6, ip
    64bc:	401c      	ands	r4, r3
    64be:	e65d      	b.n	617c <__aeabi_dsub+0x10c>
    64c0:	0025      	movs	r5, r4
    64c2:	4650      	mov	r0, sl
    64c4:	4305      	orrs	r5, r0
    64c6:	2e00      	cmp	r6, #0
    64c8:	d1cf      	bne.n	646a <__aeabi_dsub+0x3fa>
    64ca:	2d00      	cmp	r5, #0
    64cc:	d14f      	bne.n	656e <__aeabi_dsub+0x4fe>
    64ce:	000c      	movs	r4, r1
    64d0:	4314      	orrs	r4, r2
    64d2:	d100      	bne.n	64d6 <__aeabi_dsub+0x466>
    64d4:	e0a0      	b.n	6618 <__aeabi_dsub+0x5a8>
    64d6:	000c      	movs	r4, r1
    64d8:	0017      	movs	r7, r2
    64da:	4698      	mov	r8, r3
    64dc:	e64e      	b.n	617c <__aeabi_dsub+0x10c>
    64de:	4666      	mov	r6, ip
    64e0:	2400      	movs	r4, #0
    64e2:	2700      	movs	r7, #0
    64e4:	e685      	b.n	61f2 <__aeabi_dsub+0x182>
    64e6:	001f      	movs	r7, r3
    64e8:	0008      	movs	r0, r1
    64ea:	3f20      	subs	r7, #32
    64ec:	40f8      	lsrs	r0, r7
    64ee:	0007      	movs	r7, r0
    64f0:	2b20      	cmp	r3, #32
    64f2:	d100      	bne.n	64f6 <__aeabi_dsub+0x486>
    64f4:	e08e      	b.n	6614 <__aeabi_dsub+0x5a4>
    64f6:	2040      	movs	r0, #64	; 0x40
    64f8:	1ac3      	subs	r3, r0, r3
    64fa:	4099      	lsls	r1, r3
    64fc:	430a      	orrs	r2, r1
    64fe:	1e51      	subs	r1, r2, #1
    6500:	418a      	sbcs	r2, r1
    6502:	2100      	movs	r1, #0
    6504:	4317      	orrs	r7, r2
    6506:	e692      	b.n	622e <__aeabi_dsub+0x1be>
    6508:	2e00      	cmp	r6, #0
    650a:	d114      	bne.n	6536 <__aeabi_dsub+0x4c6>
    650c:	0026      	movs	r6, r4
    650e:	4650      	mov	r0, sl
    6510:	4306      	orrs	r6, r0
    6512:	d062      	beq.n	65da <__aeabi_dsub+0x56a>
    6514:	43db      	mvns	r3, r3
    6516:	2b00      	cmp	r3, #0
    6518:	d15c      	bne.n	65d4 <__aeabi_dsub+0x564>
    651a:	1887      	adds	r7, r0, r2
    651c:	4297      	cmp	r7, r2
    651e:	4192      	sbcs	r2, r2
    6520:	1864      	adds	r4, r4, r1
    6522:	4252      	negs	r2, r2
    6524:	18a4      	adds	r4, r4, r2
    6526:	4666      	mov	r6, ip
    6528:	e687      	b.n	623a <__aeabi_dsub+0x1ca>
    652a:	4650      	mov	r0, sl
    652c:	4320      	orrs	r0, r4
    652e:	1e44      	subs	r4, r0, #1
    6530:	41a0      	sbcs	r0, r4
    6532:	2400      	movs	r4, #0
    6534:	e760      	b.n	63f8 <__aeabi_dsub+0x388>
    6536:	4e57      	ldr	r6, [pc, #348]	; (6694 <__aeabi_dsub+0x624>)
    6538:	45b4      	cmp	ip, r6
    653a:	d04e      	beq.n	65da <__aeabi_dsub+0x56a>
    653c:	2680      	movs	r6, #128	; 0x80
    653e:	0436      	lsls	r6, r6, #16
    6540:	425b      	negs	r3, r3
    6542:	4334      	orrs	r4, r6
    6544:	2b38      	cmp	r3, #56	; 0x38
    6546:	dd00      	ble.n	654a <__aeabi_dsub+0x4da>
    6548:	e07f      	b.n	664a <__aeabi_dsub+0x5da>
    654a:	2b1f      	cmp	r3, #31
    654c:	dd00      	ble.n	6550 <__aeabi_dsub+0x4e0>
    654e:	e08b      	b.n	6668 <__aeabi_dsub+0x5f8>
    6550:	2620      	movs	r6, #32
    6552:	0027      	movs	r7, r4
    6554:	4650      	mov	r0, sl
    6556:	1af6      	subs	r6, r6, r3
    6558:	40b7      	lsls	r7, r6
    655a:	40d8      	lsrs	r0, r3
    655c:	4307      	orrs	r7, r0
    655e:	4650      	mov	r0, sl
    6560:	40b0      	lsls	r0, r6
    6562:	1e46      	subs	r6, r0, #1
    6564:	41b0      	sbcs	r0, r6
    6566:	4307      	orrs	r7, r0
    6568:	40dc      	lsrs	r4, r3
    656a:	18bf      	adds	r7, r7, r2
    656c:	e7d6      	b.n	651c <__aeabi_dsub+0x4ac>
    656e:	000d      	movs	r5, r1
    6570:	4315      	orrs	r5, r2
    6572:	d100      	bne.n	6576 <__aeabi_dsub+0x506>
    6574:	e602      	b.n	617c <__aeabi_dsub+0x10c>
    6576:	4650      	mov	r0, sl
    6578:	1a80      	subs	r0, r0, r2
    657a:	4582      	cmp	sl, r0
    657c:	41bf      	sbcs	r7, r7
    657e:	1a65      	subs	r5, r4, r1
    6580:	427f      	negs	r7, r7
    6582:	1bed      	subs	r5, r5, r7
    6584:	4684      	mov	ip, r0
    6586:	0228      	lsls	r0, r5, #8
    6588:	d400      	bmi.n	658c <__aeabi_dsub+0x51c>
    658a:	e68d      	b.n	62a8 <__aeabi_dsub+0x238>
    658c:	4650      	mov	r0, sl
    658e:	1a17      	subs	r7, r2, r0
    6590:	42ba      	cmp	r2, r7
    6592:	4192      	sbcs	r2, r2
    6594:	1b0c      	subs	r4, r1, r4
    6596:	4252      	negs	r2, r2
    6598:	1aa4      	subs	r4, r4, r2
    659a:	4698      	mov	r8, r3
    659c:	e5ee      	b.n	617c <__aeabi_dsub+0x10c>
    659e:	000d      	movs	r5, r1
    65a0:	4315      	orrs	r5, r2
    65a2:	d100      	bne.n	65a6 <__aeabi_dsub+0x536>
    65a4:	e76b      	b.n	647e <__aeabi_dsub+0x40e>
    65a6:	4650      	mov	r0, sl
    65a8:	0767      	lsls	r7, r4, #29
    65aa:	08c0      	lsrs	r0, r0, #3
    65ac:	4307      	orrs	r7, r0
    65ae:	2080      	movs	r0, #128	; 0x80
    65b0:	08e4      	lsrs	r4, r4, #3
    65b2:	0300      	lsls	r0, r0, #12
    65b4:	4204      	tst	r4, r0
    65b6:	d007      	beq.n	65c8 <__aeabi_dsub+0x558>
    65b8:	08cd      	lsrs	r5, r1, #3
    65ba:	4205      	tst	r5, r0
    65bc:	d104      	bne.n	65c8 <__aeabi_dsub+0x558>
    65be:	002c      	movs	r4, r5
    65c0:	4698      	mov	r8, r3
    65c2:	08d7      	lsrs	r7, r2, #3
    65c4:	0749      	lsls	r1, r1, #29
    65c6:	430f      	orrs	r7, r1
    65c8:	0f7b      	lsrs	r3, r7, #29
    65ca:	00e4      	lsls	r4, r4, #3
    65cc:	431c      	orrs	r4, r3
    65ce:	00ff      	lsls	r7, r7, #3
    65d0:	4e30      	ldr	r6, [pc, #192]	; (6694 <__aeabi_dsub+0x624>)
    65d2:	e5d3      	b.n	617c <__aeabi_dsub+0x10c>
    65d4:	4e2f      	ldr	r6, [pc, #188]	; (6694 <__aeabi_dsub+0x624>)
    65d6:	45b4      	cmp	ip, r6
    65d8:	d1b4      	bne.n	6544 <__aeabi_dsub+0x4d4>
    65da:	000c      	movs	r4, r1
    65dc:	0017      	movs	r7, r2
    65de:	4666      	mov	r6, ip
    65e0:	e5cc      	b.n	617c <__aeabi_dsub+0x10c>
    65e2:	2700      	movs	r7, #0
    65e4:	2400      	movs	r4, #0
    65e6:	e5e8      	b.n	61ba <__aeabi_dsub+0x14a>
    65e8:	2b00      	cmp	r3, #0
    65ea:	d039      	beq.n	6660 <__aeabi_dsub+0x5f0>
    65ec:	000b      	movs	r3, r1
    65ee:	4313      	orrs	r3, r2
    65f0:	d100      	bne.n	65f4 <__aeabi_dsub+0x584>
    65f2:	e744      	b.n	647e <__aeabi_dsub+0x40e>
    65f4:	08c0      	lsrs	r0, r0, #3
    65f6:	0767      	lsls	r7, r4, #29
    65f8:	4307      	orrs	r7, r0
    65fa:	2080      	movs	r0, #128	; 0x80
    65fc:	08e4      	lsrs	r4, r4, #3
    65fe:	0300      	lsls	r0, r0, #12
    6600:	4204      	tst	r4, r0
    6602:	d0e1      	beq.n	65c8 <__aeabi_dsub+0x558>
    6604:	08cb      	lsrs	r3, r1, #3
    6606:	4203      	tst	r3, r0
    6608:	d1de      	bne.n	65c8 <__aeabi_dsub+0x558>
    660a:	08d7      	lsrs	r7, r2, #3
    660c:	0749      	lsls	r1, r1, #29
    660e:	430f      	orrs	r7, r1
    6610:	001c      	movs	r4, r3
    6612:	e7d9      	b.n	65c8 <__aeabi_dsub+0x558>
    6614:	2100      	movs	r1, #0
    6616:	e771      	b.n	64fc <__aeabi_dsub+0x48c>
    6618:	2500      	movs	r5, #0
    661a:	2700      	movs	r7, #0
    661c:	e5e9      	b.n	61f2 <__aeabi_dsub+0x182>
    661e:	002e      	movs	r6, r5
    6620:	0027      	movs	r7, r4
    6622:	3e20      	subs	r6, #32
    6624:	40f7      	lsrs	r7, r6
    6626:	2d20      	cmp	r5, #32
    6628:	d02f      	beq.n	668a <__aeabi_dsub+0x61a>
    662a:	2640      	movs	r6, #64	; 0x40
    662c:	1b75      	subs	r5, r6, r5
    662e:	40ac      	lsls	r4, r5
    6630:	4650      	mov	r0, sl
    6632:	4320      	orrs	r0, r4
    6634:	1e44      	subs	r4, r0, #1
    6636:	41a0      	sbcs	r0, r4
    6638:	2400      	movs	r4, #0
    663a:	4338      	orrs	r0, r7
    663c:	e6dc      	b.n	63f8 <__aeabi_dsub+0x388>
    663e:	2480      	movs	r4, #128	; 0x80
    6640:	2500      	movs	r5, #0
    6642:	0324      	lsls	r4, r4, #12
    6644:	4e13      	ldr	r6, [pc, #76]	; (6694 <__aeabi_dsub+0x624>)
    6646:	2700      	movs	r7, #0
    6648:	e5d3      	b.n	61f2 <__aeabi_dsub+0x182>
    664a:	4650      	mov	r0, sl
    664c:	4320      	orrs	r0, r4
    664e:	0007      	movs	r7, r0
    6650:	1e78      	subs	r0, r7, #1
    6652:	4187      	sbcs	r7, r0
    6654:	2400      	movs	r4, #0
    6656:	18bf      	adds	r7, r7, r2
    6658:	e760      	b.n	651c <__aeabi_dsub+0x4ac>
    665a:	000c      	movs	r4, r1
    665c:	0017      	movs	r7, r2
    665e:	e58d      	b.n	617c <__aeabi_dsub+0x10c>
    6660:	000c      	movs	r4, r1
    6662:	0017      	movs	r7, r2
    6664:	4e0b      	ldr	r6, [pc, #44]	; (6694 <__aeabi_dsub+0x624>)
    6666:	e589      	b.n	617c <__aeabi_dsub+0x10c>
    6668:	001e      	movs	r6, r3
    666a:	0027      	movs	r7, r4
    666c:	3e20      	subs	r6, #32
    666e:	40f7      	lsrs	r7, r6
    6670:	2b20      	cmp	r3, #32
    6672:	d00c      	beq.n	668e <__aeabi_dsub+0x61e>
    6674:	2640      	movs	r6, #64	; 0x40
    6676:	1af3      	subs	r3, r6, r3
    6678:	409c      	lsls	r4, r3
    667a:	4650      	mov	r0, sl
    667c:	4320      	orrs	r0, r4
    667e:	1e44      	subs	r4, r0, #1
    6680:	41a0      	sbcs	r0, r4
    6682:	4307      	orrs	r7, r0
    6684:	2400      	movs	r4, #0
    6686:	18bf      	adds	r7, r7, r2
    6688:	e748      	b.n	651c <__aeabi_dsub+0x4ac>
    668a:	2400      	movs	r4, #0
    668c:	e7d0      	b.n	6630 <__aeabi_dsub+0x5c0>
    668e:	2400      	movs	r4, #0
    6690:	e7f3      	b.n	667a <__aeabi_dsub+0x60a>
    6692:	46c0      	nop			; (mov r8, r8)
    6694:	000007ff 	.word	0x000007ff
    6698:	ff7fffff 	.word	0xff7fffff

0000669c <__aeabi_d2iz>:
    669c:	b530      	push	{r4, r5, lr}
    669e:	4d13      	ldr	r5, [pc, #76]	; (66ec <__aeabi_d2iz+0x50>)
    66a0:	030a      	lsls	r2, r1, #12
    66a2:	004b      	lsls	r3, r1, #1
    66a4:	0b12      	lsrs	r2, r2, #12
    66a6:	0d5b      	lsrs	r3, r3, #21
    66a8:	0fc9      	lsrs	r1, r1, #31
    66aa:	2400      	movs	r4, #0
    66ac:	42ab      	cmp	r3, r5
    66ae:	dd10      	ble.n	66d2 <__aeabi_d2iz+0x36>
    66b0:	4c0f      	ldr	r4, [pc, #60]	; (66f0 <__aeabi_d2iz+0x54>)
    66b2:	42a3      	cmp	r3, r4
    66b4:	dc0f      	bgt.n	66d6 <__aeabi_d2iz+0x3a>
    66b6:	2480      	movs	r4, #128	; 0x80
    66b8:	4d0e      	ldr	r5, [pc, #56]	; (66f4 <__aeabi_d2iz+0x58>)
    66ba:	0364      	lsls	r4, r4, #13
    66bc:	4322      	orrs	r2, r4
    66be:	1aed      	subs	r5, r5, r3
    66c0:	2d1f      	cmp	r5, #31
    66c2:	dd0b      	ble.n	66dc <__aeabi_d2iz+0x40>
    66c4:	480c      	ldr	r0, [pc, #48]	; (66f8 <__aeabi_d2iz+0x5c>)
    66c6:	1ac3      	subs	r3, r0, r3
    66c8:	40da      	lsrs	r2, r3
    66ca:	4254      	negs	r4, r2
    66cc:	2900      	cmp	r1, #0
    66ce:	d100      	bne.n	66d2 <__aeabi_d2iz+0x36>
    66d0:	0014      	movs	r4, r2
    66d2:	0020      	movs	r0, r4
    66d4:	bd30      	pop	{r4, r5, pc}
    66d6:	4b09      	ldr	r3, [pc, #36]	; (66fc <__aeabi_d2iz+0x60>)
    66d8:	18cc      	adds	r4, r1, r3
    66da:	e7fa      	b.n	66d2 <__aeabi_d2iz+0x36>
    66dc:	4c08      	ldr	r4, [pc, #32]	; (6700 <__aeabi_d2iz+0x64>)
    66de:	40e8      	lsrs	r0, r5
    66e0:	46a4      	mov	ip, r4
    66e2:	4463      	add	r3, ip
    66e4:	409a      	lsls	r2, r3
    66e6:	4302      	orrs	r2, r0
    66e8:	e7ef      	b.n	66ca <__aeabi_d2iz+0x2e>
    66ea:	46c0      	nop			; (mov r8, r8)
    66ec:	000003fe 	.word	0x000003fe
    66f0:	0000041d 	.word	0x0000041d
    66f4:	00000433 	.word	0x00000433
    66f8:	00000413 	.word	0x00000413
    66fc:	7fffffff 	.word	0x7fffffff
    6700:	fffffbed 	.word	0xfffffbed

00006704 <__aeabi_ui2d>:
    6704:	b510      	push	{r4, lr}
    6706:	1e04      	subs	r4, r0, #0
    6708:	d028      	beq.n	675c <__aeabi_ui2d+0x58>
    670a:	f000 f833 	bl	6774 <__clzsi2>
    670e:	4b15      	ldr	r3, [pc, #84]	; (6764 <__aeabi_ui2d+0x60>)
    6710:	4a15      	ldr	r2, [pc, #84]	; (6768 <__aeabi_ui2d+0x64>)
    6712:	1a1b      	subs	r3, r3, r0
    6714:	1ad2      	subs	r2, r2, r3
    6716:	2a1f      	cmp	r2, #31
    6718:	dd15      	ble.n	6746 <__aeabi_ui2d+0x42>
    671a:	4a14      	ldr	r2, [pc, #80]	; (676c <__aeabi_ui2d+0x68>)
    671c:	1ad2      	subs	r2, r2, r3
    671e:	4094      	lsls	r4, r2
    6720:	2200      	movs	r2, #0
    6722:	0324      	lsls	r4, r4, #12
    6724:	055b      	lsls	r3, r3, #21
    6726:	0b24      	lsrs	r4, r4, #12
    6728:	0d5b      	lsrs	r3, r3, #21
    672a:	2100      	movs	r1, #0
    672c:	0010      	movs	r0, r2
    672e:	0324      	lsls	r4, r4, #12
    6730:	0d0a      	lsrs	r2, r1, #20
    6732:	0b24      	lsrs	r4, r4, #12
    6734:	0512      	lsls	r2, r2, #20
    6736:	4322      	orrs	r2, r4
    6738:	4c0d      	ldr	r4, [pc, #52]	; (6770 <__aeabi_ui2d+0x6c>)
    673a:	051b      	lsls	r3, r3, #20
    673c:	4022      	ands	r2, r4
    673e:	4313      	orrs	r3, r2
    6740:	005b      	lsls	r3, r3, #1
    6742:	0859      	lsrs	r1, r3, #1
    6744:	bd10      	pop	{r4, pc}
    6746:	0021      	movs	r1, r4
    6748:	4091      	lsls	r1, r2
    674a:	000a      	movs	r2, r1
    674c:	210b      	movs	r1, #11
    674e:	1a08      	subs	r0, r1, r0
    6750:	40c4      	lsrs	r4, r0
    6752:	055b      	lsls	r3, r3, #21
    6754:	0324      	lsls	r4, r4, #12
    6756:	0b24      	lsrs	r4, r4, #12
    6758:	0d5b      	lsrs	r3, r3, #21
    675a:	e7e6      	b.n	672a <__aeabi_ui2d+0x26>
    675c:	2300      	movs	r3, #0
    675e:	2400      	movs	r4, #0
    6760:	2200      	movs	r2, #0
    6762:	e7e2      	b.n	672a <__aeabi_ui2d+0x26>
    6764:	0000041e 	.word	0x0000041e
    6768:	00000433 	.word	0x00000433
    676c:	00000413 	.word	0x00000413
    6770:	800fffff 	.word	0x800fffff

00006774 <__clzsi2>:
    6774:	211c      	movs	r1, #28
    6776:	2301      	movs	r3, #1
    6778:	041b      	lsls	r3, r3, #16
    677a:	4298      	cmp	r0, r3
    677c:	d301      	bcc.n	6782 <__clzsi2+0xe>
    677e:	0c00      	lsrs	r0, r0, #16
    6780:	3910      	subs	r1, #16
    6782:	0a1b      	lsrs	r3, r3, #8
    6784:	4298      	cmp	r0, r3
    6786:	d301      	bcc.n	678c <__clzsi2+0x18>
    6788:	0a00      	lsrs	r0, r0, #8
    678a:	3908      	subs	r1, #8
    678c:	091b      	lsrs	r3, r3, #4
    678e:	4298      	cmp	r0, r3
    6790:	d301      	bcc.n	6796 <__clzsi2+0x22>
    6792:	0900      	lsrs	r0, r0, #4
    6794:	3904      	subs	r1, #4
    6796:	a202      	add	r2, pc, #8	; (adr r2, 67a0 <__clzsi2+0x2c>)
    6798:	5c10      	ldrb	r0, [r2, r0]
    679a:	1840      	adds	r0, r0, r1
    679c:	4770      	bx	lr
    679e:	46c0      	nop			; (mov r8, r8)
    67a0:	02020304 	.word	0x02020304
    67a4:	01010101 	.word	0x01010101
	...

000067b0 <__libc_init_array>:
    67b0:	b570      	push	{r4, r5, r6, lr}
    67b2:	2600      	movs	r6, #0
    67b4:	4d0c      	ldr	r5, [pc, #48]	; (67e8 <__libc_init_array+0x38>)
    67b6:	4c0d      	ldr	r4, [pc, #52]	; (67ec <__libc_init_array+0x3c>)
    67b8:	1b64      	subs	r4, r4, r5
    67ba:	10a4      	asrs	r4, r4, #2
    67bc:	42a6      	cmp	r6, r4
    67be:	d109      	bne.n	67d4 <__libc_init_array+0x24>
    67c0:	2600      	movs	r6, #0
    67c2:	f002 fb7b 	bl	8ebc <_init>
    67c6:	4d0a      	ldr	r5, [pc, #40]	; (67f0 <__libc_init_array+0x40>)
    67c8:	4c0a      	ldr	r4, [pc, #40]	; (67f4 <__libc_init_array+0x44>)
    67ca:	1b64      	subs	r4, r4, r5
    67cc:	10a4      	asrs	r4, r4, #2
    67ce:	42a6      	cmp	r6, r4
    67d0:	d105      	bne.n	67de <__libc_init_array+0x2e>
    67d2:	bd70      	pop	{r4, r5, r6, pc}
    67d4:	00b3      	lsls	r3, r6, #2
    67d6:	58eb      	ldr	r3, [r5, r3]
    67d8:	4798      	blx	r3
    67da:	3601      	adds	r6, #1
    67dc:	e7ee      	b.n	67bc <__libc_init_array+0xc>
    67de:	00b3      	lsls	r3, r6, #2
    67e0:	58eb      	ldr	r3, [r5, r3]
    67e2:	4798      	blx	r3
    67e4:	3601      	adds	r6, #1
    67e6:	e7f2      	b.n	67ce <__libc_init_array+0x1e>
    67e8:	00008ec8 	.word	0x00008ec8
    67ec:	00008ec8 	.word	0x00008ec8
    67f0:	00008ec8 	.word	0x00008ec8
    67f4:	00008ecc 	.word	0x00008ecc

000067f8 <malloc>:
    67f8:	b510      	push	{r4, lr}
    67fa:	4b03      	ldr	r3, [pc, #12]	; (6808 <malloc+0x10>)
    67fc:	0001      	movs	r1, r0
    67fe:	6818      	ldr	r0, [r3, #0]
    6800:	f000 f88a 	bl	6918 <_malloc_r>
    6804:	bd10      	pop	{r4, pc}
    6806:	46c0      	nop			; (mov r8, r8)
    6808:	20000414 	.word	0x20000414

0000680c <free>:
    680c:	b510      	push	{r4, lr}
    680e:	4b03      	ldr	r3, [pc, #12]	; (681c <free+0x10>)
    6810:	0001      	movs	r1, r0
    6812:	6818      	ldr	r0, [r3, #0]
    6814:	f000 f836 	bl	6884 <_free_r>
    6818:	bd10      	pop	{r4, pc}
    681a:	46c0      	nop			; (mov r8, r8)
    681c:	20000414 	.word	0x20000414

00006820 <memcmp>:
    6820:	b530      	push	{r4, r5, lr}
    6822:	2400      	movs	r4, #0
    6824:	42a2      	cmp	r2, r4
    6826:	d101      	bne.n	682c <memcmp+0xc>
    6828:	2000      	movs	r0, #0
    682a:	e005      	b.n	6838 <memcmp+0x18>
    682c:	5d03      	ldrb	r3, [r0, r4]
    682e:	1c65      	adds	r5, r4, #1
    6830:	5d0c      	ldrb	r4, [r1, r4]
    6832:	42a3      	cmp	r3, r4
    6834:	d001      	beq.n	683a <memcmp+0x1a>
    6836:	1b18      	subs	r0, r3, r4
    6838:	bd30      	pop	{r4, r5, pc}
    683a:	002c      	movs	r4, r5
    683c:	e7f2      	b.n	6824 <memcmp+0x4>

0000683e <memcpy>:
    683e:	2300      	movs	r3, #0
    6840:	b510      	push	{r4, lr}
    6842:	429a      	cmp	r2, r3
    6844:	d100      	bne.n	6848 <memcpy+0xa>
    6846:	bd10      	pop	{r4, pc}
    6848:	5ccc      	ldrb	r4, [r1, r3]
    684a:	54c4      	strb	r4, [r0, r3]
    684c:	3301      	adds	r3, #1
    684e:	e7f8      	b.n	6842 <memcpy+0x4>

00006850 <memmove>:
    6850:	b510      	push	{r4, lr}
    6852:	4288      	cmp	r0, r1
    6854:	d902      	bls.n	685c <memmove+0xc>
    6856:	188b      	adds	r3, r1, r2
    6858:	4298      	cmp	r0, r3
    685a:	d308      	bcc.n	686e <memmove+0x1e>
    685c:	2300      	movs	r3, #0
    685e:	429a      	cmp	r2, r3
    6860:	d007      	beq.n	6872 <memmove+0x22>
    6862:	5ccc      	ldrb	r4, [r1, r3]
    6864:	54c4      	strb	r4, [r0, r3]
    6866:	3301      	adds	r3, #1
    6868:	e7f9      	b.n	685e <memmove+0xe>
    686a:	5c8b      	ldrb	r3, [r1, r2]
    686c:	5483      	strb	r3, [r0, r2]
    686e:	3a01      	subs	r2, #1
    6870:	d2fb      	bcs.n	686a <memmove+0x1a>
    6872:	bd10      	pop	{r4, pc}

00006874 <memset>:
    6874:	0003      	movs	r3, r0
    6876:	1882      	adds	r2, r0, r2
    6878:	4293      	cmp	r3, r2
    687a:	d100      	bne.n	687e <memset+0xa>
    687c:	4770      	bx	lr
    687e:	7019      	strb	r1, [r3, #0]
    6880:	3301      	adds	r3, #1
    6882:	e7f9      	b.n	6878 <memset+0x4>

00006884 <_free_r>:
    6884:	b570      	push	{r4, r5, r6, lr}
    6886:	0005      	movs	r5, r0
    6888:	2900      	cmp	r1, #0
    688a:	d010      	beq.n	68ae <_free_r+0x2a>
    688c:	1f0c      	subs	r4, r1, #4
    688e:	6823      	ldr	r3, [r4, #0]
    6890:	2b00      	cmp	r3, #0
    6892:	da00      	bge.n	6896 <_free_r+0x12>
    6894:	18e4      	adds	r4, r4, r3
    6896:	0028      	movs	r0, r5
    6898:	f000 fd7c 	bl	7394 <__malloc_lock>
    689c:	4a1d      	ldr	r2, [pc, #116]	; (6914 <_free_r+0x90>)
    689e:	6813      	ldr	r3, [r2, #0]
    68a0:	2b00      	cmp	r3, #0
    68a2:	d105      	bne.n	68b0 <_free_r+0x2c>
    68a4:	6063      	str	r3, [r4, #4]
    68a6:	6014      	str	r4, [r2, #0]
    68a8:	0028      	movs	r0, r5
    68aa:	f000 fd74 	bl	7396 <__malloc_unlock>
    68ae:	bd70      	pop	{r4, r5, r6, pc}
    68b0:	42a3      	cmp	r3, r4
    68b2:	d909      	bls.n	68c8 <_free_r+0x44>
    68b4:	6821      	ldr	r1, [r4, #0]
    68b6:	1860      	adds	r0, r4, r1
    68b8:	4283      	cmp	r3, r0
    68ba:	d1f3      	bne.n	68a4 <_free_r+0x20>
    68bc:	6818      	ldr	r0, [r3, #0]
    68be:	685b      	ldr	r3, [r3, #4]
    68c0:	1841      	adds	r1, r0, r1
    68c2:	6021      	str	r1, [r4, #0]
    68c4:	e7ee      	b.n	68a4 <_free_r+0x20>
    68c6:	0013      	movs	r3, r2
    68c8:	685a      	ldr	r2, [r3, #4]
    68ca:	2a00      	cmp	r2, #0
    68cc:	d001      	beq.n	68d2 <_free_r+0x4e>
    68ce:	42a2      	cmp	r2, r4
    68d0:	d9f9      	bls.n	68c6 <_free_r+0x42>
    68d2:	6819      	ldr	r1, [r3, #0]
    68d4:	1858      	adds	r0, r3, r1
    68d6:	42a0      	cmp	r0, r4
    68d8:	d10b      	bne.n	68f2 <_free_r+0x6e>
    68da:	6820      	ldr	r0, [r4, #0]
    68dc:	1809      	adds	r1, r1, r0
    68de:	1858      	adds	r0, r3, r1
    68e0:	6019      	str	r1, [r3, #0]
    68e2:	4282      	cmp	r2, r0
    68e4:	d1e0      	bne.n	68a8 <_free_r+0x24>
    68e6:	6810      	ldr	r0, [r2, #0]
    68e8:	6852      	ldr	r2, [r2, #4]
    68ea:	1841      	adds	r1, r0, r1
    68ec:	6019      	str	r1, [r3, #0]
    68ee:	605a      	str	r2, [r3, #4]
    68f0:	e7da      	b.n	68a8 <_free_r+0x24>
    68f2:	42a0      	cmp	r0, r4
    68f4:	d902      	bls.n	68fc <_free_r+0x78>
    68f6:	230c      	movs	r3, #12
    68f8:	602b      	str	r3, [r5, #0]
    68fa:	e7d5      	b.n	68a8 <_free_r+0x24>
    68fc:	6821      	ldr	r1, [r4, #0]
    68fe:	1860      	adds	r0, r4, r1
    6900:	4282      	cmp	r2, r0
    6902:	d103      	bne.n	690c <_free_r+0x88>
    6904:	6810      	ldr	r0, [r2, #0]
    6906:	6852      	ldr	r2, [r2, #4]
    6908:	1841      	adds	r1, r0, r1
    690a:	6021      	str	r1, [r4, #0]
    690c:	6062      	str	r2, [r4, #4]
    690e:	605c      	str	r4, [r3, #4]
    6910:	e7ca      	b.n	68a8 <_free_r+0x24>
    6912:	46c0      	nop			; (mov r8, r8)
    6914:	20000a58 	.word	0x20000a58

00006918 <_malloc_r>:
    6918:	2303      	movs	r3, #3
    691a:	b570      	push	{r4, r5, r6, lr}
    691c:	1ccd      	adds	r5, r1, #3
    691e:	439d      	bics	r5, r3
    6920:	3508      	adds	r5, #8
    6922:	0006      	movs	r6, r0
    6924:	2d0c      	cmp	r5, #12
    6926:	d21e      	bcs.n	6966 <_malloc_r+0x4e>
    6928:	250c      	movs	r5, #12
    692a:	42a9      	cmp	r1, r5
    692c:	d81d      	bhi.n	696a <_malloc_r+0x52>
    692e:	0030      	movs	r0, r6
    6930:	f000 fd30 	bl	7394 <__malloc_lock>
    6934:	4a25      	ldr	r2, [pc, #148]	; (69cc <_malloc_r+0xb4>)
    6936:	6814      	ldr	r4, [r2, #0]
    6938:	0021      	movs	r1, r4
    693a:	2900      	cmp	r1, #0
    693c:	d119      	bne.n	6972 <_malloc_r+0x5a>
    693e:	4c24      	ldr	r4, [pc, #144]	; (69d0 <_malloc_r+0xb8>)
    6940:	6823      	ldr	r3, [r4, #0]
    6942:	2b00      	cmp	r3, #0
    6944:	d103      	bne.n	694e <_malloc_r+0x36>
    6946:	0030      	movs	r0, r6
    6948:	f000 f8dc 	bl	6b04 <_sbrk_r>
    694c:	6020      	str	r0, [r4, #0]
    694e:	0029      	movs	r1, r5
    6950:	0030      	movs	r0, r6
    6952:	f000 f8d7 	bl	6b04 <_sbrk_r>
    6956:	1c43      	adds	r3, r0, #1
    6958:	d12c      	bne.n	69b4 <_malloc_r+0x9c>
    695a:	230c      	movs	r3, #12
    695c:	0030      	movs	r0, r6
    695e:	6033      	str	r3, [r6, #0]
    6960:	f000 fd19 	bl	7396 <__malloc_unlock>
    6964:	e003      	b.n	696e <_malloc_r+0x56>
    6966:	2d00      	cmp	r5, #0
    6968:	dadf      	bge.n	692a <_malloc_r+0x12>
    696a:	230c      	movs	r3, #12
    696c:	6033      	str	r3, [r6, #0]
    696e:	2000      	movs	r0, #0
    6970:	bd70      	pop	{r4, r5, r6, pc}
    6972:	680b      	ldr	r3, [r1, #0]
    6974:	1b5b      	subs	r3, r3, r5
    6976:	d41a      	bmi.n	69ae <_malloc_r+0x96>
    6978:	2b0b      	cmp	r3, #11
    697a:	d903      	bls.n	6984 <_malloc_r+0x6c>
    697c:	600b      	str	r3, [r1, #0]
    697e:	18cc      	adds	r4, r1, r3
    6980:	6025      	str	r5, [r4, #0]
    6982:	e003      	b.n	698c <_malloc_r+0x74>
    6984:	428c      	cmp	r4, r1
    6986:	d10e      	bne.n	69a6 <_malloc_r+0x8e>
    6988:	6863      	ldr	r3, [r4, #4]
    698a:	6013      	str	r3, [r2, #0]
    698c:	0030      	movs	r0, r6
    698e:	f000 fd02 	bl	7396 <__malloc_unlock>
    6992:	0020      	movs	r0, r4
    6994:	2207      	movs	r2, #7
    6996:	300b      	adds	r0, #11
    6998:	1d23      	adds	r3, r4, #4
    699a:	4390      	bics	r0, r2
    699c:	1ac3      	subs	r3, r0, r3
    699e:	d0e7      	beq.n	6970 <_malloc_r+0x58>
    69a0:	425a      	negs	r2, r3
    69a2:	50e2      	str	r2, [r4, r3]
    69a4:	e7e4      	b.n	6970 <_malloc_r+0x58>
    69a6:	684b      	ldr	r3, [r1, #4]
    69a8:	6063      	str	r3, [r4, #4]
    69aa:	000c      	movs	r4, r1
    69ac:	e7ee      	b.n	698c <_malloc_r+0x74>
    69ae:	000c      	movs	r4, r1
    69b0:	6849      	ldr	r1, [r1, #4]
    69b2:	e7c2      	b.n	693a <_malloc_r+0x22>
    69b4:	2303      	movs	r3, #3
    69b6:	1cc4      	adds	r4, r0, #3
    69b8:	439c      	bics	r4, r3
    69ba:	42a0      	cmp	r0, r4
    69bc:	d0e0      	beq.n	6980 <_malloc_r+0x68>
    69be:	1a21      	subs	r1, r4, r0
    69c0:	0030      	movs	r0, r6
    69c2:	f000 f89f 	bl	6b04 <_sbrk_r>
    69c6:	1c43      	adds	r3, r0, #1
    69c8:	d1da      	bne.n	6980 <_malloc_r+0x68>
    69ca:	e7c6      	b.n	695a <_malloc_r+0x42>
    69cc:	20000a58 	.word	0x20000a58
    69d0:	20000a5c 	.word	0x20000a5c

000069d4 <iprintf>:
    69d4:	b40f      	push	{r0, r1, r2, r3}
    69d6:	4b0b      	ldr	r3, [pc, #44]	; (6a04 <iprintf+0x30>)
    69d8:	b513      	push	{r0, r1, r4, lr}
    69da:	681c      	ldr	r4, [r3, #0]
    69dc:	2c00      	cmp	r4, #0
    69de:	d005      	beq.n	69ec <iprintf+0x18>
    69e0:	69a3      	ldr	r3, [r4, #24]
    69e2:	2b00      	cmp	r3, #0
    69e4:	d102      	bne.n	69ec <iprintf+0x18>
    69e6:	0020      	movs	r0, r4
    69e8:	f000 fbbe 	bl	7168 <__sinit>
    69ec:	ab05      	add	r3, sp, #20
    69ee:	9a04      	ldr	r2, [sp, #16]
    69f0:	68a1      	ldr	r1, [r4, #8]
    69f2:	0020      	movs	r0, r4
    69f4:	9301      	str	r3, [sp, #4]
    69f6:	f000 fe5d 	bl	76b4 <_vfiprintf_r>
    69fa:	bc16      	pop	{r1, r2, r4}
    69fc:	bc08      	pop	{r3}
    69fe:	b004      	add	sp, #16
    6a00:	4718      	bx	r3
    6a02:	46c0      	nop			; (mov r8, r8)
    6a04:	20000414 	.word	0x20000414

00006a08 <putchar>:
    6a08:	4b08      	ldr	r3, [pc, #32]	; (6a2c <putchar+0x24>)
    6a0a:	b570      	push	{r4, r5, r6, lr}
    6a0c:	681c      	ldr	r4, [r3, #0]
    6a0e:	0005      	movs	r5, r0
    6a10:	2c00      	cmp	r4, #0
    6a12:	d005      	beq.n	6a20 <putchar+0x18>
    6a14:	69a3      	ldr	r3, [r4, #24]
    6a16:	2b00      	cmp	r3, #0
    6a18:	d102      	bne.n	6a20 <putchar+0x18>
    6a1a:	0020      	movs	r0, r4
    6a1c:	f000 fba4 	bl	7168 <__sinit>
    6a20:	0029      	movs	r1, r5
    6a22:	68a2      	ldr	r2, [r4, #8]
    6a24:	0020      	movs	r0, r4
    6a26:	f001 f8e9 	bl	7bfc <_putc_r>
    6a2a:	bd70      	pop	{r4, r5, r6, pc}
    6a2c:	20000414 	.word	0x20000414

00006a30 <_puts_r>:
    6a30:	b570      	push	{r4, r5, r6, lr}
    6a32:	0005      	movs	r5, r0
    6a34:	000e      	movs	r6, r1
    6a36:	2800      	cmp	r0, #0
    6a38:	d004      	beq.n	6a44 <_puts_r+0x14>
    6a3a:	6983      	ldr	r3, [r0, #24]
    6a3c:	2b00      	cmp	r3, #0
    6a3e:	d101      	bne.n	6a44 <_puts_r+0x14>
    6a40:	f000 fb92 	bl	7168 <__sinit>
    6a44:	69ab      	ldr	r3, [r5, #24]
    6a46:	68ac      	ldr	r4, [r5, #8]
    6a48:	2b00      	cmp	r3, #0
    6a4a:	d102      	bne.n	6a52 <_puts_r+0x22>
    6a4c:	0028      	movs	r0, r5
    6a4e:	f000 fb8b 	bl	7168 <__sinit>
    6a52:	4b24      	ldr	r3, [pc, #144]	; (6ae4 <_puts_r+0xb4>)
    6a54:	429c      	cmp	r4, r3
    6a56:	d10f      	bne.n	6a78 <_puts_r+0x48>
    6a58:	686c      	ldr	r4, [r5, #4]
    6a5a:	89a3      	ldrh	r3, [r4, #12]
    6a5c:	071b      	lsls	r3, r3, #28
    6a5e:	d502      	bpl.n	6a66 <_puts_r+0x36>
    6a60:	6923      	ldr	r3, [r4, #16]
    6a62:	2b00      	cmp	r3, #0
    6a64:	d120      	bne.n	6aa8 <_puts_r+0x78>
    6a66:	0021      	movs	r1, r4
    6a68:	0028      	movs	r0, r5
    6a6a:	f000 f9fd 	bl	6e68 <__swsetup_r>
    6a6e:	2800      	cmp	r0, #0
    6a70:	d01a      	beq.n	6aa8 <_puts_r+0x78>
    6a72:	2001      	movs	r0, #1
    6a74:	4240      	negs	r0, r0
    6a76:	bd70      	pop	{r4, r5, r6, pc}
    6a78:	4b1b      	ldr	r3, [pc, #108]	; (6ae8 <_puts_r+0xb8>)
    6a7a:	429c      	cmp	r4, r3
    6a7c:	d101      	bne.n	6a82 <_puts_r+0x52>
    6a7e:	68ac      	ldr	r4, [r5, #8]
    6a80:	e7eb      	b.n	6a5a <_puts_r+0x2a>
    6a82:	4b1a      	ldr	r3, [pc, #104]	; (6aec <_puts_r+0xbc>)
    6a84:	429c      	cmp	r4, r3
    6a86:	d1e8      	bne.n	6a5a <_puts_r+0x2a>
    6a88:	68ec      	ldr	r4, [r5, #12]
    6a8a:	e7e6      	b.n	6a5a <_puts_r+0x2a>
    6a8c:	3b01      	subs	r3, #1
    6a8e:	3601      	adds	r6, #1
    6a90:	60a3      	str	r3, [r4, #8]
    6a92:	2b00      	cmp	r3, #0
    6a94:	da04      	bge.n	6aa0 <_puts_r+0x70>
    6a96:	69a2      	ldr	r2, [r4, #24]
    6a98:	4293      	cmp	r3, r2
    6a9a:	db16      	blt.n	6aca <_puts_r+0x9a>
    6a9c:	290a      	cmp	r1, #10
    6a9e:	d014      	beq.n	6aca <_puts_r+0x9a>
    6aa0:	6823      	ldr	r3, [r4, #0]
    6aa2:	1c5a      	adds	r2, r3, #1
    6aa4:	6022      	str	r2, [r4, #0]
    6aa6:	7019      	strb	r1, [r3, #0]
    6aa8:	7831      	ldrb	r1, [r6, #0]
    6aaa:	68a3      	ldr	r3, [r4, #8]
    6aac:	2900      	cmp	r1, #0
    6aae:	d1ed      	bne.n	6a8c <_puts_r+0x5c>
    6ab0:	3b01      	subs	r3, #1
    6ab2:	60a3      	str	r3, [r4, #8]
    6ab4:	2b00      	cmp	r3, #0
    6ab6:	da0f      	bge.n	6ad8 <_puts_r+0xa8>
    6ab8:	0022      	movs	r2, r4
    6aba:	310a      	adds	r1, #10
    6abc:	0028      	movs	r0, r5
    6abe:	f000 f969 	bl	6d94 <__swbuf_r>
    6ac2:	1c43      	adds	r3, r0, #1
    6ac4:	d0d5      	beq.n	6a72 <_puts_r+0x42>
    6ac6:	200a      	movs	r0, #10
    6ac8:	e7d5      	b.n	6a76 <_puts_r+0x46>
    6aca:	0022      	movs	r2, r4
    6acc:	0028      	movs	r0, r5
    6ace:	f000 f961 	bl	6d94 <__swbuf_r>
    6ad2:	1c43      	adds	r3, r0, #1
    6ad4:	d1e8      	bne.n	6aa8 <_puts_r+0x78>
    6ad6:	e7cc      	b.n	6a72 <_puts_r+0x42>
    6ad8:	200a      	movs	r0, #10
    6ada:	6823      	ldr	r3, [r4, #0]
    6adc:	1c5a      	adds	r2, r3, #1
    6ade:	6022      	str	r2, [r4, #0]
    6ae0:	7018      	strb	r0, [r3, #0]
    6ae2:	e7c8      	b.n	6a76 <_puts_r+0x46>
    6ae4:	00008e48 	.word	0x00008e48
    6ae8:	00008e68 	.word	0x00008e68
    6aec:	00008e28 	.word	0x00008e28

00006af0 <puts>:
    6af0:	b510      	push	{r4, lr}
    6af2:	4b03      	ldr	r3, [pc, #12]	; (6b00 <puts+0x10>)
    6af4:	0001      	movs	r1, r0
    6af6:	6818      	ldr	r0, [r3, #0]
    6af8:	f7ff ff9a 	bl	6a30 <_puts_r>
    6afc:	bd10      	pop	{r4, pc}
    6afe:	46c0      	nop			; (mov r8, r8)
    6b00:	20000414 	.word	0x20000414

00006b04 <_sbrk_r>:
    6b04:	2300      	movs	r3, #0
    6b06:	b570      	push	{r4, r5, r6, lr}
    6b08:	4c06      	ldr	r4, [pc, #24]	; (6b24 <_sbrk_r+0x20>)
    6b0a:	0005      	movs	r5, r0
    6b0c:	0008      	movs	r0, r1
    6b0e:	6023      	str	r3, [r4, #0]
    6b10:	f7fe f8d0 	bl	4cb4 <_sbrk>
    6b14:	1c43      	adds	r3, r0, #1
    6b16:	d103      	bne.n	6b20 <_sbrk_r+0x1c>
    6b18:	6823      	ldr	r3, [r4, #0]
    6b1a:	2b00      	cmp	r3, #0
    6b1c:	d000      	beq.n	6b20 <_sbrk_r+0x1c>
    6b1e:	602b      	str	r3, [r5, #0]
    6b20:	bd70      	pop	{r4, r5, r6, pc}
    6b22:	46c0      	nop			; (mov r8, r8)
    6b24:	20000d78 	.word	0x20000d78

00006b28 <setbuf>:
    6b28:	424a      	negs	r2, r1
    6b2a:	414a      	adcs	r2, r1
    6b2c:	2380      	movs	r3, #128	; 0x80
    6b2e:	b510      	push	{r4, lr}
    6b30:	0052      	lsls	r2, r2, #1
    6b32:	00db      	lsls	r3, r3, #3
    6b34:	f000 f802 	bl	6b3c <setvbuf>
    6b38:	bd10      	pop	{r4, pc}
	...

00006b3c <setvbuf>:
    6b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b3e:	001d      	movs	r5, r3
    6b40:	4b4f      	ldr	r3, [pc, #316]	; (6c80 <setvbuf+0x144>)
    6b42:	b085      	sub	sp, #20
    6b44:	681e      	ldr	r6, [r3, #0]
    6b46:	0004      	movs	r4, r0
    6b48:	000f      	movs	r7, r1
    6b4a:	9200      	str	r2, [sp, #0]
    6b4c:	2e00      	cmp	r6, #0
    6b4e:	d005      	beq.n	6b5c <setvbuf+0x20>
    6b50:	69b3      	ldr	r3, [r6, #24]
    6b52:	2b00      	cmp	r3, #0
    6b54:	d102      	bne.n	6b5c <setvbuf+0x20>
    6b56:	0030      	movs	r0, r6
    6b58:	f000 fb06 	bl	7168 <__sinit>
    6b5c:	4b49      	ldr	r3, [pc, #292]	; (6c84 <setvbuf+0x148>)
    6b5e:	429c      	cmp	r4, r3
    6b60:	d150      	bne.n	6c04 <setvbuf+0xc8>
    6b62:	6874      	ldr	r4, [r6, #4]
    6b64:	9b00      	ldr	r3, [sp, #0]
    6b66:	2b02      	cmp	r3, #2
    6b68:	d005      	beq.n	6b76 <setvbuf+0x3a>
    6b6a:	2b01      	cmp	r3, #1
    6b6c:	d900      	bls.n	6b70 <setvbuf+0x34>
    6b6e:	e084      	b.n	6c7a <setvbuf+0x13e>
    6b70:	2d00      	cmp	r5, #0
    6b72:	da00      	bge.n	6b76 <setvbuf+0x3a>
    6b74:	e081      	b.n	6c7a <setvbuf+0x13e>
    6b76:	0021      	movs	r1, r4
    6b78:	0030      	movs	r0, r6
    6b7a:	f000 fa87 	bl	708c <_fflush_r>
    6b7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6b80:	2900      	cmp	r1, #0
    6b82:	d008      	beq.n	6b96 <setvbuf+0x5a>
    6b84:	0023      	movs	r3, r4
    6b86:	3344      	adds	r3, #68	; 0x44
    6b88:	4299      	cmp	r1, r3
    6b8a:	d002      	beq.n	6b92 <setvbuf+0x56>
    6b8c:	0030      	movs	r0, r6
    6b8e:	f7ff fe79 	bl	6884 <_free_r>
    6b92:	2300      	movs	r3, #0
    6b94:	6363      	str	r3, [r4, #52]	; 0x34
    6b96:	2300      	movs	r3, #0
    6b98:	61a3      	str	r3, [r4, #24]
    6b9a:	6063      	str	r3, [r4, #4]
    6b9c:	89a3      	ldrh	r3, [r4, #12]
    6b9e:	061b      	lsls	r3, r3, #24
    6ba0:	d503      	bpl.n	6baa <setvbuf+0x6e>
    6ba2:	6921      	ldr	r1, [r4, #16]
    6ba4:	0030      	movs	r0, r6
    6ba6:	f7ff fe6d 	bl	6884 <_free_r>
    6baa:	89a3      	ldrh	r3, [r4, #12]
    6bac:	4a36      	ldr	r2, [pc, #216]	; (6c88 <setvbuf+0x14c>)
    6bae:	4013      	ands	r3, r2
    6bb0:	81a3      	strh	r3, [r4, #12]
    6bb2:	9b00      	ldr	r3, [sp, #0]
    6bb4:	2b02      	cmp	r3, #2
    6bb6:	d05a      	beq.n	6c6e <setvbuf+0x132>
    6bb8:	ab03      	add	r3, sp, #12
    6bba:	aa02      	add	r2, sp, #8
    6bbc:	0021      	movs	r1, r4
    6bbe:	0030      	movs	r0, r6
    6bc0:	f000 fb7c 	bl	72bc <__swhatbuf_r>
    6bc4:	89a3      	ldrh	r3, [r4, #12]
    6bc6:	4318      	orrs	r0, r3
    6bc8:	81a0      	strh	r0, [r4, #12]
    6bca:	2d00      	cmp	r5, #0
    6bcc:	d124      	bne.n	6c18 <setvbuf+0xdc>
    6bce:	9d02      	ldr	r5, [sp, #8]
    6bd0:	0028      	movs	r0, r5
    6bd2:	f7ff fe11 	bl	67f8 <malloc>
    6bd6:	9501      	str	r5, [sp, #4]
    6bd8:	1e07      	subs	r7, r0, #0
    6bda:	d142      	bne.n	6c62 <setvbuf+0x126>
    6bdc:	9b02      	ldr	r3, [sp, #8]
    6bde:	9301      	str	r3, [sp, #4]
    6be0:	42ab      	cmp	r3, r5
    6be2:	d139      	bne.n	6c58 <setvbuf+0x11c>
    6be4:	2001      	movs	r0, #1
    6be6:	4240      	negs	r0, r0
    6be8:	2302      	movs	r3, #2
    6bea:	89a2      	ldrh	r2, [r4, #12]
    6bec:	4313      	orrs	r3, r2
    6bee:	81a3      	strh	r3, [r4, #12]
    6bf0:	2300      	movs	r3, #0
    6bf2:	60a3      	str	r3, [r4, #8]
    6bf4:	0023      	movs	r3, r4
    6bf6:	3347      	adds	r3, #71	; 0x47
    6bf8:	6023      	str	r3, [r4, #0]
    6bfa:	6123      	str	r3, [r4, #16]
    6bfc:	2301      	movs	r3, #1
    6bfe:	6163      	str	r3, [r4, #20]
    6c00:	b005      	add	sp, #20
    6c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c04:	4b21      	ldr	r3, [pc, #132]	; (6c8c <setvbuf+0x150>)
    6c06:	429c      	cmp	r4, r3
    6c08:	d101      	bne.n	6c0e <setvbuf+0xd2>
    6c0a:	68b4      	ldr	r4, [r6, #8]
    6c0c:	e7aa      	b.n	6b64 <setvbuf+0x28>
    6c0e:	4b20      	ldr	r3, [pc, #128]	; (6c90 <setvbuf+0x154>)
    6c10:	429c      	cmp	r4, r3
    6c12:	d1a7      	bne.n	6b64 <setvbuf+0x28>
    6c14:	68f4      	ldr	r4, [r6, #12]
    6c16:	e7a5      	b.n	6b64 <setvbuf+0x28>
    6c18:	2f00      	cmp	r7, #0
    6c1a:	d0d9      	beq.n	6bd0 <setvbuf+0x94>
    6c1c:	69b3      	ldr	r3, [r6, #24]
    6c1e:	2b00      	cmp	r3, #0
    6c20:	d102      	bne.n	6c28 <setvbuf+0xec>
    6c22:	0030      	movs	r0, r6
    6c24:	f000 faa0 	bl	7168 <__sinit>
    6c28:	9b00      	ldr	r3, [sp, #0]
    6c2a:	2b01      	cmp	r3, #1
    6c2c:	d103      	bne.n	6c36 <setvbuf+0xfa>
    6c2e:	89a3      	ldrh	r3, [r4, #12]
    6c30:	9a00      	ldr	r2, [sp, #0]
    6c32:	431a      	orrs	r2, r3
    6c34:	81a2      	strh	r2, [r4, #12]
    6c36:	2008      	movs	r0, #8
    6c38:	89a3      	ldrh	r3, [r4, #12]
    6c3a:	6027      	str	r7, [r4, #0]
    6c3c:	6127      	str	r7, [r4, #16]
    6c3e:	6165      	str	r5, [r4, #20]
    6c40:	4018      	ands	r0, r3
    6c42:	d018      	beq.n	6c76 <setvbuf+0x13a>
    6c44:	2001      	movs	r0, #1
    6c46:	4018      	ands	r0, r3
    6c48:	2300      	movs	r3, #0
    6c4a:	4298      	cmp	r0, r3
    6c4c:	d011      	beq.n	6c72 <setvbuf+0x136>
    6c4e:	426d      	negs	r5, r5
    6c50:	60a3      	str	r3, [r4, #8]
    6c52:	61a5      	str	r5, [r4, #24]
    6c54:	0018      	movs	r0, r3
    6c56:	e7d3      	b.n	6c00 <setvbuf+0xc4>
    6c58:	9801      	ldr	r0, [sp, #4]
    6c5a:	f7ff fdcd 	bl	67f8 <malloc>
    6c5e:	1e07      	subs	r7, r0, #0
    6c60:	d0c0      	beq.n	6be4 <setvbuf+0xa8>
    6c62:	2380      	movs	r3, #128	; 0x80
    6c64:	89a2      	ldrh	r2, [r4, #12]
    6c66:	9d01      	ldr	r5, [sp, #4]
    6c68:	4313      	orrs	r3, r2
    6c6a:	81a3      	strh	r3, [r4, #12]
    6c6c:	e7d6      	b.n	6c1c <setvbuf+0xe0>
    6c6e:	2000      	movs	r0, #0
    6c70:	e7ba      	b.n	6be8 <setvbuf+0xac>
    6c72:	60a5      	str	r5, [r4, #8]
    6c74:	e7c4      	b.n	6c00 <setvbuf+0xc4>
    6c76:	60a0      	str	r0, [r4, #8]
    6c78:	e7c2      	b.n	6c00 <setvbuf+0xc4>
    6c7a:	2001      	movs	r0, #1
    6c7c:	4240      	negs	r0, r0
    6c7e:	e7bf      	b.n	6c00 <setvbuf+0xc4>
    6c80:	20000414 	.word	0x20000414
    6c84:	00008e48 	.word	0x00008e48
    6c88:	fffff35c 	.word	0xfffff35c
    6c8c:	00008e68 	.word	0x00008e68
    6c90:	00008e28 	.word	0x00008e28

00006c94 <siprintf>:
    6c94:	b40e      	push	{r1, r2, r3}
    6c96:	b510      	push	{r4, lr}
    6c98:	b09d      	sub	sp, #116	; 0x74
    6c9a:	a902      	add	r1, sp, #8
    6c9c:	9002      	str	r0, [sp, #8]
    6c9e:	6108      	str	r0, [r1, #16]
    6ca0:	480b      	ldr	r0, [pc, #44]	; (6cd0 <siprintf+0x3c>)
    6ca2:	2482      	movs	r4, #130	; 0x82
    6ca4:	6088      	str	r0, [r1, #8]
    6ca6:	6148      	str	r0, [r1, #20]
    6ca8:	2001      	movs	r0, #1
    6caa:	4240      	negs	r0, r0
    6cac:	ab1f      	add	r3, sp, #124	; 0x7c
    6cae:	81c8      	strh	r0, [r1, #14]
    6cb0:	4808      	ldr	r0, [pc, #32]	; (6cd4 <siprintf+0x40>)
    6cb2:	cb04      	ldmia	r3!, {r2}
    6cb4:	00a4      	lsls	r4, r4, #2
    6cb6:	6800      	ldr	r0, [r0, #0]
    6cb8:	9301      	str	r3, [sp, #4]
    6cba:	818c      	strh	r4, [r1, #12]
    6cbc:	f000 fbce 	bl	745c <_svfiprintf_r>
    6cc0:	2300      	movs	r3, #0
    6cc2:	9a02      	ldr	r2, [sp, #8]
    6cc4:	7013      	strb	r3, [r2, #0]
    6cc6:	b01d      	add	sp, #116	; 0x74
    6cc8:	bc10      	pop	{r4}
    6cca:	bc08      	pop	{r3}
    6ccc:	b003      	add	sp, #12
    6cce:	4718      	bx	r3
    6cd0:	7fffffff 	.word	0x7fffffff
    6cd4:	20000414 	.word	0x20000414

00006cd8 <__sread>:
    6cd8:	b570      	push	{r4, r5, r6, lr}
    6cda:	000c      	movs	r4, r1
    6cdc:	250e      	movs	r5, #14
    6cde:	5f49      	ldrsh	r1, [r1, r5]
    6ce0:	f000 ffc2 	bl	7c68 <_read_r>
    6ce4:	2800      	cmp	r0, #0
    6ce6:	db03      	blt.n	6cf0 <__sread+0x18>
    6ce8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6cea:	181b      	adds	r3, r3, r0
    6cec:	6563      	str	r3, [r4, #84]	; 0x54
    6cee:	bd70      	pop	{r4, r5, r6, pc}
    6cf0:	89a3      	ldrh	r3, [r4, #12]
    6cf2:	4a02      	ldr	r2, [pc, #8]	; (6cfc <__sread+0x24>)
    6cf4:	4013      	ands	r3, r2
    6cf6:	81a3      	strh	r3, [r4, #12]
    6cf8:	e7f9      	b.n	6cee <__sread+0x16>
    6cfa:	46c0      	nop			; (mov r8, r8)
    6cfc:	ffffefff 	.word	0xffffefff

00006d00 <__swrite>:
    6d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d02:	001f      	movs	r7, r3
    6d04:	898b      	ldrh	r3, [r1, #12]
    6d06:	0005      	movs	r5, r0
    6d08:	000c      	movs	r4, r1
    6d0a:	0016      	movs	r6, r2
    6d0c:	05db      	lsls	r3, r3, #23
    6d0e:	d505      	bpl.n	6d1c <__swrite+0x1c>
    6d10:	230e      	movs	r3, #14
    6d12:	5ec9      	ldrsh	r1, [r1, r3]
    6d14:	2200      	movs	r2, #0
    6d16:	2302      	movs	r3, #2
    6d18:	f000 fabc 	bl	7294 <_lseek_r>
    6d1c:	89a3      	ldrh	r3, [r4, #12]
    6d1e:	4a05      	ldr	r2, [pc, #20]	; (6d34 <__swrite+0x34>)
    6d20:	0028      	movs	r0, r5
    6d22:	4013      	ands	r3, r2
    6d24:	81a3      	strh	r3, [r4, #12]
    6d26:	0032      	movs	r2, r6
    6d28:	230e      	movs	r3, #14
    6d2a:	5ee1      	ldrsh	r1, [r4, r3]
    6d2c:	003b      	movs	r3, r7
    6d2e:	f000 f887 	bl	6e40 <_write_r>
    6d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d34:	ffffefff 	.word	0xffffefff

00006d38 <__sseek>:
    6d38:	b570      	push	{r4, r5, r6, lr}
    6d3a:	000c      	movs	r4, r1
    6d3c:	250e      	movs	r5, #14
    6d3e:	5f49      	ldrsh	r1, [r1, r5]
    6d40:	f000 faa8 	bl	7294 <_lseek_r>
    6d44:	89a3      	ldrh	r3, [r4, #12]
    6d46:	1c42      	adds	r2, r0, #1
    6d48:	d103      	bne.n	6d52 <__sseek+0x1a>
    6d4a:	4a05      	ldr	r2, [pc, #20]	; (6d60 <__sseek+0x28>)
    6d4c:	4013      	ands	r3, r2
    6d4e:	81a3      	strh	r3, [r4, #12]
    6d50:	bd70      	pop	{r4, r5, r6, pc}
    6d52:	2280      	movs	r2, #128	; 0x80
    6d54:	0152      	lsls	r2, r2, #5
    6d56:	4313      	orrs	r3, r2
    6d58:	81a3      	strh	r3, [r4, #12]
    6d5a:	6560      	str	r0, [r4, #84]	; 0x54
    6d5c:	e7f8      	b.n	6d50 <__sseek+0x18>
    6d5e:	46c0      	nop			; (mov r8, r8)
    6d60:	ffffefff 	.word	0xffffefff

00006d64 <__sclose>:
    6d64:	b510      	push	{r4, lr}
    6d66:	230e      	movs	r3, #14
    6d68:	5ec9      	ldrsh	r1, [r1, r3]
    6d6a:	f000 f8f3 	bl	6f54 <_close_r>
    6d6e:	bd10      	pop	{r4, pc}

00006d70 <strcmp>:
    6d70:	7802      	ldrb	r2, [r0, #0]
    6d72:	780b      	ldrb	r3, [r1, #0]
    6d74:	2a00      	cmp	r2, #0
    6d76:	d003      	beq.n	6d80 <strcmp+0x10>
    6d78:	3001      	adds	r0, #1
    6d7a:	3101      	adds	r1, #1
    6d7c:	429a      	cmp	r2, r3
    6d7e:	d0f7      	beq.n	6d70 <strcmp>
    6d80:	1ad0      	subs	r0, r2, r3
    6d82:	4770      	bx	lr

00006d84 <strlen>:
    6d84:	2300      	movs	r3, #0
    6d86:	5cc2      	ldrb	r2, [r0, r3]
    6d88:	3301      	adds	r3, #1
    6d8a:	2a00      	cmp	r2, #0
    6d8c:	d1fb      	bne.n	6d86 <strlen+0x2>
    6d8e:	1e58      	subs	r0, r3, #1
    6d90:	4770      	bx	lr
	...

00006d94 <__swbuf_r>:
    6d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d96:	0005      	movs	r5, r0
    6d98:	000e      	movs	r6, r1
    6d9a:	0014      	movs	r4, r2
    6d9c:	2800      	cmp	r0, #0
    6d9e:	d004      	beq.n	6daa <__swbuf_r+0x16>
    6da0:	6983      	ldr	r3, [r0, #24]
    6da2:	2b00      	cmp	r3, #0
    6da4:	d101      	bne.n	6daa <__swbuf_r+0x16>
    6da6:	f000 f9df 	bl	7168 <__sinit>
    6daa:	4b22      	ldr	r3, [pc, #136]	; (6e34 <__swbuf_r+0xa0>)
    6dac:	429c      	cmp	r4, r3
    6dae:	d12d      	bne.n	6e0c <__swbuf_r+0x78>
    6db0:	686c      	ldr	r4, [r5, #4]
    6db2:	69a3      	ldr	r3, [r4, #24]
    6db4:	60a3      	str	r3, [r4, #8]
    6db6:	89a3      	ldrh	r3, [r4, #12]
    6db8:	071b      	lsls	r3, r3, #28
    6dba:	d531      	bpl.n	6e20 <__swbuf_r+0x8c>
    6dbc:	6923      	ldr	r3, [r4, #16]
    6dbe:	2b00      	cmp	r3, #0
    6dc0:	d02e      	beq.n	6e20 <__swbuf_r+0x8c>
    6dc2:	6823      	ldr	r3, [r4, #0]
    6dc4:	6922      	ldr	r2, [r4, #16]
    6dc6:	b2f7      	uxtb	r7, r6
    6dc8:	1a98      	subs	r0, r3, r2
    6dca:	6963      	ldr	r3, [r4, #20]
    6dcc:	b2f6      	uxtb	r6, r6
    6dce:	4298      	cmp	r0, r3
    6dd0:	db05      	blt.n	6dde <__swbuf_r+0x4a>
    6dd2:	0021      	movs	r1, r4
    6dd4:	0028      	movs	r0, r5
    6dd6:	f000 f959 	bl	708c <_fflush_r>
    6dda:	2800      	cmp	r0, #0
    6ddc:	d126      	bne.n	6e2c <__swbuf_r+0x98>
    6dde:	68a3      	ldr	r3, [r4, #8]
    6de0:	3001      	adds	r0, #1
    6de2:	3b01      	subs	r3, #1
    6de4:	60a3      	str	r3, [r4, #8]
    6de6:	6823      	ldr	r3, [r4, #0]
    6de8:	1c5a      	adds	r2, r3, #1
    6dea:	6022      	str	r2, [r4, #0]
    6dec:	701f      	strb	r7, [r3, #0]
    6dee:	6963      	ldr	r3, [r4, #20]
    6df0:	4298      	cmp	r0, r3
    6df2:	d004      	beq.n	6dfe <__swbuf_r+0x6a>
    6df4:	89a3      	ldrh	r3, [r4, #12]
    6df6:	07db      	lsls	r3, r3, #31
    6df8:	d51a      	bpl.n	6e30 <__swbuf_r+0x9c>
    6dfa:	2e0a      	cmp	r6, #10
    6dfc:	d118      	bne.n	6e30 <__swbuf_r+0x9c>
    6dfe:	0021      	movs	r1, r4
    6e00:	0028      	movs	r0, r5
    6e02:	f000 f943 	bl	708c <_fflush_r>
    6e06:	2800      	cmp	r0, #0
    6e08:	d012      	beq.n	6e30 <__swbuf_r+0x9c>
    6e0a:	e00f      	b.n	6e2c <__swbuf_r+0x98>
    6e0c:	4b0a      	ldr	r3, [pc, #40]	; (6e38 <__swbuf_r+0xa4>)
    6e0e:	429c      	cmp	r4, r3
    6e10:	d101      	bne.n	6e16 <__swbuf_r+0x82>
    6e12:	68ac      	ldr	r4, [r5, #8]
    6e14:	e7cd      	b.n	6db2 <__swbuf_r+0x1e>
    6e16:	4b09      	ldr	r3, [pc, #36]	; (6e3c <__swbuf_r+0xa8>)
    6e18:	429c      	cmp	r4, r3
    6e1a:	d1ca      	bne.n	6db2 <__swbuf_r+0x1e>
    6e1c:	68ec      	ldr	r4, [r5, #12]
    6e1e:	e7c8      	b.n	6db2 <__swbuf_r+0x1e>
    6e20:	0021      	movs	r1, r4
    6e22:	0028      	movs	r0, r5
    6e24:	f000 f820 	bl	6e68 <__swsetup_r>
    6e28:	2800      	cmp	r0, #0
    6e2a:	d0ca      	beq.n	6dc2 <__swbuf_r+0x2e>
    6e2c:	2601      	movs	r6, #1
    6e2e:	4276      	negs	r6, r6
    6e30:	0030      	movs	r0, r6
    6e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e34:	00008e48 	.word	0x00008e48
    6e38:	00008e68 	.word	0x00008e68
    6e3c:	00008e28 	.word	0x00008e28

00006e40 <_write_r>:
    6e40:	b570      	push	{r4, r5, r6, lr}
    6e42:	0005      	movs	r5, r0
    6e44:	0008      	movs	r0, r1
    6e46:	0011      	movs	r1, r2
    6e48:	2200      	movs	r2, #0
    6e4a:	4c06      	ldr	r4, [pc, #24]	; (6e64 <_write_r+0x24>)
    6e4c:	6022      	str	r2, [r4, #0]
    6e4e:	001a      	movs	r2, r3
    6e50:	f7fd ff08 	bl	4c64 <_write>
    6e54:	1c43      	adds	r3, r0, #1
    6e56:	d103      	bne.n	6e60 <_write_r+0x20>
    6e58:	6823      	ldr	r3, [r4, #0]
    6e5a:	2b00      	cmp	r3, #0
    6e5c:	d000      	beq.n	6e60 <_write_r+0x20>
    6e5e:	602b      	str	r3, [r5, #0]
    6e60:	bd70      	pop	{r4, r5, r6, pc}
    6e62:	46c0      	nop			; (mov r8, r8)
    6e64:	20000d78 	.word	0x20000d78

00006e68 <__swsetup_r>:
    6e68:	4b36      	ldr	r3, [pc, #216]	; (6f44 <__swsetup_r+0xdc>)
    6e6a:	b570      	push	{r4, r5, r6, lr}
    6e6c:	681d      	ldr	r5, [r3, #0]
    6e6e:	0006      	movs	r6, r0
    6e70:	000c      	movs	r4, r1
    6e72:	2d00      	cmp	r5, #0
    6e74:	d005      	beq.n	6e82 <__swsetup_r+0x1a>
    6e76:	69ab      	ldr	r3, [r5, #24]
    6e78:	2b00      	cmp	r3, #0
    6e7a:	d102      	bne.n	6e82 <__swsetup_r+0x1a>
    6e7c:	0028      	movs	r0, r5
    6e7e:	f000 f973 	bl	7168 <__sinit>
    6e82:	4b31      	ldr	r3, [pc, #196]	; (6f48 <__swsetup_r+0xe0>)
    6e84:	429c      	cmp	r4, r3
    6e86:	d10f      	bne.n	6ea8 <__swsetup_r+0x40>
    6e88:	686c      	ldr	r4, [r5, #4]
    6e8a:	230c      	movs	r3, #12
    6e8c:	5ee2      	ldrsh	r2, [r4, r3]
    6e8e:	b293      	uxth	r3, r2
    6e90:	0719      	lsls	r1, r3, #28
    6e92:	d42d      	bmi.n	6ef0 <__swsetup_r+0x88>
    6e94:	06d9      	lsls	r1, r3, #27
    6e96:	d411      	bmi.n	6ebc <__swsetup_r+0x54>
    6e98:	2309      	movs	r3, #9
    6e9a:	2001      	movs	r0, #1
    6e9c:	6033      	str	r3, [r6, #0]
    6e9e:	3337      	adds	r3, #55	; 0x37
    6ea0:	4313      	orrs	r3, r2
    6ea2:	81a3      	strh	r3, [r4, #12]
    6ea4:	4240      	negs	r0, r0
    6ea6:	bd70      	pop	{r4, r5, r6, pc}
    6ea8:	4b28      	ldr	r3, [pc, #160]	; (6f4c <__swsetup_r+0xe4>)
    6eaa:	429c      	cmp	r4, r3
    6eac:	d101      	bne.n	6eb2 <__swsetup_r+0x4a>
    6eae:	68ac      	ldr	r4, [r5, #8]
    6eb0:	e7eb      	b.n	6e8a <__swsetup_r+0x22>
    6eb2:	4b27      	ldr	r3, [pc, #156]	; (6f50 <__swsetup_r+0xe8>)
    6eb4:	429c      	cmp	r4, r3
    6eb6:	d1e8      	bne.n	6e8a <__swsetup_r+0x22>
    6eb8:	68ec      	ldr	r4, [r5, #12]
    6eba:	e7e6      	b.n	6e8a <__swsetup_r+0x22>
    6ebc:	075b      	lsls	r3, r3, #29
    6ebe:	d513      	bpl.n	6ee8 <__swsetup_r+0x80>
    6ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6ec2:	2900      	cmp	r1, #0
    6ec4:	d008      	beq.n	6ed8 <__swsetup_r+0x70>
    6ec6:	0023      	movs	r3, r4
    6ec8:	3344      	adds	r3, #68	; 0x44
    6eca:	4299      	cmp	r1, r3
    6ecc:	d002      	beq.n	6ed4 <__swsetup_r+0x6c>
    6ece:	0030      	movs	r0, r6
    6ed0:	f7ff fcd8 	bl	6884 <_free_r>
    6ed4:	2300      	movs	r3, #0
    6ed6:	6363      	str	r3, [r4, #52]	; 0x34
    6ed8:	2224      	movs	r2, #36	; 0x24
    6eda:	89a3      	ldrh	r3, [r4, #12]
    6edc:	4393      	bics	r3, r2
    6ede:	81a3      	strh	r3, [r4, #12]
    6ee0:	2300      	movs	r3, #0
    6ee2:	6063      	str	r3, [r4, #4]
    6ee4:	6923      	ldr	r3, [r4, #16]
    6ee6:	6023      	str	r3, [r4, #0]
    6ee8:	2308      	movs	r3, #8
    6eea:	89a2      	ldrh	r2, [r4, #12]
    6eec:	4313      	orrs	r3, r2
    6eee:	81a3      	strh	r3, [r4, #12]
    6ef0:	6923      	ldr	r3, [r4, #16]
    6ef2:	2b00      	cmp	r3, #0
    6ef4:	d10b      	bne.n	6f0e <__swsetup_r+0xa6>
    6ef6:	21a0      	movs	r1, #160	; 0xa0
    6ef8:	2280      	movs	r2, #128	; 0x80
    6efa:	89a3      	ldrh	r3, [r4, #12]
    6efc:	0089      	lsls	r1, r1, #2
    6efe:	0092      	lsls	r2, r2, #2
    6f00:	400b      	ands	r3, r1
    6f02:	4293      	cmp	r3, r2
    6f04:	d003      	beq.n	6f0e <__swsetup_r+0xa6>
    6f06:	0021      	movs	r1, r4
    6f08:	0030      	movs	r0, r6
    6f0a:	f000 f9ff 	bl	730c <__smakebuf_r>
    6f0e:	2301      	movs	r3, #1
    6f10:	89a2      	ldrh	r2, [r4, #12]
    6f12:	4013      	ands	r3, r2
    6f14:	d011      	beq.n	6f3a <__swsetup_r+0xd2>
    6f16:	2300      	movs	r3, #0
    6f18:	60a3      	str	r3, [r4, #8]
    6f1a:	6963      	ldr	r3, [r4, #20]
    6f1c:	425b      	negs	r3, r3
    6f1e:	61a3      	str	r3, [r4, #24]
    6f20:	2000      	movs	r0, #0
    6f22:	6923      	ldr	r3, [r4, #16]
    6f24:	4283      	cmp	r3, r0
    6f26:	d1be      	bne.n	6ea6 <__swsetup_r+0x3e>
    6f28:	230c      	movs	r3, #12
    6f2a:	5ee2      	ldrsh	r2, [r4, r3]
    6f2c:	0613      	lsls	r3, r2, #24
    6f2e:	d5ba      	bpl.n	6ea6 <__swsetup_r+0x3e>
    6f30:	2340      	movs	r3, #64	; 0x40
    6f32:	4313      	orrs	r3, r2
    6f34:	81a3      	strh	r3, [r4, #12]
    6f36:	3801      	subs	r0, #1
    6f38:	e7b5      	b.n	6ea6 <__swsetup_r+0x3e>
    6f3a:	0792      	lsls	r2, r2, #30
    6f3c:	d400      	bmi.n	6f40 <__swsetup_r+0xd8>
    6f3e:	6963      	ldr	r3, [r4, #20]
    6f40:	60a3      	str	r3, [r4, #8]
    6f42:	e7ed      	b.n	6f20 <__swsetup_r+0xb8>
    6f44:	20000414 	.word	0x20000414
    6f48:	00008e48 	.word	0x00008e48
    6f4c:	00008e68 	.word	0x00008e68
    6f50:	00008e28 	.word	0x00008e28

00006f54 <_close_r>:
    6f54:	2300      	movs	r3, #0
    6f56:	b570      	push	{r4, r5, r6, lr}
    6f58:	4c06      	ldr	r4, [pc, #24]	; (6f74 <_close_r+0x20>)
    6f5a:	0005      	movs	r5, r0
    6f5c:	0008      	movs	r0, r1
    6f5e:	6023      	str	r3, [r4, #0]
    6f60:	f7fd feba 	bl	4cd8 <_close>
    6f64:	1c43      	adds	r3, r0, #1
    6f66:	d103      	bne.n	6f70 <_close_r+0x1c>
    6f68:	6823      	ldr	r3, [r4, #0]
    6f6a:	2b00      	cmp	r3, #0
    6f6c:	d000      	beq.n	6f70 <_close_r+0x1c>
    6f6e:	602b      	str	r3, [r5, #0]
    6f70:	bd70      	pop	{r4, r5, r6, pc}
    6f72:	46c0      	nop			; (mov r8, r8)
    6f74:	20000d78 	.word	0x20000d78

00006f78 <__sflush_r>:
    6f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6f7a:	898a      	ldrh	r2, [r1, #12]
    6f7c:	0005      	movs	r5, r0
    6f7e:	000c      	movs	r4, r1
    6f80:	0713      	lsls	r3, r2, #28
    6f82:	d460      	bmi.n	7046 <__sflush_r+0xce>
    6f84:	684b      	ldr	r3, [r1, #4]
    6f86:	2b00      	cmp	r3, #0
    6f88:	dc04      	bgt.n	6f94 <__sflush_r+0x1c>
    6f8a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6f8c:	2b00      	cmp	r3, #0
    6f8e:	dc01      	bgt.n	6f94 <__sflush_r+0x1c>
    6f90:	2000      	movs	r0, #0
    6f92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6f94:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6f96:	2f00      	cmp	r7, #0
    6f98:	d0fa      	beq.n	6f90 <__sflush_r+0x18>
    6f9a:	2300      	movs	r3, #0
    6f9c:	682e      	ldr	r6, [r5, #0]
    6f9e:	602b      	str	r3, [r5, #0]
    6fa0:	2380      	movs	r3, #128	; 0x80
    6fa2:	015b      	lsls	r3, r3, #5
    6fa4:	401a      	ands	r2, r3
    6fa6:	d034      	beq.n	7012 <__sflush_r+0x9a>
    6fa8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    6faa:	89a3      	ldrh	r3, [r4, #12]
    6fac:	075b      	lsls	r3, r3, #29
    6fae:	d506      	bpl.n	6fbe <__sflush_r+0x46>
    6fb0:	6863      	ldr	r3, [r4, #4]
    6fb2:	1ac0      	subs	r0, r0, r3
    6fb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6fb6:	2b00      	cmp	r3, #0
    6fb8:	d001      	beq.n	6fbe <__sflush_r+0x46>
    6fba:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6fbc:	1ac0      	subs	r0, r0, r3
    6fbe:	0002      	movs	r2, r0
    6fc0:	6a21      	ldr	r1, [r4, #32]
    6fc2:	2300      	movs	r3, #0
    6fc4:	0028      	movs	r0, r5
    6fc6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6fc8:	47b8      	blx	r7
    6fca:	89a1      	ldrh	r1, [r4, #12]
    6fcc:	1c43      	adds	r3, r0, #1
    6fce:	d106      	bne.n	6fde <__sflush_r+0x66>
    6fd0:	682b      	ldr	r3, [r5, #0]
    6fd2:	2b1d      	cmp	r3, #29
    6fd4:	d831      	bhi.n	703a <__sflush_r+0xc2>
    6fd6:	4a2c      	ldr	r2, [pc, #176]	; (7088 <__sflush_r+0x110>)
    6fd8:	40da      	lsrs	r2, r3
    6fda:	07d3      	lsls	r3, r2, #31
    6fdc:	d52d      	bpl.n	703a <__sflush_r+0xc2>
    6fde:	2300      	movs	r3, #0
    6fe0:	6063      	str	r3, [r4, #4]
    6fe2:	6923      	ldr	r3, [r4, #16]
    6fe4:	6023      	str	r3, [r4, #0]
    6fe6:	04cb      	lsls	r3, r1, #19
    6fe8:	d505      	bpl.n	6ff6 <__sflush_r+0x7e>
    6fea:	1c43      	adds	r3, r0, #1
    6fec:	d102      	bne.n	6ff4 <__sflush_r+0x7c>
    6fee:	682b      	ldr	r3, [r5, #0]
    6ff0:	2b00      	cmp	r3, #0
    6ff2:	d100      	bne.n	6ff6 <__sflush_r+0x7e>
    6ff4:	6560      	str	r0, [r4, #84]	; 0x54
    6ff6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6ff8:	602e      	str	r6, [r5, #0]
    6ffa:	2900      	cmp	r1, #0
    6ffc:	d0c8      	beq.n	6f90 <__sflush_r+0x18>
    6ffe:	0023      	movs	r3, r4
    7000:	3344      	adds	r3, #68	; 0x44
    7002:	4299      	cmp	r1, r3
    7004:	d002      	beq.n	700c <__sflush_r+0x94>
    7006:	0028      	movs	r0, r5
    7008:	f7ff fc3c 	bl	6884 <_free_r>
    700c:	2000      	movs	r0, #0
    700e:	6360      	str	r0, [r4, #52]	; 0x34
    7010:	e7bf      	b.n	6f92 <__sflush_r+0x1a>
    7012:	2301      	movs	r3, #1
    7014:	6a21      	ldr	r1, [r4, #32]
    7016:	0028      	movs	r0, r5
    7018:	47b8      	blx	r7
    701a:	1c43      	adds	r3, r0, #1
    701c:	d1c5      	bne.n	6faa <__sflush_r+0x32>
    701e:	682b      	ldr	r3, [r5, #0]
    7020:	2b00      	cmp	r3, #0
    7022:	d0c2      	beq.n	6faa <__sflush_r+0x32>
    7024:	2b1d      	cmp	r3, #29
    7026:	d001      	beq.n	702c <__sflush_r+0xb4>
    7028:	2b16      	cmp	r3, #22
    702a:	d101      	bne.n	7030 <__sflush_r+0xb8>
    702c:	602e      	str	r6, [r5, #0]
    702e:	e7af      	b.n	6f90 <__sflush_r+0x18>
    7030:	2340      	movs	r3, #64	; 0x40
    7032:	89a2      	ldrh	r2, [r4, #12]
    7034:	4313      	orrs	r3, r2
    7036:	81a3      	strh	r3, [r4, #12]
    7038:	e7ab      	b.n	6f92 <__sflush_r+0x1a>
    703a:	2340      	movs	r3, #64	; 0x40
    703c:	430b      	orrs	r3, r1
    703e:	2001      	movs	r0, #1
    7040:	81a3      	strh	r3, [r4, #12]
    7042:	4240      	negs	r0, r0
    7044:	e7a5      	b.n	6f92 <__sflush_r+0x1a>
    7046:	690f      	ldr	r7, [r1, #16]
    7048:	2f00      	cmp	r7, #0
    704a:	d0a1      	beq.n	6f90 <__sflush_r+0x18>
    704c:	680b      	ldr	r3, [r1, #0]
    704e:	600f      	str	r7, [r1, #0]
    7050:	1bdb      	subs	r3, r3, r7
    7052:	9301      	str	r3, [sp, #4]
    7054:	2300      	movs	r3, #0
    7056:	0792      	lsls	r2, r2, #30
    7058:	d100      	bne.n	705c <__sflush_r+0xe4>
    705a:	694b      	ldr	r3, [r1, #20]
    705c:	60a3      	str	r3, [r4, #8]
    705e:	9b01      	ldr	r3, [sp, #4]
    7060:	2b00      	cmp	r3, #0
    7062:	dc00      	bgt.n	7066 <__sflush_r+0xee>
    7064:	e794      	b.n	6f90 <__sflush_r+0x18>
    7066:	9b01      	ldr	r3, [sp, #4]
    7068:	003a      	movs	r2, r7
    706a:	6a21      	ldr	r1, [r4, #32]
    706c:	0028      	movs	r0, r5
    706e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    7070:	47b0      	blx	r6
    7072:	2800      	cmp	r0, #0
    7074:	dc03      	bgt.n	707e <__sflush_r+0x106>
    7076:	2340      	movs	r3, #64	; 0x40
    7078:	89a2      	ldrh	r2, [r4, #12]
    707a:	4313      	orrs	r3, r2
    707c:	e7df      	b.n	703e <__sflush_r+0xc6>
    707e:	9b01      	ldr	r3, [sp, #4]
    7080:	183f      	adds	r7, r7, r0
    7082:	1a1b      	subs	r3, r3, r0
    7084:	9301      	str	r3, [sp, #4]
    7086:	e7ea      	b.n	705e <__sflush_r+0xe6>
    7088:	20400001 	.word	0x20400001

0000708c <_fflush_r>:
    708c:	690b      	ldr	r3, [r1, #16]
    708e:	b570      	push	{r4, r5, r6, lr}
    7090:	0005      	movs	r5, r0
    7092:	000c      	movs	r4, r1
    7094:	2b00      	cmp	r3, #0
    7096:	d101      	bne.n	709c <_fflush_r+0x10>
    7098:	2000      	movs	r0, #0
    709a:	bd70      	pop	{r4, r5, r6, pc}
    709c:	2800      	cmp	r0, #0
    709e:	d004      	beq.n	70aa <_fflush_r+0x1e>
    70a0:	6983      	ldr	r3, [r0, #24]
    70a2:	2b00      	cmp	r3, #0
    70a4:	d101      	bne.n	70aa <_fflush_r+0x1e>
    70a6:	f000 f85f 	bl	7168 <__sinit>
    70aa:	4b0b      	ldr	r3, [pc, #44]	; (70d8 <_fflush_r+0x4c>)
    70ac:	429c      	cmp	r4, r3
    70ae:	d109      	bne.n	70c4 <_fflush_r+0x38>
    70b0:	686c      	ldr	r4, [r5, #4]
    70b2:	220c      	movs	r2, #12
    70b4:	5ea3      	ldrsh	r3, [r4, r2]
    70b6:	2b00      	cmp	r3, #0
    70b8:	d0ee      	beq.n	7098 <_fflush_r+0xc>
    70ba:	0021      	movs	r1, r4
    70bc:	0028      	movs	r0, r5
    70be:	f7ff ff5b 	bl	6f78 <__sflush_r>
    70c2:	e7ea      	b.n	709a <_fflush_r+0xe>
    70c4:	4b05      	ldr	r3, [pc, #20]	; (70dc <_fflush_r+0x50>)
    70c6:	429c      	cmp	r4, r3
    70c8:	d101      	bne.n	70ce <_fflush_r+0x42>
    70ca:	68ac      	ldr	r4, [r5, #8]
    70cc:	e7f1      	b.n	70b2 <_fflush_r+0x26>
    70ce:	4b04      	ldr	r3, [pc, #16]	; (70e0 <_fflush_r+0x54>)
    70d0:	429c      	cmp	r4, r3
    70d2:	d1ee      	bne.n	70b2 <_fflush_r+0x26>
    70d4:	68ec      	ldr	r4, [r5, #12]
    70d6:	e7ec      	b.n	70b2 <_fflush_r+0x26>
    70d8:	00008e48 	.word	0x00008e48
    70dc:	00008e68 	.word	0x00008e68
    70e0:	00008e28 	.word	0x00008e28

000070e4 <_cleanup_r>:
    70e4:	b510      	push	{r4, lr}
    70e6:	4902      	ldr	r1, [pc, #8]	; (70f0 <_cleanup_r+0xc>)
    70e8:	f000 f8b2 	bl	7250 <_fwalk_reent>
    70ec:	bd10      	pop	{r4, pc}
    70ee:	46c0      	nop			; (mov r8, r8)
    70f0:	0000708d 	.word	0x0000708d

000070f4 <std.isra.0>:
    70f4:	2300      	movs	r3, #0
    70f6:	b510      	push	{r4, lr}
    70f8:	0004      	movs	r4, r0
    70fa:	6003      	str	r3, [r0, #0]
    70fc:	6043      	str	r3, [r0, #4]
    70fe:	6083      	str	r3, [r0, #8]
    7100:	8181      	strh	r1, [r0, #12]
    7102:	6643      	str	r3, [r0, #100]	; 0x64
    7104:	81c2      	strh	r2, [r0, #14]
    7106:	6103      	str	r3, [r0, #16]
    7108:	6143      	str	r3, [r0, #20]
    710a:	6183      	str	r3, [r0, #24]
    710c:	0019      	movs	r1, r3
    710e:	2208      	movs	r2, #8
    7110:	305c      	adds	r0, #92	; 0x5c
    7112:	f7ff fbaf 	bl	6874 <memset>
    7116:	4b05      	ldr	r3, [pc, #20]	; (712c <std.isra.0+0x38>)
    7118:	6224      	str	r4, [r4, #32]
    711a:	6263      	str	r3, [r4, #36]	; 0x24
    711c:	4b04      	ldr	r3, [pc, #16]	; (7130 <std.isra.0+0x3c>)
    711e:	62a3      	str	r3, [r4, #40]	; 0x28
    7120:	4b04      	ldr	r3, [pc, #16]	; (7134 <std.isra.0+0x40>)
    7122:	62e3      	str	r3, [r4, #44]	; 0x2c
    7124:	4b04      	ldr	r3, [pc, #16]	; (7138 <std.isra.0+0x44>)
    7126:	6323      	str	r3, [r4, #48]	; 0x30
    7128:	bd10      	pop	{r4, pc}
    712a:	46c0      	nop			; (mov r8, r8)
    712c:	00006cd9 	.word	0x00006cd9
    7130:	00006d01 	.word	0x00006d01
    7134:	00006d39 	.word	0x00006d39
    7138:	00006d65 	.word	0x00006d65

0000713c <__sfmoreglue>:
    713c:	b570      	push	{r4, r5, r6, lr}
    713e:	2568      	movs	r5, #104	; 0x68
    7140:	1e4a      	subs	r2, r1, #1
    7142:	4355      	muls	r5, r2
    7144:	000e      	movs	r6, r1
    7146:	0029      	movs	r1, r5
    7148:	3174      	adds	r1, #116	; 0x74
    714a:	f7ff fbe5 	bl	6918 <_malloc_r>
    714e:	1e04      	subs	r4, r0, #0
    7150:	d008      	beq.n	7164 <__sfmoreglue+0x28>
    7152:	2100      	movs	r1, #0
    7154:	002a      	movs	r2, r5
    7156:	6001      	str	r1, [r0, #0]
    7158:	6046      	str	r6, [r0, #4]
    715a:	300c      	adds	r0, #12
    715c:	60a0      	str	r0, [r4, #8]
    715e:	3268      	adds	r2, #104	; 0x68
    7160:	f7ff fb88 	bl	6874 <memset>
    7164:	0020      	movs	r0, r4
    7166:	bd70      	pop	{r4, r5, r6, pc}

00007168 <__sinit>:
    7168:	6983      	ldr	r3, [r0, #24]
    716a:	b513      	push	{r0, r1, r4, lr}
    716c:	0004      	movs	r4, r0
    716e:	2b00      	cmp	r3, #0
    7170:	d128      	bne.n	71c4 <__sinit+0x5c>
    7172:	6483      	str	r3, [r0, #72]	; 0x48
    7174:	64c3      	str	r3, [r0, #76]	; 0x4c
    7176:	6503      	str	r3, [r0, #80]	; 0x50
    7178:	4b13      	ldr	r3, [pc, #76]	; (71c8 <__sinit+0x60>)
    717a:	4a14      	ldr	r2, [pc, #80]	; (71cc <__sinit+0x64>)
    717c:	681b      	ldr	r3, [r3, #0]
    717e:	6282      	str	r2, [r0, #40]	; 0x28
    7180:	9301      	str	r3, [sp, #4]
    7182:	4298      	cmp	r0, r3
    7184:	d101      	bne.n	718a <__sinit+0x22>
    7186:	2301      	movs	r3, #1
    7188:	6183      	str	r3, [r0, #24]
    718a:	0020      	movs	r0, r4
    718c:	f000 f820 	bl	71d0 <__sfp>
    7190:	6060      	str	r0, [r4, #4]
    7192:	0020      	movs	r0, r4
    7194:	f000 f81c 	bl	71d0 <__sfp>
    7198:	60a0      	str	r0, [r4, #8]
    719a:	0020      	movs	r0, r4
    719c:	f000 f818 	bl	71d0 <__sfp>
    71a0:	2200      	movs	r2, #0
    71a2:	60e0      	str	r0, [r4, #12]
    71a4:	2104      	movs	r1, #4
    71a6:	6860      	ldr	r0, [r4, #4]
    71a8:	f7ff ffa4 	bl	70f4 <std.isra.0>
    71ac:	2201      	movs	r2, #1
    71ae:	2109      	movs	r1, #9
    71b0:	68a0      	ldr	r0, [r4, #8]
    71b2:	f7ff ff9f 	bl	70f4 <std.isra.0>
    71b6:	2202      	movs	r2, #2
    71b8:	2112      	movs	r1, #18
    71ba:	68e0      	ldr	r0, [r4, #12]
    71bc:	f7ff ff9a 	bl	70f4 <std.isra.0>
    71c0:	2301      	movs	r3, #1
    71c2:	61a3      	str	r3, [r4, #24]
    71c4:	bd13      	pop	{r0, r1, r4, pc}
    71c6:	46c0      	nop			; (mov r8, r8)
    71c8:	00008e24 	.word	0x00008e24
    71cc:	000070e5 	.word	0x000070e5

000071d0 <__sfp>:
    71d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71d2:	4b1e      	ldr	r3, [pc, #120]	; (724c <__sfp+0x7c>)
    71d4:	0007      	movs	r7, r0
    71d6:	681e      	ldr	r6, [r3, #0]
    71d8:	69b3      	ldr	r3, [r6, #24]
    71da:	2b00      	cmp	r3, #0
    71dc:	d102      	bne.n	71e4 <__sfp+0x14>
    71de:	0030      	movs	r0, r6
    71e0:	f7ff ffc2 	bl	7168 <__sinit>
    71e4:	3648      	adds	r6, #72	; 0x48
    71e6:	68b4      	ldr	r4, [r6, #8]
    71e8:	6873      	ldr	r3, [r6, #4]
    71ea:	3b01      	subs	r3, #1
    71ec:	d504      	bpl.n	71f8 <__sfp+0x28>
    71ee:	6833      	ldr	r3, [r6, #0]
    71f0:	2b00      	cmp	r3, #0
    71f2:	d007      	beq.n	7204 <__sfp+0x34>
    71f4:	6836      	ldr	r6, [r6, #0]
    71f6:	e7f6      	b.n	71e6 <__sfp+0x16>
    71f8:	220c      	movs	r2, #12
    71fa:	5ea5      	ldrsh	r5, [r4, r2]
    71fc:	2d00      	cmp	r5, #0
    71fe:	d00d      	beq.n	721c <__sfp+0x4c>
    7200:	3468      	adds	r4, #104	; 0x68
    7202:	e7f2      	b.n	71ea <__sfp+0x1a>
    7204:	2104      	movs	r1, #4
    7206:	0038      	movs	r0, r7
    7208:	f7ff ff98 	bl	713c <__sfmoreglue>
    720c:	6030      	str	r0, [r6, #0]
    720e:	2800      	cmp	r0, #0
    7210:	d1f0      	bne.n	71f4 <__sfp+0x24>
    7212:	230c      	movs	r3, #12
    7214:	0004      	movs	r4, r0
    7216:	603b      	str	r3, [r7, #0]
    7218:	0020      	movs	r0, r4
    721a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    721c:	2301      	movs	r3, #1
    721e:	0020      	movs	r0, r4
    7220:	425b      	negs	r3, r3
    7222:	81e3      	strh	r3, [r4, #14]
    7224:	3302      	adds	r3, #2
    7226:	81a3      	strh	r3, [r4, #12]
    7228:	6665      	str	r5, [r4, #100]	; 0x64
    722a:	6025      	str	r5, [r4, #0]
    722c:	60a5      	str	r5, [r4, #8]
    722e:	6065      	str	r5, [r4, #4]
    7230:	6125      	str	r5, [r4, #16]
    7232:	6165      	str	r5, [r4, #20]
    7234:	61a5      	str	r5, [r4, #24]
    7236:	2208      	movs	r2, #8
    7238:	0029      	movs	r1, r5
    723a:	305c      	adds	r0, #92	; 0x5c
    723c:	f7ff fb1a 	bl	6874 <memset>
    7240:	6365      	str	r5, [r4, #52]	; 0x34
    7242:	63a5      	str	r5, [r4, #56]	; 0x38
    7244:	64a5      	str	r5, [r4, #72]	; 0x48
    7246:	64e5      	str	r5, [r4, #76]	; 0x4c
    7248:	e7e6      	b.n	7218 <__sfp+0x48>
    724a:	46c0      	nop			; (mov r8, r8)
    724c:	00008e24 	.word	0x00008e24

00007250 <_fwalk_reent>:
    7250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7252:	0004      	movs	r4, r0
    7254:	0007      	movs	r7, r0
    7256:	2600      	movs	r6, #0
    7258:	9101      	str	r1, [sp, #4]
    725a:	3448      	adds	r4, #72	; 0x48
    725c:	2c00      	cmp	r4, #0
    725e:	d101      	bne.n	7264 <_fwalk_reent+0x14>
    7260:	0030      	movs	r0, r6
    7262:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7264:	6863      	ldr	r3, [r4, #4]
    7266:	68a5      	ldr	r5, [r4, #8]
    7268:	9300      	str	r3, [sp, #0]
    726a:	9b00      	ldr	r3, [sp, #0]
    726c:	3b01      	subs	r3, #1
    726e:	9300      	str	r3, [sp, #0]
    7270:	d501      	bpl.n	7276 <_fwalk_reent+0x26>
    7272:	6824      	ldr	r4, [r4, #0]
    7274:	e7f2      	b.n	725c <_fwalk_reent+0xc>
    7276:	89ab      	ldrh	r3, [r5, #12]
    7278:	2b01      	cmp	r3, #1
    727a:	d908      	bls.n	728e <_fwalk_reent+0x3e>
    727c:	220e      	movs	r2, #14
    727e:	5eab      	ldrsh	r3, [r5, r2]
    7280:	3301      	adds	r3, #1
    7282:	d004      	beq.n	728e <_fwalk_reent+0x3e>
    7284:	0029      	movs	r1, r5
    7286:	0038      	movs	r0, r7
    7288:	9b01      	ldr	r3, [sp, #4]
    728a:	4798      	blx	r3
    728c:	4306      	orrs	r6, r0
    728e:	3568      	adds	r5, #104	; 0x68
    7290:	e7eb      	b.n	726a <_fwalk_reent+0x1a>
	...

00007294 <_lseek_r>:
    7294:	b570      	push	{r4, r5, r6, lr}
    7296:	0005      	movs	r5, r0
    7298:	0008      	movs	r0, r1
    729a:	0011      	movs	r1, r2
    729c:	2200      	movs	r2, #0
    729e:	4c06      	ldr	r4, [pc, #24]	; (72b8 <_lseek_r+0x24>)
    72a0:	6022      	str	r2, [r4, #0]
    72a2:	001a      	movs	r2, r3
    72a4:	f7fd fd22 	bl	4cec <_lseek>
    72a8:	1c43      	adds	r3, r0, #1
    72aa:	d103      	bne.n	72b4 <_lseek_r+0x20>
    72ac:	6823      	ldr	r3, [r4, #0]
    72ae:	2b00      	cmp	r3, #0
    72b0:	d000      	beq.n	72b4 <_lseek_r+0x20>
    72b2:	602b      	str	r3, [r5, #0]
    72b4:	bd70      	pop	{r4, r5, r6, pc}
    72b6:	46c0      	nop			; (mov r8, r8)
    72b8:	20000d78 	.word	0x20000d78

000072bc <__swhatbuf_r>:
    72bc:	b570      	push	{r4, r5, r6, lr}
    72be:	000e      	movs	r6, r1
    72c0:	001d      	movs	r5, r3
    72c2:	230e      	movs	r3, #14
    72c4:	5ec9      	ldrsh	r1, [r1, r3]
    72c6:	b090      	sub	sp, #64	; 0x40
    72c8:	0014      	movs	r4, r2
    72ca:	2900      	cmp	r1, #0
    72cc:	da07      	bge.n	72de <__swhatbuf_r+0x22>
    72ce:	2300      	movs	r3, #0
    72d0:	602b      	str	r3, [r5, #0]
    72d2:	89b3      	ldrh	r3, [r6, #12]
    72d4:	061b      	lsls	r3, r3, #24
    72d6:	d411      	bmi.n	72fc <__swhatbuf_r+0x40>
    72d8:	2380      	movs	r3, #128	; 0x80
    72da:	00db      	lsls	r3, r3, #3
    72dc:	e00f      	b.n	72fe <__swhatbuf_r+0x42>
    72de:	aa01      	add	r2, sp, #4
    72e0:	f000 fcd6 	bl	7c90 <_fstat_r>
    72e4:	2800      	cmp	r0, #0
    72e6:	dbf2      	blt.n	72ce <__swhatbuf_r+0x12>
    72e8:	22f0      	movs	r2, #240	; 0xf0
    72ea:	9b02      	ldr	r3, [sp, #8]
    72ec:	0212      	lsls	r2, r2, #8
    72ee:	4013      	ands	r3, r2
    72f0:	4a05      	ldr	r2, [pc, #20]	; (7308 <__swhatbuf_r+0x4c>)
    72f2:	189b      	adds	r3, r3, r2
    72f4:	425a      	negs	r2, r3
    72f6:	4153      	adcs	r3, r2
    72f8:	602b      	str	r3, [r5, #0]
    72fa:	e7ed      	b.n	72d8 <__swhatbuf_r+0x1c>
    72fc:	2340      	movs	r3, #64	; 0x40
    72fe:	2000      	movs	r0, #0
    7300:	6023      	str	r3, [r4, #0]
    7302:	b010      	add	sp, #64	; 0x40
    7304:	bd70      	pop	{r4, r5, r6, pc}
    7306:	46c0      	nop			; (mov r8, r8)
    7308:	ffffe000 	.word	0xffffe000

0000730c <__smakebuf_r>:
    730c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    730e:	2602      	movs	r6, #2
    7310:	898b      	ldrh	r3, [r1, #12]
    7312:	0005      	movs	r5, r0
    7314:	000c      	movs	r4, r1
    7316:	4233      	tst	r3, r6
    7318:	d006      	beq.n	7328 <__smakebuf_r+0x1c>
    731a:	0023      	movs	r3, r4
    731c:	3347      	adds	r3, #71	; 0x47
    731e:	6023      	str	r3, [r4, #0]
    7320:	6123      	str	r3, [r4, #16]
    7322:	2301      	movs	r3, #1
    7324:	6163      	str	r3, [r4, #20]
    7326:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7328:	ab01      	add	r3, sp, #4
    732a:	466a      	mov	r2, sp
    732c:	f7ff ffc6 	bl	72bc <__swhatbuf_r>
    7330:	9900      	ldr	r1, [sp, #0]
    7332:	0007      	movs	r7, r0
    7334:	0028      	movs	r0, r5
    7336:	f7ff faef 	bl	6918 <_malloc_r>
    733a:	2800      	cmp	r0, #0
    733c:	d108      	bne.n	7350 <__smakebuf_r+0x44>
    733e:	220c      	movs	r2, #12
    7340:	5ea3      	ldrsh	r3, [r4, r2]
    7342:	059a      	lsls	r2, r3, #22
    7344:	d4ef      	bmi.n	7326 <__smakebuf_r+0x1a>
    7346:	2203      	movs	r2, #3
    7348:	4393      	bics	r3, r2
    734a:	431e      	orrs	r6, r3
    734c:	81a6      	strh	r6, [r4, #12]
    734e:	e7e4      	b.n	731a <__smakebuf_r+0xe>
    7350:	4b0f      	ldr	r3, [pc, #60]	; (7390 <__smakebuf_r+0x84>)
    7352:	62ab      	str	r3, [r5, #40]	; 0x28
    7354:	2380      	movs	r3, #128	; 0x80
    7356:	89a2      	ldrh	r2, [r4, #12]
    7358:	6020      	str	r0, [r4, #0]
    735a:	4313      	orrs	r3, r2
    735c:	81a3      	strh	r3, [r4, #12]
    735e:	9b00      	ldr	r3, [sp, #0]
    7360:	6120      	str	r0, [r4, #16]
    7362:	6163      	str	r3, [r4, #20]
    7364:	9b01      	ldr	r3, [sp, #4]
    7366:	2b00      	cmp	r3, #0
    7368:	d00d      	beq.n	7386 <__smakebuf_r+0x7a>
    736a:	230e      	movs	r3, #14
    736c:	5ee1      	ldrsh	r1, [r4, r3]
    736e:	0028      	movs	r0, r5
    7370:	f000 fca0 	bl	7cb4 <_isatty_r>
    7374:	2800      	cmp	r0, #0
    7376:	d006      	beq.n	7386 <__smakebuf_r+0x7a>
    7378:	2203      	movs	r2, #3
    737a:	89a3      	ldrh	r3, [r4, #12]
    737c:	4393      	bics	r3, r2
    737e:	001a      	movs	r2, r3
    7380:	2301      	movs	r3, #1
    7382:	4313      	orrs	r3, r2
    7384:	81a3      	strh	r3, [r4, #12]
    7386:	89a0      	ldrh	r0, [r4, #12]
    7388:	4338      	orrs	r0, r7
    738a:	81a0      	strh	r0, [r4, #12]
    738c:	e7cb      	b.n	7326 <__smakebuf_r+0x1a>
    738e:	46c0      	nop			; (mov r8, r8)
    7390:	000070e5 	.word	0x000070e5

00007394 <__malloc_lock>:
    7394:	4770      	bx	lr

00007396 <__malloc_unlock>:
    7396:	4770      	bx	lr

00007398 <__ssputs_r>:
    7398:	b5f0      	push	{r4, r5, r6, r7, lr}
    739a:	688e      	ldr	r6, [r1, #8]
    739c:	b085      	sub	sp, #20
    739e:	0007      	movs	r7, r0
    73a0:	000c      	movs	r4, r1
    73a2:	9203      	str	r2, [sp, #12]
    73a4:	9301      	str	r3, [sp, #4]
    73a6:	429e      	cmp	r6, r3
    73a8:	d839      	bhi.n	741e <__ssputs_r+0x86>
    73aa:	2390      	movs	r3, #144	; 0x90
    73ac:	898a      	ldrh	r2, [r1, #12]
    73ae:	00db      	lsls	r3, r3, #3
    73b0:	421a      	tst	r2, r3
    73b2:	d034      	beq.n	741e <__ssputs_r+0x86>
    73b4:	2503      	movs	r5, #3
    73b6:	6909      	ldr	r1, [r1, #16]
    73b8:	6823      	ldr	r3, [r4, #0]
    73ba:	1a5b      	subs	r3, r3, r1
    73bc:	9302      	str	r3, [sp, #8]
    73be:	6963      	ldr	r3, [r4, #20]
    73c0:	9802      	ldr	r0, [sp, #8]
    73c2:	435d      	muls	r5, r3
    73c4:	0feb      	lsrs	r3, r5, #31
    73c6:	195d      	adds	r5, r3, r5
    73c8:	9b01      	ldr	r3, [sp, #4]
    73ca:	106d      	asrs	r5, r5, #1
    73cc:	3301      	adds	r3, #1
    73ce:	181b      	adds	r3, r3, r0
    73d0:	42ab      	cmp	r3, r5
    73d2:	d900      	bls.n	73d6 <__ssputs_r+0x3e>
    73d4:	001d      	movs	r5, r3
    73d6:	0553      	lsls	r3, r2, #21
    73d8:	d532      	bpl.n	7440 <__ssputs_r+0xa8>
    73da:	0029      	movs	r1, r5
    73dc:	0038      	movs	r0, r7
    73de:	f7ff fa9b 	bl	6918 <_malloc_r>
    73e2:	1e06      	subs	r6, r0, #0
    73e4:	d109      	bne.n	73fa <__ssputs_r+0x62>
    73e6:	230c      	movs	r3, #12
    73e8:	603b      	str	r3, [r7, #0]
    73ea:	2340      	movs	r3, #64	; 0x40
    73ec:	2001      	movs	r0, #1
    73ee:	89a2      	ldrh	r2, [r4, #12]
    73f0:	4240      	negs	r0, r0
    73f2:	4313      	orrs	r3, r2
    73f4:	81a3      	strh	r3, [r4, #12]
    73f6:	b005      	add	sp, #20
    73f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73fa:	9a02      	ldr	r2, [sp, #8]
    73fc:	6921      	ldr	r1, [r4, #16]
    73fe:	f7ff fa1e 	bl	683e <memcpy>
    7402:	89a3      	ldrh	r3, [r4, #12]
    7404:	4a14      	ldr	r2, [pc, #80]	; (7458 <__ssputs_r+0xc0>)
    7406:	401a      	ands	r2, r3
    7408:	2380      	movs	r3, #128	; 0x80
    740a:	4313      	orrs	r3, r2
    740c:	81a3      	strh	r3, [r4, #12]
    740e:	9b02      	ldr	r3, [sp, #8]
    7410:	6126      	str	r6, [r4, #16]
    7412:	18f6      	adds	r6, r6, r3
    7414:	6026      	str	r6, [r4, #0]
    7416:	6165      	str	r5, [r4, #20]
    7418:	9e01      	ldr	r6, [sp, #4]
    741a:	1aed      	subs	r5, r5, r3
    741c:	60a5      	str	r5, [r4, #8]
    741e:	9b01      	ldr	r3, [sp, #4]
    7420:	42b3      	cmp	r3, r6
    7422:	d200      	bcs.n	7426 <__ssputs_r+0x8e>
    7424:	001e      	movs	r6, r3
    7426:	0032      	movs	r2, r6
    7428:	9903      	ldr	r1, [sp, #12]
    742a:	6820      	ldr	r0, [r4, #0]
    742c:	f7ff fa10 	bl	6850 <memmove>
    7430:	68a3      	ldr	r3, [r4, #8]
    7432:	2000      	movs	r0, #0
    7434:	1b9b      	subs	r3, r3, r6
    7436:	60a3      	str	r3, [r4, #8]
    7438:	6823      	ldr	r3, [r4, #0]
    743a:	199e      	adds	r6, r3, r6
    743c:	6026      	str	r6, [r4, #0]
    743e:	e7da      	b.n	73f6 <__ssputs_r+0x5e>
    7440:	002a      	movs	r2, r5
    7442:	0038      	movs	r0, r7
    7444:	f000 fc53 	bl	7cee <_realloc_r>
    7448:	1e06      	subs	r6, r0, #0
    744a:	d1e0      	bne.n	740e <__ssputs_r+0x76>
    744c:	6921      	ldr	r1, [r4, #16]
    744e:	0038      	movs	r0, r7
    7450:	f7ff fa18 	bl	6884 <_free_r>
    7454:	e7c7      	b.n	73e6 <__ssputs_r+0x4e>
    7456:	46c0      	nop			; (mov r8, r8)
    7458:	fffffb7f 	.word	0xfffffb7f

0000745c <_svfiprintf_r>:
    745c:	b5f0      	push	{r4, r5, r6, r7, lr}
    745e:	b09f      	sub	sp, #124	; 0x7c
    7460:	9002      	str	r0, [sp, #8]
    7462:	9305      	str	r3, [sp, #20]
    7464:	898b      	ldrh	r3, [r1, #12]
    7466:	000f      	movs	r7, r1
    7468:	0016      	movs	r6, r2
    746a:	061b      	lsls	r3, r3, #24
    746c:	d511      	bpl.n	7492 <_svfiprintf_r+0x36>
    746e:	690b      	ldr	r3, [r1, #16]
    7470:	2b00      	cmp	r3, #0
    7472:	d10e      	bne.n	7492 <_svfiprintf_r+0x36>
    7474:	2140      	movs	r1, #64	; 0x40
    7476:	f7ff fa4f 	bl	6918 <_malloc_r>
    747a:	6038      	str	r0, [r7, #0]
    747c:	6138      	str	r0, [r7, #16]
    747e:	2800      	cmp	r0, #0
    7480:	d105      	bne.n	748e <_svfiprintf_r+0x32>
    7482:	230c      	movs	r3, #12
    7484:	9a02      	ldr	r2, [sp, #8]
    7486:	3801      	subs	r0, #1
    7488:	6013      	str	r3, [r2, #0]
    748a:	b01f      	add	sp, #124	; 0x7c
    748c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    748e:	2340      	movs	r3, #64	; 0x40
    7490:	617b      	str	r3, [r7, #20]
    7492:	2300      	movs	r3, #0
    7494:	ad06      	add	r5, sp, #24
    7496:	616b      	str	r3, [r5, #20]
    7498:	3320      	adds	r3, #32
    749a:	766b      	strb	r3, [r5, #25]
    749c:	3310      	adds	r3, #16
    749e:	76ab      	strb	r3, [r5, #26]
    74a0:	0034      	movs	r4, r6
    74a2:	7823      	ldrb	r3, [r4, #0]
    74a4:	2b00      	cmp	r3, #0
    74a6:	d147      	bne.n	7538 <_svfiprintf_r+0xdc>
    74a8:	1ba3      	subs	r3, r4, r6
    74aa:	9304      	str	r3, [sp, #16]
    74ac:	d00d      	beq.n	74ca <_svfiprintf_r+0x6e>
    74ae:	1ba3      	subs	r3, r4, r6
    74b0:	0032      	movs	r2, r6
    74b2:	0039      	movs	r1, r7
    74b4:	9802      	ldr	r0, [sp, #8]
    74b6:	f7ff ff6f 	bl	7398 <__ssputs_r>
    74ba:	1c43      	adds	r3, r0, #1
    74bc:	d100      	bne.n	74c0 <_svfiprintf_r+0x64>
    74be:	e0b5      	b.n	762c <_svfiprintf_r+0x1d0>
    74c0:	696a      	ldr	r2, [r5, #20]
    74c2:	9b04      	ldr	r3, [sp, #16]
    74c4:	4694      	mov	ip, r2
    74c6:	4463      	add	r3, ip
    74c8:	616b      	str	r3, [r5, #20]
    74ca:	7823      	ldrb	r3, [r4, #0]
    74cc:	2b00      	cmp	r3, #0
    74ce:	d100      	bne.n	74d2 <_svfiprintf_r+0x76>
    74d0:	e0ac      	b.n	762c <_svfiprintf_r+0x1d0>
    74d2:	2201      	movs	r2, #1
    74d4:	2300      	movs	r3, #0
    74d6:	4252      	negs	r2, r2
    74d8:	606a      	str	r2, [r5, #4]
    74da:	a902      	add	r1, sp, #8
    74dc:	3254      	adds	r2, #84	; 0x54
    74de:	1852      	adds	r2, r2, r1
    74e0:	3401      	adds	r4, #1
    74e2:	602b      	str	r3, [r5, #0]
    74e4:	60eb      	str	r3, [r5, #12]
    74e6:	60ab      	str	r3, [r5, #8]
    74e8:	7013      	strb	r3, [r2, #0]
    74ea:	65ab      	str	r3, [r5, #88]	; 0x58
    74ec:	4e58      	ldr	r6, [pc, #352]	; (7650 <_svfiprintf_r+0x1f4>)
    74ee:	2205      	movs	r2, #5
    74f0:	7821      	ldrb	r1, [r4, #0]
    74f2:	0030      	movs	r0, r6
    74f4:	f000 fbf0 	bl	7cd8 <memchr>
    74f8:	1c62      	adds	r2, r4, #1
    74fa:	2800      	cmp	r0, #0
    74fc:	d120      	bne.n	7540 <_svfiprintf_r+0xe4>
    74fe:	6829      	ldr	r1, [r5, #0]
    7500:	06cb      	lsls	r3, r1, #27
    7502:	d504      	bpl.n	750e <_svfiprintf_r+0xb2>
    7504:	2353      	movs	r3, #83	; 0x53
    7506:	ae02      	add	r6, sp, #8
    7508:	3020      	adds	r0, #32
    750a:	199b      	adds	r3, r3, r6
    750c:	7018      	strb	r0, [r3, #0]
    750e:	070b      	lsls	r3, r1, #28
    7510:	d504      	bpl.n	751c <_svfiprintf_r+0xc0>
    7512:	2353      	movs	r3, #83	; 0x53
    7514:	202b      	movs	r0, #43	; 0x2b
    7516:	ae02      	add	r6, sp, #8
    7518:	199b      	adds	r3, r3, r6
    751a:	7018      	strb	r0, [r3, #0]
    751c:	7823      	ldrb	r3, [r4, #0]
    751e:	2b2a      	cmp	r3, #42	; 0x2a
    7520:	d016      	beq.n	7550 <_svfiprintf_r+0xf4>
    7522:	2000      	movs	r0, #0
    7524:	210a      	movs	r1, #10
    7526:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7528:	7822      	ldrb	r2, [r4, #0]
    752a:	3a30      	subs	r2, #48	; 0x30
    752c:	2a09      	cmp	r2, #9
    752e:	d955      	bls.n	75dc <_svfiprintf_r+0x180>
    7530:	2800      	cmp	r0, #0
    7532:	d015      	beq.n	7560 <_svfiprintf_r+0x104>
    7534:	9309      	str	r3, [sp, #36]	; 0x24
    7536:	e013      	b.n	7560 <_svfiprintf_r+0x104>
    7538:	2b25      	cmp	r3, #37	; 0x25
    753a:	d0b5      	beq.n	74a8 <_svfiprintf_r+0x4c>
    753c:	3401      	adds	r4, #1
    753e:	e7b0      	b.n	74a2 <_svfiprintf_r+0x46>
    7540:	2301      	movs	r3, #1
    7542:	1b80      	subs	r0, r0, r6
    7544:	4083      	lsls	r3, r0
    7546:	6829      	ldr	r1, [r5, #0]
    7548:	0014      	movs	r4, r2
    754a:	430b      	orrs	r3, r1
    754c:	602b      	str	r3, [r5, #0]
    754e:	e7cd      	b.n	74ec <_svfiprintf_r+0x90>
    7550:	9b05      	ldr	r3, [sp, #20]
    7552:	1d18      	adds	r0, r3, #4
    7554:	681b      	ldr	r3, [r3, #0]
    7556:	9005      	str	r0, [sp, #20]
    7558:	2b00      	cmp	r3, #0
    755a:	db39      	blt.n	75d0 <_svfiprintf_r+0x174>
    755c:	9309      	str	r3, [sp, #36]	; 0x24
    755e:	0014      	movs	r4, r2
    7560:	7823      	ldrb	r3, [r4, #0]
    7562:	2b2e      	cmp	r3, #46	; 0x2e
    7564:	d10b      	bne.n	757e <_svfiprintf_r+0x122>
    7566:	7863      	ldrb	r3, [r4, #1]
    7568:	1c62      	adds	r2, r4, #1
    756a:	2b2a      	cmp	r3, #42	; 0x2a
    756c:	d13e      	bne.n	75ec <_svfiprintf_r+0x190>
    756e:	9b05      	ldr	r3, [sp, #20]
    7570:	3402      	adds	r4, #2
    7572:	1d1a      	adds	r2, r3, #4
    7574:	681b      	ldr	r3, [r3, #0]
    7576:	9205      	str	r2, [sp, #20]
    7578:	2b00      	cmp	r3, #0
    757a:	db34      	blt.n	75e6 <_svfiprintf_r+0x18a>
    757c:	9307      	str	r3, [sp, #28]
    757e:	4e35      	ldr	r6, [pc, #212]	; (7654 <_svfiprintf_r+0x1f8>)
    7580:	7821      	ldrb	r1, [r4, #0]
    7582:	2203      	movs	r2, #3
    7584:	0030      	movs	r0, r6
    7586:	f000 fba7 	bl	7cd8 <memchr>
    758a:	2800      	cmp	r0, #0
    758c:	d006      	beq.n	759c <_svfiprintf_r+0x140>
    758e:	2340      	movs	r3, #64	; 0x40
    7590:	1b80      	subs	r0, r0, r6
    7592:	4083      	lsls	r3, r0
    7594:	682a      	ldr	r2, [r5, #0]
    7596:	3401      	adds	r4, #1
    7598:	4313      	orrs	r3, r2
    759a:	602b      	str	r3, [r5, #0]
    759c:	7821      	ldrb	r1, [r4, #0]
    759e:	2206      	movs	r2, #6
    75a0:	482d      	ldr	r0, [pc, #180]	; (7658 <_svfiprintf_r+0x1fc>)
    75a2:	1c66      	adds	r6, r4, #1
    75a4:	7629      	strb	r1, [r5, #24]
    75a6:	f000 fb97 	bl	7cd8 <memchr>
    75aa:	2800      	cmp	r0, #0
    75ac:	d046      	beq.n	763c <_svfiprintf_r+0x1e0>
    75ae:	4b2b      	ldr	r3, [pc, #172]	; (765c <_svfiprintf_r+0x200>)
    75b0:	2b00      	cmp	r3, #0
    75b2:	d12f      	bne.n	7614 <_svfiprintf_r+0x1b8>
    75b4:	6829      	ldr	r1, [r5, #0]
    75b6:	9b05      	ldr	r3, [sp, #20]
    75b8:	2207      	movs	r2, #7
    75ba:	05c9      	lsls	r1, r1, #23
    75bc:	d528      	bpl.n	7610 <_svfiprintf_r+0x1b4>
    75be:	189b      	adds	r3, r3, r2
    75c0:	4393      	bics	r3, r2
    75c2:	3308      	adds	r3, #8
    75c4:	9305      	str	r3, [sp, #20]
    75c6:	696b      	ldr	r3, [r5, #20]
    75c8:	9a03      	ldr	r2, [sp, #12]
    75ca:	189b      	adds	r3, r3, r2
    75cc:	616b      	str	r3, [r5, #20]
    75ce:	e767      	b.n	74a0 <_svfiprintf_r+0x44>
    75d0:	425b      	negs	r3, r3
    75d2:	60eb      	str	r3, [r5, #12]
    75d4:	2302      	movs	r3, #2
    75d6:	430b      	orrs	r3, r1
    75d8:	602b      	str	r3, [r5, #0]
    75da:	e7c0      	b.n	755e <_svfiprintf_r+0x102>
    75dc:	434b      	muls	r3, r1
    75de:	3401      	adds	r4, #1
    75e0:	189b      	adds	r3, r3, r2
    75e2:	2001      	movs	r0, #1
    75e4:	e7a0      	b.n	7528 <_svfiprintf_r+0xcc>
    75e6:	2301      	movs	r3, #1
    75e8:	425b      	negs	r3, r3
    75ea:	e7c7      	b.n	757c <_svfiprintf_r+0x120>
    75ec:	2300      	movs	r3, #0
    75ee:	0014      	movs	r4, r2
    75f0:	200a      	movs	r0, #10
    75f2:	001a      	movs	r2, r3
    75f4:	606b      	str	r3, [r5, #4]
    75f6:	7821      	ldrb	r1, [r4, #0]
    75f8:	3930      	subs	r1, #48	; 0x30
    75fa:	2909      	cmp	r1, #9
    75fc:	d903      	bls.n	7606 <_svfiprintf_r+0x1aa>
    75fe:	2b00      	cmp	r3, #0
    7600:	d0bd      	beq.n	757e <_svfiprintf_r+0x122>
    7602:	9207      	str	r2, [sp, #28]
    7604:	e7bb      	b.n	757e <_svfiprintf_r+0x122>
    7606:	4342      	muls	r2, r0
    7608:	3401      	adds	r4, #1
    760a:	1852      	adds	r2, r2, r1
    760c:	2301      	movs	r3, #1
    760e:	e7f2      	b.n	75f6 <_svfiprintf_r+0x19a>
    7610:	3307      	adds	r3, #7
    7612:	e7d5      	b.n	75c0 <_svfiprintf_r+0x164>
    7614:	ab05      	add	r3, sp, #20
    7616:	9300      	str	r3, [sp, #0]
    7618:	003a      	movs	r2, r7
    761a:	4b11      	ldr	r3, [pc, #68]	; (7660 <_svfiprintf_r+0x204>)
    761c:	0029      	movs	r1, r5
    761e:	9802      	ldr	r0, [sp, #8]
    7620:	e000      	b.n	7624 <_svfiprintf_r+0x1c8>
    7622:	bf00      	nop
    7624:	9003      	str	r0, [sp, #12]
    7626:	9b03      	ldr	r3, [sp, #12]
    7628:	3301      	adds	r3, #1
    762a:	d1cc      	bne.n	75c6 <_svfiprintf_r+0x16a>
    762c:	89bb      	ldrh	r3, [r7, #12]
    762e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7630:	065b      	lsls	r3, r3, #25
    7632:	d400      	bmi.n	7636 <_svfiprintf_r+0x1da>
    7634:	e729      	b.n	748a <_svfiprintf_r+0x2e>
    7636:	2001      	movs	r0, #1
    7638:	4240      	negs	r0, r0
    763a:	e726      	b.n	748a <_svfiprintf_r+0x2e>
    763c:	ab05      	add	r3, sp, #20
    763e:	9300      	str	r3, [sp, #0]
    7640:	003a      	movs	r2, r7
    7642:	4b07      	ldr	r3, [pc, #28]	; (7660 <_svfiprintf_r+0x204>)
    7644:	0029      	movs	r1, r5
    7646:	9802      	ldr	r0, [sp, #8]
    7648:	f000 f9be 	bl	79c8 <_printf_i>
    764c:	e7ea      	b.n	7624 <_svfiprintf_r+0x1c8>
    764e:	46c0      	nop			; (mov r8, r8)
    7650:	00008e88 	.word	0x00008e88
    7654:	00008e8e 	.word	0x00008e8e
    7658:	00008e92 	.word	0x00008e92
    765c:	00000000 	.word	0x00000000
    7660:	00007399 	.word	0x00007399

00007664 <__sfputc_r>:
    7664:	6893      	ldr	r3, [r2, #8]
    7666:	b510      	push	{r4, lr}
    7668:	3b01      	subs	r3, #1
    766a:	6093      	str	r3, [r2, #8]
    766c:	2b00      	cmp	r3, #0
    766e:	da05      	bge.n	767c <__sfputc_r+0x18>
    7670:	6994      	ldr	r4, [r2, #24]
    7672:	42a3      	cmp	r3, r4
    7674:	db08      	blt.n	7688 <__sfputc_r+0x24>
    7676:	b2cb      	uxtb	r3, r1
    7678:	2b0a      	cmp	r3, #10
    767a:	d005      	beq.n	7688 <__sfputc_r+0x24>
    767c:	6813      	ldr	r3, [r2, #0]
    767e:	1c58      	adds	r0, r3, #1
    7680:	6010      	str	r0, [r2, #0]
    7682:	7019      	strb	r1, [r3, #0]
    7684:	b2c8      	uxtb	r0, r1
    7686:	bd10      	pop	{r4, pc}
    7688:	f7ff fb84 	bl	6d94 <__swbuf_r>
    768c:	e7fb      	b.n	7686 <__sfputc_r+0x22>

0000768e <__sfputs_r>:
    768e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7690:	0006      	movs	r6, r0
    7692:	000f      	movs	r7, r1
    7694:	0014      	movs	r4, r2
    7696:	18d5      	adds	r5, r2, r3
    7698:	42ac      	cmp	r4, r5
    769a:	d101      	bne.n	76a0 <__sfputs_r+0x12>
    769c:	2000      	movs	r0, #0
    769e:	e007      	b.n	76b0 <__sfputs_r+0x22>
    76a0:	7821      	ldrb	r1, [r4, #0]
    76a2:	003a      	movs	r2, r7
    76a4:	0030      	movs	r0, r6
    76a6:	f7ff ffdd 	bl	7664 <__sfputc_r>
    76aa:	3401      	adds	r4, #1
    76ac:	1c43      	adds	r3, r0, #1
    76ae:	d1f3      	bne.n	7698 <__sfputs_r+0xa>
    76b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000076b4 <_vfiprintf_r>:
    76b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    76b6:	b09f      	sub	sp, #124	; 0x7c
    76b8:	0006      	movs	r6, r0
    76ba:	000f      	movs	r7, r1
    76bc:	0014      	movs	r4, r2
    76be:	9305      	str	r3, [sp, #20]
    76c0:	2800      	cmp	r0, #0
    76c2:	d004      	beq.n	76ce <_vfiprintf_r+0x1a>
    76c4:	6983      	ldr	r3, [r0, #24]
    76c6:	2b00      	cmp	r3, #0
    76c8:	d101      	bne.n	76ce <_vfiprintf_r+0x1a>
    76ca:	f7ff fd4d 	bl	7168 <__sinit>
    76ce:	4b7f      	ldr	r3, [pc, #508]	; (78cc <_vfiprintf_r+0x218>)
    76d0:	429f      	cmp	r7, r3
    76d2:	d15c      	bne.n	778e <_vfiprintf_r+0xda>
    76d4:	6877      	ldr	r7, [r6, #4]
    76d6:	89bb      	ldrh	r3, [r7, #12]
    76d8:	071b      	lsls	r3, r3, #28
    76da:	d562      	bpl.n	77a2 <_vfiprintf_r+0xee>
    76dc:	693b      	ldr	r3, [r7, #16]
    76de:	2b00      	cmp	r3, #0
    76e0:	d05f      	beq.n	77a2 <_vfiprintf_r+0xee>
    76e2:	2300      	movs	r3, #0
    76e4:	ad06      	add	r5, sp, #24
    76e6:	616b      	str	r3, [r5, #20]
    76e8:	3320      	adds	r3, #32
    76ea:	766b      	strb	r3, [r5, #25]
    76ec:	3310      	adds	r3, #16
    76ee:	76ab      	strb	r3, [r5, #26]
    76f0:	9402      	str	r4, [sp, #8]
    76f2:	9c02      	ldr	r4, [sp, #8]
    76f4:	7823      	ldrb	r3, [r4, #0]
    76f6:	2b00      	cmp	r3, #0
    76f8:	d15d      	bne.n	77b6 <_vfiprintf_r+0x102>
    76fa:	9b02      	ldr	r3, [sp, #8]
    76fc:	1ae3      	subs	r3, r4, r3
    76fe:	9304      	str	r3, [sp, #16]
    7700:	d00d      	beq.n	771e <_vfiprintf_r+0x6a>
    7702:	9b04      	ldr	r3, [sp, #16]
    7704:	9a02      	ldr	r2, [sp, #8]
    7706:	0039      	movs	r1, r7
    7708:	0030      	movs	r0, r6
    770a:	f7ff ffc0 	bl	768e <__sfputs_r>
    770e:	1c43      	adds	r3, r0, #1
    7710:	d100      	bne.n	7714 <_vfiprintf_r+0x60>
    7712:	e0cc      	b.n	78ae <_vfiprintf_r+0x1fa>
    7714:	696a      	ldr	r2, [r5, #20]
    7716:	9b04      	ldr	r3, [sp, #16]
    7718:	4694      	mov	ip, r2
    771a:	4463      	add	r3, ip
    771c:	616b      	str	r3, [r5, #20]
    771e:	7823      	ldrb	r3, [r4, #0]
    7720:	2b00      	cmp	r3, #0
    7722:	d100      	bne.n	7726 <_vfiprintf_r+0x72>
    7724:	e0c3      	b.n	78ae <_vfiprintf_r+0x1fa>
    7726:	2201      	movs	r2, #1
    7728:	2300      	movs	r3, #0
    772a:	4252      	negs	r2, r2
    772c:	606a      	str	r2, [r5, #4]
    772e:	a902      	add	r1, sp, #8
    7730:	3254      	adds	r2, #84	; 0x54
    7732:	1852      	adds	r2, r2, r1
    7734:	3401      	adds	r4, #1
    7736:	602b      	str	r3, [r5, #0]
    7738:	60eb      	str	r3, [r5, #12]
    773a:	60ab      	str	r3, [r5, #8]
    773c:	7013      	strb	r3, [r2, #0]
    773e:	65ab      	str	r3, [r5, #88]	; 0x58
    7740:	7821      	ldrb	r1, [r4, #0]
    7742:	2205      	movs	r2, #5
    7744:	4862      	ldr	r0, [pc, #392]	; (78d0 <_vfiprintf_r+0x21c>)
    7746:	f000 fac7 	bl	7cd8 <memchr>
    774a:	1c63      	adds	r3, r4, #1
    774c:	469c      	mov	ip, r3
    774e:	2800      	cmp	r0, #0
    7750:	d135      	bne.n	77be <_vfiprintf_r+0x10a>
    7752:	6829      	ldr	r1, [r5, #0]
    7754:	06cb      	lsls	r3, r1, #27
    7756:	d504      	bpl.n	7762 <_vfiprintf_r+0xae>
    7758:	2353      	movs	r3, #83	; 0x53
    775a:	aa02      	add	r2, sp, #8
    775c:	3020      	adds	r0, #32
    775e:	189b      	adds	r3, r3, r2
    7760:	7018      	strb	r0, [r3, #0]
    7762:	070b      	lsls	r3, r1, #28
    7764:	d504      	bpl.n	7770 <_vfiprintf_r+0xbc>
    7766:	2353      	movs	r3, #83	; 0x53
    7768:	202b      	movs	r0, #43	; 0x2b
    776a:	aa02      	add	r2, sp, #8
    776c:	189b      	adds	r3, r3, r2
    776e:	7018      	strb	r0, [r3, #0]
    7770:	7823      	ldrb	r3, [r4, #0]
    7772:	2b2a      	cmp	r3, #42	; 0x2a
    7774:	d02c      	beq.n	77d0 <_vfiprintf_r+0x11c>
    7776:	2000      	movs	r0, #0
    7778:	210a      	movs	r1, #10
    777a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    777c:	7822      	ldrb	r2, [r4, #0]
    777e:	3a30      	subs	r2, #48	; 0x30
    7780:	2a09      	cmp	r2, #9
    7782:	d800      	bhi.n	7786 <_vfiprintf_r+0xd2>
    7784:	e06b      	b.n	785e <_vfiprintf_r+0x1aa>
    7786:	2800      	cmp	r0, #0
    7788:	d02a      	beq.n	77e0 <_vfiprintf_r+0x12c>
    778a:	9309      	str	r3, [sp, #36]	; 0x24
    778c:	e028      	b.n	77e0 <_vfiprintf_r+0x12c>
    778e:	4b51      	ldr	r3, [pc, #324]	; (78d4 <_vfiprintf_r+0x220>)
    7790:	429f      	cmp	r7, r3
    7792:	d101      	bne.n	7798 <_vfiprintf_r+0xe4>
    7794:	68b7      	ldr	r7, [r6, #8]
    7796:	e79e      	b.n	76d6 <_vfiprintf_r+0x22>
    7798:	4b4f      	ldr	r3, [pc, #316]	; (78d8 <_vfiprintf_r+0x224>)
    779a:	429f      	cmp	r7, r3
    779c:	d19b      	bne.n	76d6 <_vfiprintf_r+0x22>
    779e:	68f7      	ldr	r7, [r6, #12]
    77a0:	e799      	b.n	76d6 <_vfiprintf_r+0x22>
    77a2:	0039      	movs	r1, r7
    77a4:	0030      	movs	r0, r6
    77a6:	f7ff fb5f 	bl	6e68 <__swsetup_r>
    77aa:	2800      	cmp	r0, #0
    77ac:	d099      	beq.n	76e2 <_vfiprintf_r+0x2e>
    77ae:	2001      	movs	r0, #1
    77b0:	4240      	negs	r0, r0
    77b2:	b01f      	add	sp, #124	; 0x7c
    77b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77b6:	2b25      	cmp	r3, #37	; 0x25
    77b8:	d09f      	beq.n	76fa <_vfiprintf_r+0x46>
    77ba:	3401      	adds	r4, #1
    77bc:	e79a      	b.n	76f4 <_vfiprintf_r+0x40>
    77be:	4b44      	ldr	r3, [pc, #272]	; (78d0 <_vfiprintf_r+0x21c>)
    77c0:	6829      	ldr	r1, [r5, #0]
    77c2:	1ac0      	subs	r0, r0, r3
    77c4:	2301      	movs	r3, #1
    77c6:	4083      	lsls	r3, r0
    77c8:	430b      	orrs	r3, r1
    77ca:	602b      	str	r3, [r5, #0]
    77cc:	4664      	mov	r4, ip
    77ce:	e7b7      	b.n	7740 <_vfiprintf_r+0x8c>
    77d0:	9b05      	ldr	r3, [sp, #20]
    77d2:	1d18      	adds	r0, r3, #4
    77d4:	681b      	ldr	r3, [r3, #0]
    77d6:	9005      	str	r0, [sp, #20]
    77d8:	2b00      	cmp	r3, #0
    77da:	db3a      	blt.n	7852 <_vfiprintf_r+0x19e>
    77dc:	9309      	str	r3, [sp, #36]	; 0x24
    77de:	4664      	mov	r4, ip
    77e0:	7823      	ldrb	r3, [r4, #0]
    77e2:	2b2e      	cmp	r3, #46	; 0x2e
    77e4:	d10b      	bne.n	77fe <_vfiprintf_r+0x14a>
    77e6:	7863      	ldrb	r3, [r4, #1]
    77e8:	1c62      	adds	r2, r4, #1
    77ea:	2b2a      	cmp	r3, #42	; 0x2a
    77ec:	d13f      	bne.n	786e <_vfiprintf_r+0x1ba>
    77ee:	9b05      	ldr	r3, [sp, #20]
    77f0:	3402      	adds	r4, #2
    77f2:	1d1a      	adds	r2, r3, #4
    77f4:	681b      	ldr	r3, [r3, #0]
    77f6:	9205      	str	r2, [sp, #20]
    77f8:	2b00      	cmp	r3, #0
    77fa:	db35      	blt.n	7868 <_vfiprintf_r+0x1b4>
    77fc:	9307      	str	r3, [sp, #28]
    77fe:	7821      	ldrb	r1, [r4, #0]
    7800:	2203      	movs	r2, #3
    7802:	4836      	ldr	r0, [pc, #216]	; (78dc <_vfiprintf_r+0x228>)
    7804:	f000 fa68 	bl	7cd8 <memchr>
    7808:	2800      	cmp	r0, #0
    780a:	d007      	beq.n	781c <_vfiprintf_r+0x168>
    780c:	4b33      	ldr	r3, [pc, #204]	; (78dc <_vfiprintf_r+0x228>)
    780e:	682a      	ldr	r2, [r5, #0]
    7810:	1ac0      	subs	r0, r0, r3
    7812:	2340      	movs	r3, #64	; 0x40
    7814:	4083      	lsls	r3, r0
    7816:	4313      	orrs	r3, r2
    7818:	602b      	str	r3, [r5, #0]
    781a:	3401      	adds	r4, #1
    781c:	7821      	ldrb	r1, [r4, #0]
    781e:	1c63      	adds	r3, r4, #1
    7820:	2206      	movs	r2, #6
    7822:	482f      	ldr	r0, [pc, #188]	; (78e0 <_vfiprintf_r+0x22c>)
    7824:	9302      	str	r3, [sp, #8]
    7826:	7629      	strb	r1, [r5, #24]
    7828:	f000 fa56 	bl	7cd8 <memchr>
    782c:	2800      	cmp	r0, #0
    782e:	d044      	beq.n	78ba <_vfiprintf_r+0x206>
    7830:	4b2c      	ldr	r3, [pc, #176]	; (78e4 <_vfiprintf_r+0x230>)
    7832:	2b00      	cmp	r3, #0
    7834:	d12f      	bne.n	7896 <_vfiprintf_r+0x1e2>
    7836:	6829      	ldr	r1, [r5, #0]
    7838:	9b05      	ldr	r3, [sp, #20]
    783a:	2207      	movs	r2, #7
    783c:	05c9      	lsls	r1, r1, #23
    783e:	d528      	bpl.n	7892 <_vfiprintf_r+0x1de>
    7840:	189b      	adds	r3, r3, r2
    7842:	4393      	bics	r3, r2
    7844:	3308      	adds	r3, #8
    7846:	9305      	str	r3, [sp, #20]
    7848:	696b      	ldr	r3, [r5, #20]
    784a:	9a03      	ldr	r2, [sp, #12]
    784c:	189b      	adds	r3, r3, r2
    784e:	616b      	str	r3, [r5, #20]
    7850:	e74f      	b.n	76f2 <_vfiprintf_r+0x3e>
    7852:	425b      	negs	r3, r3
    7854:	60eb      	str	r3, [r5, #12]
    7856:	2302      	movs	r3, #2
    7858:	430b      	orrs	r3, r1
    785a:	602b      	str	r3, [r5, #0]
    785c:	e7bf      	b.n	77de <_vfiprintf_r+0x12a>
    785e:	434b      	muls	r3, r1
    7860:	3401      	adds	r4, #1
    7862:	189b      	adds	r3, r3, r2
    7864:	2001      	movs	r0, #1
    7866:	e789      	b.n	777c <_vfiprintf_r+0xc8>
    7868:	2301      	movs	r3, #1
    786a:	425b      	negs	r3, r3
    786c:	e7c6      	b.n	77fc <_vfiprintf_r+0x148>
    786e:	2300      	movs	r3, #0
    7870:	0014      	movs	r4, r2
    7872:	200a      	movs	r0, #10
    7874:	001a      	movs	r2, r3
    7876:	606b      	str	r3, [r5, #4]
    7878:	7821      	ldrb	r1, [r4, #0]
    787a:	3930      	subs	r1, #48	; 0x30
    787c:	2909      	cmp	r1, #9
    787e:	d903      	bls.n	7888 <_vfiprintf_r+0x1d4>
    7880:	2b00      	cmp	r3, #0
    7882:	d0bc      	beq.n	77fe <_vfiprintf_r+0x14a>
    7884:	9207      	str	r2, [sp, #28]
    7886:	e7ba      	b.n	77fe <_vfiprintf_r+0x14a>
    7888:	4342      	muls	r2, r0
    788a:	3401      	adds	r4, #1
    788c:	1852      	adds	r2, r2, r1
    788e:	2301      	movs	r3, #1
    7890:	e7f2      	b.n	7878 <_vfiprintf_r+0x1c4>
    7892:	3307      	adds	r3, #7
    7894:	e7d5      	b.n	7842 <_vfiprintf_r+0x18e>
    7896:	ab05      	add	r3, sp, #20
    7898:	9300      	str	r3, [sp, #0]
    789a:	003a      	movs	r2, r7
    789c:	4b12      	ldr	r3, [pc, #72]	; (78e8 <_vfiprintf_r+0x234>)
    789e:	0029      	movs	r1, r5
    78a0:	0030      	movs	r0, r6
    78a2:	e000      	b.n	78a6 <_vfiprintf_r+0x1f2>
    78a4:	bf00      	nop
    78a6:	9003      	str	r0, [sp, #12]
    78a8:	9b03      	ldr	r3, [sp, #12]
    78aa:	3301      	adds	r3, #1
    78ac:	d1cc      	bne.n	7848 <_vfiprintf_r+0x194>
    78ae:	89bb      	ldrh	r3, [r7, #12]
    78b0:	065b      	lsls	r3, r3, #25
    78b2:	d500      	bpl.n	78b6 <_vfiprintf_r+0x202>
    78b4:	e77b      	b.n	77ae <_vfiprintf_r+0xfa>
    78b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    78b8:	e77b      	b.n	77b2 <_vfiprintf_r+0xfe>
    78ba:	ab05      	add	r3, sp, #20
    78bc:	9300      	str	r3, [sp, #0]
    78be:	003a      	movs	r2, r7
    78c0:	4b09      	ldr	r3, [pc, #36]	; (78e8 <_vfiprintf_r+0x234>)
    78c2:	0029      	movs	r1, r5
    78c4:	0030      	movs	r0, r6
    78c6:	f000 f87f 	bl	79c8 <_printf_i>
    78ca:	e7ec      	b.n	78a6 <_vfiprintf_r+0x1f2>
    78cc:	00008e48 	.word	0x00008e48
    78d0:	00008e88 	.word	0x00008e88
    78d4:	00008e68 	.word	0x00008e68
    78d8:	00008e28 	.word	0x00008e28
    78dc:	00008e8e 	.word	0x00008e8e
    78e0:	00008e92 	.word	0x00008e92
    78e4:	00000000 	.word	0x00000000
    78e8:	0000768f 	.word	0x0000768f

000078ec <_printf_common>:
    78ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    78ee:	0015      	movs	r5, r2
    78f0:	9301      	str	r3, [sp, #4]
    78f2:	688a      	ldr	r2, [r1, #8]
    78f4:	690b      	ldr	r3, [r1, #16]
    78f6:	9000      	str	r0, [sp, #0]
    78f8:	000c      	movs	r4, r1
    78fa:	4293      	cmp	r3, r2
    78fc:	da00      	bge.n	7900 <_printf_common+0x14>
    78fe:	0013      	movs	r3, r2
    7900:	0022      	movs	r2, r4
    7902:	602b      	str	r3, [r5, #0]
    7904:	3243      	adds	r2, #67	; 0x43
    7906:	7812      	ldrb	r2, [r2, #0]
    7908:	2a00      	cmp	r2, #0
    790a:	d001      	beq.n	7910 <_printf_common+0x24>
    790c:	3301      	adds	r3, #1
    790e:	602b      	str	r3, [r5, #0]
    7910:	6823      	ldr	r3, [r4, #0]
    7912:	069b      	lsls	r3, r3, #26
    7914:	d502      	bpl.n	791c <_printf_common+0x30>
    7916:	682b      	ldr	r3, [r5, #0]
    7918:	3302      	adds	r3, #2
    791a:	602b      	str	r3, [r5, #0]
    791c:	2706      	movs	r7, #6
    791e:	6823      	ldr	r3, [r4, #0]
    7920:	401f      	ands	r7, r3
    7922:	d027      	beq.n	7974 <_printf_common+0x88>
    7924:	0023      	movs	r3, r4
    7926:	3343      	adds	r3, #67	; 0x43
    7928:	781b      	ldrb	r3, [r3, #0]
    792a:	1e5a      	subs	r2, r3, #1
    792c:	4193      	sbcs	r3, r2
    792e:	6822      	ldr	r2, [r4, #0]
    7930:	0692      	lsls	r2, r2, #26
    7932:	d430      	bmi.n	7996 <_printf_common+0xaa>
    7934:	0022      	movs	r2, r4
    7936:	9901      	ldr	r1, [sp, #4]
    7938:	3243      	adds	r2, #67	; 0x43
    793a:	9800      	ldr	r0, [sp, #0]
    793c:	9e08      	ldr	r6, [sp, #32]
    793e:	47b0      	blx	r6
    7940:	1c43      	adds	r3, r0, #1
    7942:	d025      	beq.n	7990 <_printf_common+0xa4>
    7944:	2306      	movs	r3, #6
    7946:	6820      	ldr	r0, [r4, #0]
    7948:	682a      	ldr	r2, [r5, #0]
    794a:	68e1      	ldr	r1, [r4, #12]
    794c:	4003      	ands	r3, r0
    794e:	2500      	movs	r5, #0
    7950:	2b04      	cmp	r3, #4
    7952:	d103      	bne.n	795c <_printf_common+0x70>
    7954:	1a8d      	subs	r5, r1, r2
    7956:	43eb      	mvns	r3, r5
    7958:	17db      	asrs	r3, r3, #31
    795a:	401d      	ands	r5, r3
    795c:	68a3      	ldr	r3, [r4, #8]
    795e:	6922      	ldr	r2, [r4, #16]
    7960:	4293      	cmp	r3, r2
    7962:	dd01      	ble.n	7968 <_printf_common+0x7c>
    7964:	1a9b      	subs	r3, r3, r2
    7966:	18ed      	adds	r5, r5, r3
    7968:	2700      	movs	r7, #0
    796a:	42bd      	cmp	r5, r7
    796c:	d120      	bne.n	79b0 <_printf_common+0xc4>
    796e:	2000      	movs	r0, #0
    7970:	e010      	b.n	7994 <_printf_common+0xa8>
    7972:	3701      	adds	r7, #1
    7974:	68e3      	ldr	r3, [r4, #12]
    7976:	682a      	ldr	r2, [r5, #0]
    7978:	1a9b      	subs	r3, r3, r2
    797a:	429f      	cmp	r7, r3
    797c:	dad2      	bge.n	7924 <_printf_common+0x38>
    797e:	0022      	movs	r2, r4
    7980:	2301      	movs	r3, #1
    7982:	3219      	adds	r2, #25
    7984:	9901      	ldr	r1, [sp, #4]
    7986:	9800      	ldr	r0, [sp, #0]
    7988:	9e08      	ldr	r6, [sp, #32]
    798a:	47b0      	blx	r6
    798c:	1c43      	adds	r3, r0, #1
    798e:	d1f0      	bne.n	7972 <_printf_common+0x86>
    7990:	2001      	movs	r0, #1
    7992:	4240      	negs	r0, r0
    7994:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7996:	2030      	movs	r0, #48	; 0x30
    7998:	18e1      	adds	r1, r4, r3
    799a:	3143      	adds	r1, #67	; 0x43
    799c:	7008      	strb	r0, [r1, #0]
    799e:	0021      	movs	r1, r4
    79a0:	1c5a      	adds	r2, r3, #1
    79a2:	3145      	adds	r1, #69	; 0x45
    79a4:	7809      	ldrb	r1, [r1, #0]
    79a6:	18a2      	adds	r2, r4, r2
    79a8:	3243      	adds	r2, #67	; 0x43
    79aa:	3302      	adds	r3, #2
    79ac:	7011      	strb	r1, [r2, #0]
    79ae:	e7c1      	b.n	7934 <_printf_common+0x48>
    79b0:	0022      	movs	r2, r4
    79b2:	2301      	movs	r3, #1
    79b4:	321a      	adds	r2, #26
    79b6:	9901      	ldr	r1, [sp, #4]
    79b8:	9800      	ldr	r0, [sp, #0]
    79ba:	9e08      	ldr	r6, [sp, #32]
    79bc:	47b0      	blx	r6
    79be:	1c43      	adds	r3, r0, #1
    79c0:	d0e6      	beq.n	7990 <_printf_common+0xa4>
    79c2:	3701      	adds	r7, #1
    79c4:	e7d1      	b.n	796a <_printf_common+0x7e>
	...

000079c8 <_printf_i>:
    79c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    79ca:	b08b      	sub	sp, #44	; 0x2c
    79cc:	9206      	str	r2, [sp, #24]
    79ce:	000a      	movs	r2, r1
    79d0:	3243      	adds	r2, #67	; 0x43
    79d2:	9307      	str	r3, [sp, #28]
    79d4:	9005      	str	r0, [sp, #20]
    79d6:	9204      	str	r2, [sp, #16]
    79d8:	7e0a      	ldrb	r2, [r1, #24]
    79da:	000c      	movs	r4, r1
    79dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    79de:	2a6e      	cmp	r2, #110	; 0x6e
    79e0:	d100      	bne.n	79e4 <_printf_i+0x1c>
    79e2:	e08f      	b.n	7b04 <_printf_i+0x13c>
    79e4:	d817      	bhi.n	7a16 <_printf_i+0x4e>
    79e6:	2a63      	cmp	r2, #99	; 0x63
    79e8:	d02c      	beq.n	7a44 <_printf_i+0x7c>
    79ea:	d808      	bhi.n	79fe <_printf_i+0x36>
    79ec:	2a00      	cmp	r2, #0
    79ee:	d100      	bne.n	79f2 <_printf_i+0x2a>
    79f0:	e099      	b.n	7b26 <_printf_i+0x15e>
    79f2:	2a58      	cmp	r2, #88	; 0x58
    79f4:	d054      	beq.n	7aa0 <_printf_i+0xd8>
    79f6:	0026      	movs	r6, r4
    79f8:	3642      	adds	r6, #66	; 0x42
    79fa:	7032      	strb	r2, [r6, #0]
    79fc:	e029      	b.n	7a52 <_printf_i+0x8a>
    79fe:	2a64      	cmp	r2, #100	; 0x64
    7a00:	d001      	beq.n	7a06 <_printf_i+0x3e>
    7a02:	2a69      	cmp	r2, #105	; 0x69
    7a04:	d1f7      	bne.n	79f6 <_printf_i+0x2e>
    7a06:	6821      	ldr	r1, [r4, #0]
    7a08:	681a      	ldr	r2, [r3, #0]
    7a0a:	0608      	lsls	r0, r1, #24
    7a0c:	d523      	bpl.n	7a56 <_printf_i+0x8e>
    7a0e:	1d11      	adds	r1, r2, #4
    7a10:	6019      	str	r1, [r3, #0]
    7a12:	6815      	ldr	r5, [r2, #0]
    7a14:	e025      	b.n	7a62 <_printf_i+0x9a>
    7a16:	2a73      	cmp	r2, #115	; 0x73
    7a18:	d100      	bne.n	7a1c <_printf_i+0x54>
    7a1a:	e088      	b.n	7b2e <_printf_i+0x166>
    7a1c:	d808      	bhi.n	7a30 <_printf_i+0x68>
    7a1e:	2a6f      	cmp	r2, #111	; 0x6f
    7a20:	d029      	beq.n	7a76 <_printf_i+0xae>
    7a22:	2a70      	cmp	r2, #112	; 0x70
    7a24:	d1e7      	bne.n	79f6 <_printf_i+0x2e>
    7a26:	2220      	movs	r2, #32
    7a28:	6809      	ldr	r1, [r1, #0]
    7a2a:	430a      	orrs	r2, r1
    7a2c:	6022      	str	r2, [r4, #0]
    7a2e:	e003      	b.n	7a38 <_printf_i+0x70>
    7a30:	2a75      	cmp	r2, #117	; 0x75
    7a32:	d020      	beq.n	7a76 <_printf_i+0xae>
    7a34:	2a78      	cmp	r2, #120	; 0x78
    7a36:	d1de      	bne.n	79f6 <_printf_i+0x2e>
    7a38:	0022      	movs	r2, r4
    7a3a:	2178      	movs	r1, #120	; 0x78
    7a3c:	3245      	adds	r2, #69	; 0x45
    7a3e:	7011      	strb	r1, [r2, #0]
    7a40:	4a6c      	ldr	r2, [pc, #432]	; (7bf4 <_printf_i+0x22c>)
    7a42:	e030      	b.n	7aa6 <_printf_i+0xde>
    7a44:	000e      	movs	r6, r1
    7a46:	681a      	ldr	r2, [r3, #0]
    7a48:	3642      	adds	r6, #66	; 0x42
    7a4a:	1d11      	adds	r1, r2, #4
    7a4c:	6019      	str	r1, [r3, #0]
    7a4e:	6813      	ldr	r3, [r2, #0]
    7a50:	7033      	strb	r3, [r6, #0]
    7a52:	2301      	movs	r3, #1
    7a54:	e079      	b.n	7b4a <_printf_i+0x182>
    7a56:	0649      	lsls	r1, r1, #25
    7a58:	d5d9      	bpl.n	7a0e <_printf_i+0x46>
    7a5a:	1d11      	adds	r1, r2, #4
    7a5c:	6019      	str	r1, [r3, #0]
    7a5e:	2300      	movs	r3, #0
    7a60:	5ed5      	ldrsh	r5, [r2, r3]
    7a62:	2d00      	cmp	r5, #0
    7a64:	da03      	bge.n	7a6e <_printf_i+0xa6>
    7a66:	232d      	movs	r3, #45	; 0x2d
    7a68:	9a04      	ldr	r2, [sp, #16]
    7a6a:	426d      	negs	r5, r5
    7a6c:	7013      	strb	r3, [r2, #0]
    7a6e:	4b62      	ldr	r3, [pc, #392]	; (7bf8 <_printf_i+0x230>)
    7a70:	270a      	movs	r7, #10
    7a72:	9303      	str	r3, [sp, #12]
    7a74:	e02f      	b.n	7ad6 <_printf_i+0x10e>
    7a76:	6820      	ldr	r0, [r4, #0]
    7a78:	6819      	ldr	r1, [r3, #0]
    7a7a:	0605      	lsls	r5, r0, #24
    7a7c:	d503      	bpl.n	7a86 <_printf_i+0xbe>
    7a7e:	1d08      	adds	r0, r1, #4
    7a80:	6018      	str	r0, [r3, #0]
    7a82:	680d      	ldr	r5, [r1, #0]
    7a84:	e005      	b.n	7a92 <_printf_i+0xca>
    7a86:	0640      	lsls	r0, r0, #25
    7a88:	d5f9      	bpl.n	7a7e <_printf_i+0xb6>
    7a8a:	680d      	ldr	r5, [r1, #0]
    7a8c:	1d08      	adds	r0, r1, #4
    7a8e:	6018      	str	r0, [r3, #0]
    7a90:	b2ad      	uxth	r5, r5
    7a92:	4b59      	ldr	r3, [pc, #356]	; (7bf8 <_printf_i+0x230>)
    7a94:	2708      	movs	r7, #8
    7a96:	9303      	str	r3, [sp, #12]
    7a98:	2a6f      	cmp	r2, #111	; 0x6f
    7a9a:	d018      	beq.n	7ace <_printf_i+0x106>
    7a9c:	270a      	movs	r7, #10
    7a9e:	e016      	b.n	7ace <_printf_i+0x106>
    7aa0:	3145      	adds	r1, #69	; 0x45
    7aa2:	700a      	strb	r2, [r1, #0]
    7aa4:	4a54      	ldr	r2, [pc, #336]	; (7bf8 <_printf_i+0x230>)
    7aa6:	9203      	str	r2, [sp, #12]
    7aa8:	681a      	ldr	r2, [r3, #0]
    7aaa:	6821      	ldr	r1, [r4, #0]
    7aac:	1d10      	adds	r0, r2, #4
    7aae:	6018      	str	r0, [r3, #0]
    7ab0:	6815      	ldr	r5, [r2, #0]
    7ab2:	0608      	lsls	r0, r1, #24
    7ab4:	d522      	bpl.n	7afc <_printf_i+0x134>
    7ab6:	07cb      	lsls	r3, r1, #31
    7ab8:	d502      	bpl.n	7ac0 <_printf_i+0xf8>
    7aba:	2320      	movs	r3, #32
    7abc:	4319      	orrs	r1, r3
    7abe:	6021      	str	r1, [r4, #0]
    7ac0:	2710      	movs	r7, #16
    7ac2:	2d00      	cmp	r5, #0
    7ac4:	d103      	bne.n	7ace <_printf_i+0x106>
    7ac6:	2320      	movs	r3, #32
    7ac8:	6822      	ldr	r2, [r4, #0]
    7aca:	439a      	bics	r2, r3
    7acc:	6022      	str	r2, [r4, #0]
    7ace:	0023      	movs	r3, r4
    7ad0:	2200      	movs	r2, #0
    7ad2:	3343      	adds	r3, #67	; 0x43
    7ad4:	701a      	strb	r2, [r3, #0]
    7ad6:	6863      	ldr	r3, [r4, #4]
    7ad8:	60a3      	str	r3, [r4, #8]
    7ada:	2b00      	cmp	r3, #0
    7adc:	db5c      	blt.n	7b98 <_printf_i+0x1d0>
    7ade:	2204      	movs	r2, #4
    7ae0:	6821      	ldr	r1, [r4, #0]
    7ae2:	4391      	bics	r1, r2
    7ae4:	6021      	str	r1, [r4, #0]
    7ae6:	2d00      	cmp	r5, #0
    7ae8:	d158      	bne.n	7b9c <_printf_i+0x1d4>
    7aea:	9e04      	ldr	r6, [sp, #16]
    7aec:	2b00      	cmp	r3, #0
    7aee:	d064      	beq.n	7bba <_printf_i+0x1f2>
    7af0:	0026      	movs	r6, r4
    7af2:	9b03      	ldr	r3, [sp, #12]
    7af4:	3642      	adds	r6, #66	; 0x42
    7af6:	781b      	ldrb	r3, [r3, #0]
    7af8:	7033      	strb	r3, [r6, #0]
    7afa:	e05e      	b.n	7bba <_printf_i+0x1f2>
    7afc:	0648      	lsls	r0, r1, #25
    7afe:	d5da      	bpl.n	7ab6 <_printf_i+0xee>
    7b00:	b2ad      	uxth	r5, r5
    7b02:	e7d8      	b.n	7ab6 <_printf_i+0xee>
    7b04:	6809      	ldr	r1, [r1, #0]
    7b06:	681a      	ldr	r2, [r3, #0]
    7b08:	0608      	lsls	r0, r1, #24
    7b0a:	d505      	bpl.n	7b18 <_printf_i+0x150>
    7b0c:	1d11      	adds	r1, r2, #4
    7b0e:	6019      	str	r1, [r3, #0]
    7b10:	6813      	ldr	r3, [r2, #0]
    7b12:	6962      	ldr	r2, [r4, #20]
    7b14:	601a      	str	r2, [r3, #0]
    7b16:	e006      	b.n	7b26 <_printf_i+0x15e>
    7b18:	0649      	lsls	r1, r1, #25
    7b1a:	d5f7      	bpl.n	7b0c <_printf_i+0x144>
    7b1c:	1d11      	adds	r1, r2, #4
    7b1e:	6019      	str	r1, [r3, #0]
    7b20:	6813      	ldr	r3, [r2, #0]
    7b22:	8aa2      	ldrh	r2, [r4, #20]
    7b24:	801a      	strh	r2, [r3, #0]
    7b26:	2300      	movs	r3, #0
    7b28:	9e04      	ldr	r6, [sp, #16]
    7b2a:	6123      	str	r3, [r4, #16]
    7b2c:	e054      	b.n	7bd8 <_printf_i+0x210>
    7b2e:	681a      	ldr	r2, [r3, #0]
    7b30:	1d11      	adds	r1, r2, #4
    7b32:	6019      	str	r1, [r3, #0]
    7b34:	6816      	ldr	r6, [r2, #0]
    7b36:	2100      	movs	r1, #0
    7b38:	6862      	ldr	r2, [r4, #4]
    7b3a:	0030      	movs	r0, r6
    7b3c:	f000 f8cc 	bl	7cd8 <memchr>
    7b40:	2800      	cmp	r0, #0
    7b42:	d001      	beq.n	7b48 <_printf_i+0x180>
    7b44:	1b80      	subs	r0, r0, r6
    7b46:	6060      	str	r0, [r4, #4]
    7b48:	6863      	ldr	r3, [r4, #4]
    7b4a:	6123      	str	r3, [r4, #16]
    7b4c:	2300      	movs	r3, #0
    7b4e:	9a04      	ldr	r2, [sp, #16]
    7b50:	7013      	strb	r3, [r2, #0]
    7b52:	e041      	b.n	7bd8 <_printf_i+0x210>
    7b54:	6923      	ldr	r3, [r4, #16]
    7b56:	0032      	movs	r2, r6
    7b58:	9906      	ldr	r1, [sp, #24]
    7b5a:	9805      	ldr	r0, [sp, #20]
    7b5c:	9d07      	ldr	r5, [sp, #28]
    7b5e:	47a8      	blx	r5
    7b60:	1c43      	adds	r3, r0, #1
    7b62:	d043      	beq.n	7bec <_printf_i+0x224>
    7b64:	6823      	ldr	r3, [r4, #0]
    7b66:	2500      	movs	r5, #0
    7b68:	079b      	lsls	r3, r3, #30
    7b6a:	d40f      	bmi.n	7b8c <_printf_i+0x1c4>
    7b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7b6e:	68e0      	ldr	r0, [r4, #12]
    7b70:	4298      	cmp	r0, r3
    7b72:	da3d      	bge.n	7bf0 <_printf_i+0x228>
    7b74:	0018      	movs	r0, r3
    7b76:	e03b      	b.n	7bf0 <_printf_i+0x228>
    7b78:	0022      	movs	r2, r4
    7b7a:	2301      	movs	r3, #1
    7b7c:	3219      	adds	r2, #25
    7b7e:	9906      	ldr	r1, [sp, #24]
    7b80:	9805      	ldr	r0, [sp, #20]
    7b82:	9e07      	ldr	r6, [sp, #28]
    7b84:	47b0      	blx	r6
    7b86:	1c43      	adds	r3, r0, #1
    7b88:	d030      	beq.n	7bec <_printf_i+0x224>
    7b8a:	3501      	adds	r5, #1
    7b8c:	68e3      	ldr	r3, [r4, #12]
    7b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7b90:	1a9b      	subs	r3, r3, r2
    7b92:	429d      	cmp	r5, r3
    7b94:	dbf0      	blt.n	7b78 <_printf_i+0x1b0>
    7b96:	e7e9      	b.n	7b6c <_printf_i+0x1a4>
    7b98:	2d00      	cmp	r5, #0
    7b9a:	d0a9      	beq.n	7af0 <_printf_i+0x128>
    7b9c:	9e04      	ldr	r6, [sp, #16]
    7b9e:	0028      	movs	r0, r5
    7ba0:	0039      	movs	r1, r7
    7ba2:	f7fd f971 	bl	4e88 <__aeabi_uidivmod>
    7ba6:	9b03      	ldr	r3, [sp, #12]
    7ba8:	3e01      	subs	r6, #1
    7baa:	5c5b      	ldrb	r3, [r3, r1]
    7bac:	0028      	movs	r0, r5
    7bae:	7033      	strb	r3, [r6, #0]
    7bb0:	0039      	movs	r1, r7
    7bb2:	f7fd f8e3 	bl	4d7c <__udivsi3>
    7bb6:	1e05      	subs	r5, r0, #0
    7bb8:	d1f1      	bne.n	7b9e <_printf_i+0x1d6>
    7bba:	2f08      	cmp	r7, #8
    7bbc:	d109      	bne.n	7bd2 <_printf_i+0x20a>
    7bbe:	6823      	ldr	r3, [r4, #0]
    7bc0:	07db      	lsls	r3, r3, #31
    7bc2:	d506      	bpl.n	7bd2 <_printf_i+0x20a>
    7bc4:	6863      	ldr	r3, [r4, #4]
    7bc6:	6922      	ldr	r2, [r4, #16]
    7bc8:	4293      	cmp	r3, r2
    7bca:	dc02      	bgt.n	7bd2 <_printf_i+0x20a>
    7bcc:	2330      	movs	r3, #48	; 0x30
    7bce:	3e01      	subs	r6, #1
    7bd0:	7033      	strb	r3, [r6, #0]
    7bd2:	9b04      	ldr	r3, [sp, #16]
    7bd4:	1b9b      	subs	r3, r3, r6
    7bd6:	6123      	str	r3, [r4, #16]
    7bd8:	9b07      	ldr	r3, [sp, #28]
    7bda:	aa09      	add	r2, sp, #36	; 0x24
    7bdc:	9300      	str	r3, [sp, #0]
    7bde:	0021      	movs	r1, r4
    7be0:	9b06      	ldr	r3, [sp, #24]
    7be2:	9805      	ldr	r0, [sp, #20]
    7be4:	f7ff fe82 	bl	78ec <_printf_common>
    7be8:	1c43      	adds	r3, r0, #1
    7bea:	d1b3      	bne.n	7b54 <_printf_i+0x18c>
    7bec:	2001      	movs	r0, #1
    7bee:	4240      	negs	r0, r0
    7bf0:	b00b      	add	sp, #44	; 0x2c
    7bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7bf4:	00008eaa 	.word	0x00008eaa
    7bf8:	00008e99 	.word	0x00008e99

00007bfc <_putc_r>:
    7bfc:	b570      	push	{r4, r5, r6, lr}
    7bfe:	0006      	movs	r6, r0
    7c00:	000d      	movs	r5, r1
    7c02:	0014      	movs	r4, r2
    7c04:	2800      	cmp	r0, #0
    7c06:	d004      	beq.n	7c12 <_putc_r+0x16>
    7c08:	6983      	ldr	r3, [r0, #24]
    7c0a:	2b00      	cmp	r3, #0
    7c0c:	d101      	bne.n	7c12 <_putc_r+0x16>
    7c0e:	f7ff faab 	bl	7168 <__sinit>
    7c12:	4b12      	ldr	r3, [pc, #72]	; (7c5c <_putc_r+0x60>)
    7c14:	429c      	cmp	r4, r3
    7c16:	d111      	bne.n	7c3c <_putc_r+0x40>
    7c18:	6874      	ldr	r4, [r6, #4]
    7c1a:	68a3      	ldr	r3, [r4, #8]
    7c1c:	3b01      	subs	r3, #1
    7c1e:	60a3      	str	r3, [r4, #8]
    7c20:	2b00      	cmp	r3, #0
    7c22:	da05      	bge.n	7c30 <_putc_r+0x34>
    7c24:	69a2      	ldr	r2, [r4, #24]
    7c26:	4293      	cmp	r3, r2
    7c28:	db12      	blt.n	7c50 <_putc_r+0x54>
    7c2a:	b2eb      	uxtb	r3, r5
    7c2c:	2b0a      	cmp	r3, #10
    7c2e:	d00f      	beq.n	7c50 <_putc_r+0x54>
    7c30:	6823      	ldr	r3, [r4, #0]
    7c32:	b2e8      	uxtb	r0, r5
    7c34:	1c5a      	adds	r2, r3, #1
    7c36:	6022      	str	r2, [r4, #0]
    7c38:	701d      	strb	r5, [r3, #0]
    7c3a:	bd70      	pop	{r4, r5, r6, pc}
    7c3c:	4b08      	ldr	r3, [pc, #32]	; (7c60 <_putc_r+0x64>)
    7c3e:	429c      	cmp	r4, r3
    7c40:	d101      	bne.n	7c46 <_putc_r+0x4a>
    7c42:	68b4      	ldr	r4, [r6, #8]
    7c44:	e7e9      	b.n	7c1a <_putc_r+0x1e>
    7c46:	4b07      	ldr	r3, [pc, #28]	; (7c64 <_putc_r+0x68>)
    7c48:	429c      	cmp	r4, r3
    7c4a:	d1e6      	bne.n	7c1a <_putc_r+0x1e>
    7c4c:	68f4      	ldr	r4, [r6, #12]
    7c4e:	e7e4      	b.n	7c1a <_putc_r+0x1e>
    7c50:	0022      	movs	r2, r4
    7c52:	0029      	movs	r1, r5
    7c54:	0030      	movs	r0, r6
    7c56:	f7ff f89d 	bl	6d94 <__swbuf_r>
    7c5a:	e7ee      	b.n	7c3a <_putc_r+0x3e>
    7c5c:	00008e48 	.word	0x00008e48
    7c60:	00008e68 	.word	0x00008e68
    7c64:	00008e28 	.word	0x00008e28

00007c68 <_read_r>:
    7c68:	b570      	push	{r4, r5, r6, lr}
    7c6a:	0005      	movs	r5, r0
    7c6c:	0008      	movs	r0, r1
    7c6e:	0011      	movs	r1, r2
    7c70:	2200      	movs	r2, #0
    7c72:	4c06      	ldr	r4, [pc, #24]	; (7c8c <_read_r+0x24>)
    7c74:	6022      	str	r2, [r4, #0]
    7c76:	001a      	movs	r2, r3
    7c78:	f7fc ffd2 	bl	4c20 <_read>
    7c7c:	1c43      	adds	r3, r0, #1
    7c7e:	d103      	bne.n	7c88 <_read_r+0x20>
    7c80:	6823      	ldr	r3, [r4, #0]
    7c82:	2b00      	cmp	r3, #0
    7c84:	d000      	beq.n	7c88 <_read_r+0x20>
    7c86:	602b      	str	r3, [r5, #0]
    7c88:	bd70      	pop	{r4, r5, r6, pc}
    7c8a:	46c0      	nop			; (mov r8, r8)
    7c8c:	20000d78 	.word	0x20000d78

00007c90 <_fstat_r>:
    7c90:	2300      	movs	r3, #0
    7c92:	b570      	push	{r4, r5, r6, lr}
    7c94:	4c06      	ldr	r4, [pc, #24]	; (7cb0 <_fstat_r+0x20>)
    7c96:	0005      	movs	r5, r0
    7c98:	0008      	movs	r0, r1
    7c9a:	0011      	movs	r1, r2
    7c9c:	6023      	str	r3, [r4, #0]
    7c9e:	f7fd f81e 	bl	4cde <_fstat>
    7ca2:	1c43      	adds	r3, r0, #1
    7ca4:	d103      	bne.n	7cae <_fstat_r+0x1e>
    7ca6:	6823      	ldr	r3, [r4, #0]
    7ca8:	2b00      	cmp	r3, #0
    7caa:	d000      	beq.n	7cae <_fstat_r+0x1e>
    7cac:	602b      	str	r3, [r5, #0]
    7cae:	bd70      	pop	{r4, r5, r6, pc}
    7cb0:	20000d78 	.word	0x20000d78

00007cb4 <_isatty_r>:
    7cb4:	2300      	movs	r3, #0
    7cb6:	b570      	push	{r4, r5, r6, lr}
    7cb8:	4c06      	ldr	r4, [pc, #24]	; (7cd4 <_isatty_r+0x20>)
    7cba:	0005      	movs	r5, r0
    7cbc:	0008      	movs	r0, r1
    7cbe:	6023      	str	r3, [r4, #0]
    7cc0:	f7fd f812 	bl	4ce8 <_isatty>
    7cc4:	1c43      	adds	r3, r0, #1
    7cc6:	d103      	bne.n	7cd0 <_isatty_r+0x1c>
    7cc8:	6823      	ldr	r3, [r4, #0]
    7cca:	2b00      	cmp	r3, #0
    7ccc:	d000      	beq.n	7cd0 <_isatty_r+0x1c>
    7cce:	602b      	str	r3, [r5, #0]
    7cd0:	bd70      	pop	{r4, r5, r6, pc}
    7cd2:	46c0      	nop			; (mov r8, r8)
    7cd4:	20000d78 	.word	0x20000d78

00007cd8 <memchr>:
    7cd8:	b2c9      	uxtb	r1, r1
    7cda:	1882      	adds	r2, r0, r2
    7cdc:	4290      	cmp	r0, r2
    7cde:	d101      	bne.n	7ce4 <memchr+0xc>
    7ce0:	2000      	movs	r0, #0
    7ce2:	4770      	bx	lr
    7ce4:	7803      	ldrb	r3, [r0, #0]
    7ce6:	428b      	cmp	r3, r1
    7ce8:	d0fb      	beq.n	7ce2 <memchr+0xa>
    7cea:	3001      	adds	r0, #1
    7cec:	e7f6      	b.n	7cdc <memchr+0x4>

00007cee <_realloc_r>:
    7cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cf0:	0007      	movs	r7, r0
    7cf2:	000d      	movs	r5, r1
    7cf4:	0016      	movs	r6, r2
    7cf6:	2900      	cmp	r1, #0
    7cf8:	d105      	bne.n	7d06 <_realloc_r+0x18>
    7cfa:	0011      	movs	r1, r2
    7cfc:	f7fe fe0c 	bl	6918 <_malloc_r>
    7d00:	0004      	movs	r4, r0
    7d02:	0020      	movs	r0, r4
    7d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d06:	2a00      	cmp	r2, #0
    7d08:	d103      	bne.n	7d12 <_realloc_r+0x24>
    7d0a:	f7fe fdbb 	bl	6884 <_free_r>
    7d0e:	0034      	movs	r4, r6
    7d10:	e7f7      	b.n	7d02 <_realloc_r+0x14>
    7d12:	f000 f812 	bl	7d3a <_malloc_usable_size_r>
    7d16:	002c      	movs	r4, r5
    7d18:	4286      	cmp	r6, r0
    7d1a:	d9f2      	bls.n	7d02 <_realloc_r+0x14>
    7d1c:	0031      	movs	r1, r6
    7d1e:	0038      	movs	r0, r7
    7d20:	f7fe fdfa 	bl	6918 <_malloc_r>
    7d24:	1e04      	subs	r4, r0, #0
    7d26:	d0ec      	beq.n	7d02 <_realloc_r+0x14>
    7d28:	0029      	movs	r1, r5
    7d2a:	0032      	movs	r2, r6
    7d2c:	f7fe fd87 	bl	683e <memcpy>
    7d30:	0029      	movs	r1, r5
    7d32:	0038      	movs	r0, r7
    7d34:	f7fe fda6 	bl	6884 <_free_r>
    7d38:	e7e3      	b.n	7d02 <_realloc_r+0x14>

00007d3a <_malloc_usable_size_r>:
    7d3a:	1f0b      	subs	r3, r1, #4
    7d3c:	681b      	ldr	r3, [r3, #0]
    7d3e:	1f18      	subs	r0, r3, #4
    7d40:	2b00      	cmp	r3, #0
    7d42:	da01      	bge.n	7d48 <_malloc_usable_size_r+0xe>
    7d44:	580b      	ldr	r3, [r1, r0]
    7d46:	18c0      	adds	r0, r0, r3
    7d48:	4770      	bx	lr
    7d4a:	0000      	movs	r0, r0
    7d4c:	20746f4e 	.word	0x20746f4e
    7d50:	6d6d6f43 	.word	0x6d6d6f43
    7d54:	63696e75 	.word	0x63696e75
    7d58:	6e697461 	.word	0x6e697461
    7d5c:	68632067 	.word	0x68632067
    7d60:	206b6365 	.word	0x206b6365
    7d64:	20433249 	.word	0x20433249
    7d68:	72646461 	.word	0x72646461
    7d6c:	0d737365 	.word	0x0d737365
    7d70:	00000000 	.word	0x00000000
    7d74:	54534f48 	.word	0x54534f48
    7d78:	00000d20 	.word	0x00000d20
    7d7c:	20746553 	.word	0x20746553
    7d80:	54534f48 	.word	0x54534f48
    7d84:	43324920 	.word	0x43324920
    7d88:	64646120 	.word	0x64646120
    7d8c:	73736572 	.word	0x73736572
    7d90:	0000000d 	.word	0x0000000d
    7d94:	646e6152 	.word	0x646e6152
    7d98:	4e206d6f 	.word	0x4e206d6f
    7d9c:	65626d75 	.word	0x65626d75
    7da0:	65472072 	.word	0x65472072
    7da4:	6172656e 	.word	0x6172656e
    7da8:	6e6f6974 	.word	0x6e6f6974
    7dac:	69616620 	.word	0x69616620
    7db0:	0d64656c 	.word	0x0d64656c
    7db4:	00000000 	.word	0x00000000
    7db8:	54534f48 	.word	0x54534f48
    7dbc:	6553203a 	.word	0x6553203a
    7dc0:	6e69646e 	.word	0x6e69646e
    7dc4:	61522067 	.word	0x61522067
    7dc8:	6d6f646e 	.word	0x6d6f646e
    7dcc:	61684320 	.word	0x61684320
    7dd0:	6e656c6c 	.word	0x6e656c6c
    7dd4:	74206567 	.word	0x74206567
    7dd8:	6c43206f 	.word	0x6c43206f
    7ddc:	746e6569 	.word	0x746e6569
    7de0:	0a0d0a3a 	.word	0x0a0d0a3a
    7de4:	0a0d7325 	.word	0x0a0d7325
    7de8:	00000000 	.word	0x00000000
    7dec:	45494c43 	.word	0x45494c43
    7df0:	000d544e 	.word	0x000d544e
    7df4:	20746553 	.word	0x20746553
    7df8:	45494c43 	.word	0x45494c43
    7dfc:	4920544e 	.word	0x4920544e
    7e00:	61204332 	.word	0x61204332
    7e04:	65726464 	.word	0x65726464
    7e08:	000d7373 	.word	0x000d7373
    7e0c:	45494c43 	.word	0x45494c43
    7e10:	203a544e 	.word	0x203a544e
    7e14:	6174624f 	.word	0x6174624f
    7e18:	6e696e69 	.word	0x6e696e69
    7e1c:	414d2067 	.word	0x414d2067
    7e20:	6f662043 	.word	0x6f662043
    7e24:	68742072 	.word	0x68742072
    7e28:	69442065 	.word	0x69442065
    7e2c:	73726576 	.word	0x73726576
    7e30:	65696669 	.word	0x65696669
    7e34:	654b2064 	.word	0x654b2064
    7e38:	6e692079 	.word	0x6e692079
    7e3c:	6f6c5320 	.word	0x6f6c5320
    7e40:	0d312074 	.word	0x0d312074
    7e44:	00000000 	.word	0x00000000
    7e48:	2043414d 	.word	0x2043414d
    7e4c:	6c696166 	.word	0x6c696166
    7e50:	000d6465 	.word	0x000d6465
    7e54:	70736552 	.word	0x70736552
    7e58:	69646e6f 	.word	0x69646e6f
    7e5c:	4320676e 	.word	0x4320676e
    7e60:	6c6c6168 	.word	0x6c6c6168
    7e64:	65676e65 	.word	0x65676e65
    7e68:	6f726620 	.word	0x6f726620
    7e6c:	4f48206d 	.word	0x4f48206d
    7e70:	0a3a5453 	.word	0x0a3a5453
    7e74:	73250a0d 	.word	0x73250a0d
    7e78:	00000a0d 	.word	0x00000a0d
    7e7c:	64616552 	.word	0x64616552
    7e80:	72655320 	.word	0x72655320
    7e84:	206c6169 	.word	0x206c6169
    7e88:	626d754e 	.word	0x626d754e
    7e8c:	66207265 	.word	0x66207265
    7e90:	656c6961 	.word	0x656c6961
    7e94:	00000d64 	.word	0x00000d64
    7e98:	45494c43 	.word	0x45494c43
    7e9c:	203a544e 	.word	0x203a544e
    7ea0:	64616552 	.word	0x64616552
    7ea4:	20676e69 	.word	0x20676e69
    7ea8:	65696c43 	.word	0x65696c43
    7eac:	5320746e 	.word	0x5320746e
    7eb0:	61697265 	.word	0x61697265
    7eb4:	6d754e6c 	.word	0x6d754e6c
    7eb8:	3a726562 	.word	0x3a726562
    7ebc:	250a0d0a 	.word	0x250a0d0a
    7ec0:	000a0d73 	.word	0x000a0d73
    7ec4:	646e6553 	.word	0x646e6553
    7ec8:	20676e69 	.word	0x20676e69
    7ecc:	48206f74 	.word	0x48206f74
    7ed0:	0d54534f 	.word	0x0d54534f
    7ed4:	00000000 	.word	0x00000000
    7ed8:	54534f48 	.word	0x54534f48
    7edc:	6150203a 	.word	0x6150203a
    7ee0:	6e696464 	.word	0x6e696464
    7ee4:	65532067 	.word	0x65532067
    7ee8:	6c616972 	.word	0x6c616972
    7eec:	6d754e20 	.word	0x6d754e20
    7ef0:	20726562 	.word	0x20726562
    7ef4:	6d6f7266 	.word	0x6d6f7266
    7ef8:	494c4320 	.word	0x494c4320
    7efc:	20544e45 	.word	0x20544e45
    7f00:	68746977 	.word	0x68746977
    7f04:	37783020 	.word	0x37783020
    7f08:	00000d37 	.word	0x00000d37
    7f0c:	54534f48 	.word	0x54534f48
    7f10:	6461503a 	.word	0x6461503a
    7f14:	20646564 	.word	0x20646564
    7f18:	69726553 	.word	0x69726553
    7f1c:	4e206c61 	.word	0x4e206c61
    7f20:	65626d75 	.word	0x65626d75
    7f24:	0d0a3a72 	.word	0x0d0a3a72
    7f28:	0d73250a 	.word	0x0d73250a
    7f2c:	0000000a 	.word	0x0000000a
    7f30:	54534f48 	.word	0x54534f48
    7f34:	7265503a 	.word	0x7265503a
    7f38:	6d726f66 	.word	0x6d726f66
    7f3c:	20676e69 	.word	0x20676e69
    7f40:	73736150 	.word	0x73736150
    7f44:	6f685420 	.word	0x6f685420
    7f48:	20686775 	.word	0x20686775
    7f4c:	636e6f4e 	.word	0x636e6f4e
    7f50:	6f432065 	.word	0x6f432065
    7f54:	6e616d6d 	.word	0x6e616d6d
    7f58:	00000d64 	.word	0x00000d64
    7f5c:	636e6f4e 	.word	0x636e6f4e
    7f60:	6f432065 	.word	0x6f432065
    7f64:	6e616d6d 	.word	0x6e616d6d
    7f68:	61662064 	.word	0x61662064
    7f6c:	64656c69 	.word	0x64656c69
    7f70:	0000000d 	.word	0x0000000d
    7f74:	6d65540a 	.word	0x6d65540a
    7f78:	79654b70 	.word	0x79654b70
    7f7c:	756f5320 	.word	0x756f5320
    7f80:	46656372 	.word	0x46656372
    7f84:	2067616c 	.word	0x2067616c
    7f88:	0d746553 	.word	0x0d746553
    7f8c:	00000000 	.word	0x00000000
    7f90:	54534f48 	.word	0x54534f48
    7f94:	7265503a 	.word	0x7265503a
    7f98:	6d726f66 	.word	0x6d726f66
    7f9c:	20676e69 	.word	0x20676e69
    7fa0:	446e6547 	.word	0x446e6547
    7fa4:	43206769 	.word	0x43206769
    7fa8:	616d6d6f 	.word	0x616d6d6f
    7fac:	202c646e 	.word	0x202c646e
    7fb0:	73696874 	.word	0x73696874
    7fb4:	74657320 	.word	0x74657320
    7fb8:	65542073 	.word	0x65542073
    7fbc:	654b706d 	.word	0x654b706d
    7fc0:	69772079 	.word	0x69772079
    7fc4:	74206874 	.word	0x74206874
    7fc8:	72206568 	.word	0x72206568
    7fcc:	20746f6f 	.word	0x20746f6f
    7fd0:	2079656b 	.word	0x2079656b
    7fd4:	73206e69 	.word	0x73206e69
    7fd8:	20746f6c 	.word	0x20746f6c
    7fdc:	00000d30 	.word	0x00000d30
    7fe0:	446e6547 	.word	0x446e6547
    7fe4:	43206769 	.word	0x43206769
    7fe8:	616d6d6f 	.word	0x616d6d6f
    7fec:	6620646e 	.word	0x6620646e
    7ff0:	656c6961 	.word	0x656c6961
    7ff4:	00000d64 	.word	0x00000d64
    7ff8:	446e6547 	.word	0x446e6547
    7ffc:	43206769 	.word	0x43206769
    8000:	616d6d6f 	.word	0x616d6d6f
    8004:	6520646e 	.word	0x6520646e
    8008:	75636578 	.word	0x75636578
    800c:	0d646574 	.word	0x0d646574
    8010:	00000000 	.word	0x00000000
    8014:	54534f48 	.word	0x54534f48
    8018:	6550203a 	.word	0x6550203a
    801c:	726f6672 	.word	0x726f6672
    8020:	676e696d 	.word	0x676e696d
    8024:	65684320 	.word	0x65684320
    8028:	414d6b63 	.word	0x414d6b63
    802c:	73752043 	.word	0x73752043
    8030:	20676e69 	.word	0x20676e69
    8034:	646e6152 	.word	0x646e6152
    8038:	43206d6f 	.word	0x43206d6f
    803c:	6c6c6168 	.word	0x6c6c6168
    8040:	65676e65 	.word	0x65676e65
    8044:	646e6120 	.word	0x646e6120
    8048:	72654420 	.word	0x72654420
    804c:	20657669 	.word	0x20657669
    8050:	2079654b 	.word	0x2079654b
    8054:	706d6f63 	.word	0x706d6f63
    8058:	64657475 	.word	0x64657475
    805c:	746e6920 	.word	0x746e6920
    8060:	616e7265 	.word	0x616e7265
    8064:	20796c6c 	.word	0x20796c6c
    8068:	48207962 	.word	0x48207962
    806c:	0d54534f 	.word	0x0d54534f
    8070:	00000000 	.word	0x00000000
    8074:	45494c43 	.word	0x45494c43
    8078:	4920544e 	.word	0x4920544e
    807c:	4f4e2053 	.word	0x4f4e2053
    8080:	55412054 	.word	0x55412054
    8084:	4e454854 	.word	0x4e454854
    8088:	0d434954 	.word	0x0d434954
    808c:	00000000 	.word	0x00000000
    8090:	45494c43 	.word	0x45494c43
    8094:	4920544e 	.word	0x4920544e
    8098:	55412053 	.word	0x55412053
    809c:	4e454854 	.word	0x4e454854
    80a0:	0d434954 	.word	0x0d434954
    80a4:	00000000 	.word	0x00000000
    80a8:	45494c43 	.word	0x45494c43
    80ac:	203a544e 	.word	0x203a544e
    80b0:	64616552 	.word	0x64616552
    80b4:	20676e69 	.word	0x20676e69
    80b8:	46657355 	.word	0x46657355
    80bc:	2067616c 	.word	0x2067616c
    80c0:	6e756f63 	.word	0x6e756f63
    80c4:	0d726574 	.word	0x0d726574
    80c8:	00000000 	.word	0x00000000
    80cc:	45494c43 	.word	0x45494c43
    80d0:	203a544e 	.word	0x203a544e
    80d4:	73696854 	.word	0x73696854
    80d8:	20736920 	.word	0x20736920
    80dc:	20656874 	.word	0x20656874
    80e0:	6f636553 	.word	0x6f636553
    80e4:	7261646e 	.word	0x7261646e
    80e8:	6f432079 	.word	0x6f432079
    80ec:	65746e75 	.word	0x65746e75
    80f0:	6f632072 	.word	0x6f632072
    80f4:	65746e75 	.word	0x65746e75
    80f8:	54202e72 	.word	0x54202e72
    80fc:	6320706f 	.word	0x6320706f
    8100:	746e756f 	.word	0x746e756f
    8104:	20736920 	.word	0x20736920
    8108:	00000d38 	.word	0x00000d38
    810c:	64616552 	.word	0x64616552
    8110:	20676e69 	.word	0x20676e69
    8114:	46657355 	.word	0x46657355
    8118:	2067616c 	.word	0x2067616c
    811c:	6e756f63 	.word	0x6e756f63
    8120:	20726574 	.word	0x20726574
    8124:	6c696166 	.word	0x6c696166
    8128:	000d6465 	.word	0x000d6465
    812c:	20656854 	.word	0x20656854
    8130:	6f636573 	.word	0x6f636573
    8134:	7261646e 	.word	0x7261646e
    8138:	6f632079 	.word	0x6f632079
    813c:	65746e75 	.word	0x65746e75
    8140:	61762072 	.word	0x61762072
    8144:	2065756c 	.word	0x2065756c
    8148:	203a7369 	.word	0x203a7369
    814c:	31302325 	.word	0x31302325
    8150:	000a0d78 	.word	0x000a0d78
    8154:	45494c43 	.word	0x45494c43
    8158:	203a544e 	.word	0x203a544e
    815c:	64616552 	.word	0x64616552
    8160:	20676e69 	.word	0x20676e69
    8164:	7473614c 	.word	0x7473614c
    8168:	79654b20 	.word	0x79654b20
    816c:	65735520 	.word	0x65735520
    8170:	54202c64 	.word	0x54202c64
    8174:	20736968 	.word	0x20736968
    8178:	74207369 	.word	0x74207369
    817c:	6d206568 	.word	0x6d206568
    8180:	206e6961 	.word	0x206e6961
    8184:	6e756f63 	.word	0x6e756f63
    8188:	2e726574 	.word	0x2e726574
    818c:	706f5420 	.word	0x706f5420
    8190:	756f6320 	.word	0x756f6320
    8194:	6920746e 	.word	0x6920746e
    8198:	32312073 	.word	0x32312073
    819c:	00000d38 	.word	0x00000d38
    81a0:	45494c43 	.word	0x45494c43
    81a4:	203a544e 	.word	0x203a544e
    81a8:	73696854 	.word	0x73696854
    81ac:	61686320 	.word	0x61686320
    81b0:	6e696e69 	.word	0x6e696e69
    81b4:	65742067 	.word	0x65742067
    81b8:	696e6863 	.word	0x696e6863
    81bc:	20657571 	.word	0x20657571
    81c0:	6c6c6977 	.word	0x6c6c6977
    81c4:	6c6c6120 	.word	0x6c6c6120
    81c8:	7420776f 	.word	0x7420776f
    81cc:	63206568 	.word	0x63206568
    81d0:	746e756f 	.word	0x746e756f
    81d4:	74207265 	.word	0x74207265
    81d8:	6572206f 	.word	0x6572206f
    81dc:	20686361 	.word	0x20686361
    81e0:	78383231 	.word	0x78383231
    81e4:	54202e38 	.word	0x54202e38
    81e8:	6920706f 	.word	0x6920706f
    81ec:	30312073 	.word	0x30312073
    81f0:	000d3432 	.word	0x000d3432
    81f4:	20657355 	.word	0x20657355
    81f8:	67616c46 	.word	0x67616c46
    81fc:	3d203120 	.word	0x3d203120
    8200:	202c3020 	.word	0x202c3020
    8204:	66726570 	.word	0x66726570
    8208:	696d726f 	.word	0x696d726f
    820c:	4420676e 	.word	0x4420676e
    8210:	76697265 	.word	0x76697265
    8214:	79654b65 	.word	0x79654b65
    8218:	646d6320 	.word	0x646d6320
    821c:	206f7420 	.word	0x206f7420
    8220:	6c6c6f72 	.word	0x6c6c6f72
    8224:	0000000d 	.word	0x0000000d
    8228:	73696854 	.word	0x73696854
    822c:	6f727020 	.word	0x6f727020
    8230:	73736563 	.word	0x73736563
    8234:	6c697720 	.word	0x6c697720
    8238:	6572206c 	.word	0x6572206c
    823c:	20746573 	.word	0x20746573
    8240:	20656874 	.word	0x20656874
    8244:	6f636573 	.word	0x6f636573
    8248:	7261646e 	.word	0x7261646e
    824c:	6f632079 	.word	0x6f632079
    8250:	65746e75 	.word	0x65746e75
    8254:	6f742072 	.word	0x6f742072
    8258:	76206120 	.word	0x76206120
    825c:	65756c61 	.word	0x65756c61
    8260:	20666f20 	.word	0x20666f20
    8264:	30282038 	.word	0x30282038
    8268:	29464678 	.word	0x29464678
    826c:	0000000d 	.word	0x0000000d
    8270:	77207449 	.word	0x77207449
    8274:	206c6c69 	.word	0x206c6c69
    8278:	6f736c61 	.word	0x6f736c61
    827c:	63656420 	.word	0x63656420
    8280:	656d6572 	.word	0x656d6572
    8284:	7420746e 	.word	0x7420746e
    8288:	6d206568 	.word	0x6d206568
    828c:	206e6961 	.word	0x206e6961
    8290:	6e756f63 	.word	0x6e756f63
    8294:	20726574 	.word	0x20726574
    8298:	31207962 	.word	0x31207962
    829c:	0000000d 	.word	0x0000000d
    82a0:	706d6554 	.word	0x706d6554
    82a4:	2079654b 	.word	0x2079654b
    82a8:	72756f53 	.word	0x72756f53
    82ac:	6c466563 	.word	0x6c466563
    82b0:	53206761 	.word	0x53206761
    82b4:	000d7465 	.word	0x000d7465
    82b8:	45494c43 	.word	0x45494c43
    82bc:	203a544e 	.word	0x203a544e
    82c0:	6174624f 	.word	0x6174624f
    82c4:	6e696e69 	.word	0x6e696e69
    82c8:	414d2067 	.word	0x414d2067
    82cc:	6f662043 	.word	0x6f662043
    82d0:	68742072 	.word	0x68742072
    82d4:	6f632065 	.word	0x6f632065
    82d8:	6d75736e 	.word	0x6d75736e
    82dc:	6f697470 	.word	0x6f697470
    82e0:	6f63206e 	.word	0x6f63206e
    82e4:	69746e75 	.word	0x69746e75
    82e8:	4420676e 	.word	0x4420676e
    82ec:	72657669 	.word	0x72657669
    82f0:	69666973 	.word	0x69666973
    82f4:	4b206465 	.word	0x4b206465
    82f8:	69207965 	.word	0x69207965
    82fc:	6c53206e 	.word	0x6c53206e
    8300:	3720746f 	.word	0x3720746f
    8304:	0a0d0a3a 	.word	0x0a0d0a3a
    8308:	0a0d7325 	.word	0x0a0d7325
    830c:	00000000 	.word	0x00000000
    8310:	45494c43 	.word	0x45494c43
    8314:	203a544e 	.word	0x203a544e
    8318:	64616552 	.word	0x64616552
    831c:	20676e69 	.word	0x20676e69
    8320:	65696c43 	.word	0x65696c43
    8324:	5320746e 	.word	0x5320746e
    8328:	61697265 	.word	0x61697265
    832c:	754e206c 	.word	0x754e206c
    8330:	7265626d 	.word	0x7265626d
    8334:	0a0d0a3a 	.word	0x0a0d0a3a
    8338:	0a0d7325 	.word	0x0a0d7325
    833c:	00000000 	.word	0x00000000
    8340:	646e6553 	.word	0x646e6553
    8344:	20676e69 	.word	0x20676e69
    8348:	48206f74 	.word	0x48206f74
    834c:	0054534f 	.word	0x0054534f
    8350:	54534f48 	.word	0x54534f48
    8354:	6150203a 	.word	0x6150203a
    8358:	6e696464 	.word	0x6e696464
    835c:	65532067 	.word	0x65532067
    8360:	6c616972 	.word	0x6c616972
    8364:	6d754e20 	.word	0x6d754e20
    8368:	20726562 	.word	0x20726562
    836c:	6d6f7266 	.word	0x6d6f7266
    8370:	494c4320 	.word	0x494c4320
    8374:	20544e45 	.word	0x20544e45
    8378:	68746977 	.word	0x68746977
    837c:	37783020 	.word	0x37783020
    8380:	0d0a3a37 	.word	0x0d0a3a37
    8384:	0d73250a 	.word	0x0d73250a
    8388:	0000000a 	.word	0x0000000a
    838c:	54534f48 	.word	0x54534f48
    8390:	7265503a 	.word	0x7265503a
    8394:	6d726f66 	.word	0x6d726f66
    8398:	20676e69 	.word	0x20676e69
    839c:	73736150 	.word	0x73736150
    83a0:	6f685420 	.word	0x6f685420
    83a4:	20686775 	.word	0x20686775
    83a8:	636e6f4e 	.word	0x636e6f4e
    83ac:	6f432065 	.word	0x6f432065
    83b0:	6e616d6d 	.word	0x6e616d6d
    83b4:	54202c64 	.word	0x54202c64
    83b8:	20736968 	.word	0x20736968
    83bc:	6c6c6977 	.word	0x6c6c6977
    83c0:	616c7020 	.word	0x616c7020
    83c4:	74206563 	.word	0x74206563
    83c8:	70206568 	.word	0x70206568
    83cc:	65646461 	.word	0x65646461
    83d0:	6c432064 	.word	0x6c432064
    83d4:	746e6569 	.word	0x746e6569
    83d8:	72657320 	.word	0x72657320
    83dc:	206c6169 	.word	0x206c6169
    83e0:	626d756e 	.word	0x626d756e
    83e4:	69207265 	.word	0x69207265
    83e8:	6554206e 	.word	0x6554206e
    83ec:	654b706d 	.word	0x654b706d
    83f0:	00000d79 	.word	0x00000d79
    83f4:	54534f48 	.word	0x54534f48
    83f8:	7265503a 	.word	0x7265503a
    83fc:	6d726f66 	.word	0x6d726f66
    8400:	20676e69 	.word	0x20676e69
    8404:	446e6547 	.word	0x446e6547
    8408:	43206769 	.word	0x43206769
    840c:	616d6d6f 	.word	0x616d6d6f
    8410:	7420646e 	.word	0x7420646e
    8414:	6e49206f 	.word	0x6e49206f
    8418:	61697469 	.word	0x61697469
    841c:	657a696c 	.word	0x657a696c
    8420:	746e490d 	.word	0x746e490d
    8424:	616e7265 	.word	0x616e7265
    8428:	6554206c 	.word	0x6554206c
    842c:	654b706d 	.word	0x654b706d
    8430:	6c732079 	.word	0x6c732079
    8434:	7720746f 	.word	0x7720746f
    8438:	20687469 	.word	0x20687469
    843c:	20656874 	.word	0x20656874
    8440:	65766944 	.word	0x65766944
    8444:	66697372 	.word	0x66697372
    8448:	20646569 	.word	0x20646569
    844c:	0d79654b 	.word	0x0d79654b
    8450:	00000000 	.word	0x00000000
    8454:	00010001 	.word	0x00010001
    8458:	00010001 	.word	0x00010001
    845c:	00010001 	.word	0x00010001
    8460:	00010001 	.word	0x00010001
    8464:	00010001 	.word	0x00010001
    8468:	00010001 	.word	0x00010001
    846c:	00010001 	.word	0x00010001
    8470:	00010001 	.word	0x00010001
    8474:	ffffffff 	.word	0xffffffff
    8478:	ffffffff 	.word	0xffffffff
    847c:	ffffffff 	.word	0xffffffff
    8480:	ffffffff 	.word	0xffffffff
    8484:	ffffffff 	.word	0xffffffff
    8488:	ffffffff 	.word	0xffffffff
    848c:	ffffffff 	.word	0xffffffff
    8490:	ffffffff 	.word	0xffffffff

00008494 <client_config_zone>:
    8494:	00002301 00030800 07060504 0f0e0dee     .#..............
    84a4:	0055ffc8 80808090 80908090 4e804e80     ..U..........N.N
    84b4:	3faf4e00 4e004e00 4e004e00 4e004e00     .N.?.N.N.N.N.N.N
    84c4:	80b08080 00ff00ff 00ff00ff 00ff00ff     ................
    84d4:	00ff00ff ffffffff ffffffff ffffffff     ................
    84e4:	ffffffff 55550000 69726544 4b206576     ......UUDerive K
    84f4:	6e207965 6f63206f 6d75736e 6f697470     ey no consumptio
    8504:	6f63206e 69746e75 0d3a676e 0d73250a     n counting:..%s.
    8514:	0000000a 69726544 4b206576 63207965     ....Derive Key c
    8524:	75736e6f 6974706d 63206e6f 746e756f     onsumption count
    8534:	3a676e69 73250a0d 00000a0d 656e6547     ing:..%s....Gene
    8544:	69746172 4420676e 76697265 654b2065     rating Derive Ke
    8554:	00000d79 6d6d6f43 63696e75 6e697461     y...Communicatin
    8564:	69772067 43206874 6e65696c 6f742074     g with Client to
    8574:	74626f20 206e6961 69726553 4e206c61      obtain Serial N
    8584:	65626d75 00000d72                       umber...

0000858c <host_config_zone>:
    858c:	00002301 00030800 07060504 0f0e0dee     .#..............
    859c:	0055ffce 80808090 80908090 4e804e80     ..U..........N.N
    85ac:	4e804e00 4e004e00 4e004e00 4e004e00     .N.N.N.N.N.N.N.N
    85bc:	80908080 00ff00ff 00ff00ff 00ff00ff     ................
    85cc:	00ff00ff ffffffff ffffffff ffffffff     ................
    85dc:	ffffffff 55550000                       ......UU

000085e4 <host_data_zone>:
    85e4:	00010001 00010001 00010001 00010001     ................
    85f4:	00010001 00010001 00010001 00010001     ................
    8604:	11111111 11111111 11111111 11111111     ................
    8614:	11111111 11111111 11111111 11111111     ................
    8624:	22222222 22222222 22222222 22222222     """"""""""""""""
    8634:	22222222 22222222 22222222 22222222     """"""""""""""""
    8644:	33333333 33333333 33333333 33333333     3333333333333333
    8654:	33333333 33333333 33333333 33333333     3333333333333333
	...
    87a4:	eeeeeeee eeeeeeee eeeeeeee eeeeeeee     ................
    87b4:	eeeeeeee eeeeeeee eeeeeeee eeeeeeee     ................
    87c4:	ffffffff ffffffff ffffffff ffffffff     ................
    87d4:	ffffffff ffffffff ffffffff ffffffff     ................
    87e4:	74697257 20676e69 32414853 43203430     Writing SHA204 C
    87f4:	69666e6f 61727567 6e6f6974 6e6f5a20     onfiguration Zon
    8804:	0a0d3a65 0a0d7325 00000000 6f430d0a     e:..%s........Co
    8814:	6769666e 74617275 6e696f69 6e6f5a20     nfiguratioin Zon
    8824:	6f4c2065 64656b63 00000000 48540a0d     e Locked......TH
    8834:	20455345 2059454b 554c4156 41205345     ESE KEY VALUES A
    8844:	53204552 4e574f48 4c4e4f20 4f462059     RE SHOWN ONLY FO
    8854:	45442052 54534f4d 49544152 50204e4f     R DEMOSTRATION P
    8864:	4f505255 21534553 00000000 4e410a0d     URPOSES!......AN
    8874:	48532044 444c554f 20454220 5450454b     D SHOULD BE KEPT
    8884:	43455320 21544552 0000000d 61440d0a      SECRET!......Da
    8894:	5a206174 20656e6f 6b636f4c 0d0a6465     ta Zone Locked..
    88a4:	00000000 50534944 4241534f 4120454c     ....DISPOSABLE A
    88b4:	45485455 4349544e 4f495441 5254204e     UTHENTICATION TR
    88c4:	494e4941 0d3a474e 00000000 67617355     AINING:.....Usag
    88d4:	000d3a65 74736f68 6f72705f 69736976     e:..host_provisi
    88e4:	20206e6f 20202020 20202020 20202020     on              
    88f4:	20202020 2d2d2020 6d6f432d 646e616d           ---Command
    8904:	6c697720 7270206c 7369766f 206e6f69      will provision 
    8914:	74736f48 0000000d 65696c63 705f746e     Host....client_p
    8924:	69766f72 6e6f6973 20202020 20202020     rovision        
    8934:	20202020 20202020 2d2d2020 6d6f432d               ---Com
    8944:	646e616d 6c697720 7270206c 7369766f     mand will provis
    8954:	206e6f69 65696c43 000d746e 68747561     ion Client..auth
    8964:	69746e65 65746163 696c635f 20746e65     enticate_client 
    8974:	20202020 20202020 20202020 2d2d2020                   --
    8984:	6d6f432d 646e616d 6c697720 6e49206c     -Command will In
    8994:	61697469 43206574 6e65696c 75412074     itiate Client Au
    89a4:	6e656874 61636974 6e6f6974 20796220     thentication by 
    89b4:	74736f48 0000000d 68747561 69746e65     Host....authenti
    89c4:	65746163 696c635f 5f746e65 6e756f63     cate_client_coun
    89d4:	73726574 20202020 2d2d2020 6d6f432d     ters      ---Com
    89e4:	646e616d 6c697720 6e49206c 61697469     mand will Initia
    89f4:	43206574 6e65696c 75412074 6e656874     te Client Authen
    8a04:	61636974 6e6f6974 20796220 74736f48     tication by Host
    8a14:	74697720 6f4d2068 6f746f6e 2063696e      with Monotonic 
    8a24:	6e756f43 20726574 62616e45 0d64656c     Counter Enabled.
    8a34:	00000000 706c6568 00000000 74736f68     ....help....host
    8a44:	6f72705f 69736976 00006e6f 65696c63     _provision..clie
    8a54:	705f746e 69766f72 6e6f6973 00000000     nt_provision....
    8a64:	68747561 69746e65 65746163 696c635f     authenticate_cli
    8a74:	00746e65 68747561 69746e65 65746163     ent.authenticate
    8a84:	696c635f 5f746e65 6e756f63 73726574     _client_counters
    8a94:	00000000 79730a0d 7861746e 72726520     ......syntax err
    8aa4:	6920726f 6f63206e 6e616d6d 25203a64     or in command: %
    8ab4:	000a0d73 00002024 40030004 7461203a     s...$ .....@: at
    8ac4:	5f626163 6f666e69 754e203a 69206c6c     cab_info: Null i
    8ad4:	7475706e 2d2d2073 61745320 3a737574     nputs -- Status:
    8ae4:	32302520 000a0d58 6146203a 64656c69      %02X...: Failed
    8af4:	206f7420 736e6f63 63757274 6e492074      to construct In
    8b04:	63206f66 616d6d6f 2d20646e 7453202d     fo command -- St
    8b14:	73757461 3025203a 0a0d5832 00000000     atus: %02X......
    8b24:	6146203a 64656c69 206f7420 656b6177     : Failed to wake
    8b34:	2d207075 7453202d 73757461 3025203a     up -- Status: %0
    8b44:	0a0d5832 00000000 6146203a 64656c69     2X......: Failed
    8b54:	206f7420 646e6573 666e4920 6f63206f      to send Info co
    8b64:	6e616d6d 2d2d2064 61745320 3a737574     mmand -- Status:
    8b74:	32302520 000a0d58 6146203a 64656c69      %02X...: Failed
    8b84:	206f7420 65636572 20657669 6f666e49      to receive Info
    8b94:	6d6f6320 646e616d 202d2d20 74617453      command -- Stat
    8ba4:	203a7375 58323025 00000a0d 6e49203a     us: %02X....: In
    8bb4:	63206f66 616d6d6f 7220646e 72757465     fo command retur
    8bc4:	2064656e 6f727265 6f632072 6f206564     ned error code o
    8bd4:	6f6e2072 73657220 65736e6f 202d2d20     r no resonse -- 
    8be4:	74617453 203a7375 58323025 00000a0d     Status: %02X....
    8bf4:	58323025 00000020 58323025 00000000     %02X ...%02X....

00008c04 <k.4571>:
    8c04:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
    8c14:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
    8c24:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
    8c34:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
    8c44:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
    8c54:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
    8c64:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
    8c74:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
    8c84:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
    8c94:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
    8ca4:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
    8cb4:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
    8cc4:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
    8cd4:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
    8ce4:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
    8cf4:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.
    8d04:	000032e2 0000332e 0000333a 00003346     .2...3..:3..F3..
    8d14:	00003352 0000335e 000034be 0000350a     R3..^3...4...5..
    8d24:	00003518 00003526 00003534 00003542     .5..&5..45..B5..
    8d34:	43331104 01100080 08000200 00050400     ..3C............
    8d44:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    8d54:	42001800 42001c00 000044ca 000044c6     ...B...B.D...D..
    8d64:	000044c6 00004528 00004528 000044de     .D..(E..(E...D..
    8d74:	000044d0 000044e4 00004516 000045b0     .D...D...E...E..
    8d84:	00004590 00004590 0000461c 000045a2     .E...E...F...E..
    8d94:	000045be 00004594 000045cc 0000460c     .E...E...E...F..
    8da4:	00005700 000056e2 0000569c 000055ba     .W...V...V...U..
    8db4:	0000569c 000056d4 0000569c 000055ba     .V...V...V...U..
    8dc4:	000056e2 000056e2 000056d4 000055ba     .V...V...V...U..
    8dd4:	000055b2 000055b2 000055b2 00005918     .U...U...U...Y..
    8de4:	00005d60 00005c20 00005c20 00005c1c     `].. \.. \...\..
    8df4:	00005d38 00005d38 00005d2a 00005c1c     8]..8]..*]...\..
    8e04:	00005d38 00005d2a 00005d38 00005c1c     8]..*]..8]...\..
    8e14:	00005d40 00005d40 00005d40 00005f44     @]..@]..@]..D_..

00008e24 <_global_impure_ptr>:
    8e24:	20000418                                ... 

00008e28 <__sf_fake_stderr>:
	...

00008e48 <__sf_fake_stdin>:
	...

00008e68 <__sf_fake_stdout>:
	...
    8e88:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    8e98:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    8ea8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    8eb8:	00006665                                ef..

00008ebc <_init>:
    8ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ebe:	46c0      	nop			; (mov r8, r8)
    8ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8ec2:	bc08      	pop	{r3}
    8ec4:	469e      	mov	lr, r3
    8ec6:	4770      	bx	lr

00008ec8 <__init_array_start>:
    8ec8:	000000dd 	.word	0x000000dd

00008ecc <_fini>:
    8ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ece:	46c0      	nop			; (mov r8, r8)
    8ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8ed2:	bc08      	pop	{r3}
    8ed4:	469e      	mov	lr, r3
    8ed6:	4770      	bx	lr

00008ed8 <__fini_array_start>:
    8ed8:	000000b5 	.word	0x000000b5
